1
00:06:57,930 --> 00:07:03,850
 welcome to nurbs welcome back to

2
00:07:01,020 --> 00:07:03,850
 

3
00:07:01,030 --> 00:07:07,720
 Montreal if you've been here before

4
00:07:03,840 --> 00:07:07,720
 

5
00:07:03,850 --> 00:07:10,990
 live here or welcome if this is your

6
00:07:07,710 --> 00:07:10,990
 

7
00:07:07,720 --> 00:07:14,590
 first time tuner ups or to tuner drips

8
00:07:10,980 --> 00:07:14,590
 

9
00:07:10,990 --> 00:07:18,580
 at Montreal this morning we're going to

10
00:07:14,580 --> 00:07:18,580
 

11
00:07:14,590 --> 00:07:22,360
 have a great tutorial on adversarial

12
00:07:18,570 --> 00:07:22,360
 

13
00:07:18,580 --> 00:07:25,050
 robustness theory and practice and let

14
00:07:22,350 --> 00:07:25,050
 

15
00:07:22,360 --> 00:07:29,220
 me introduce our two speakers today

16
00:07:25,040 --> 00:07:29,220
 

17
00:07:25,050 --> 00:07:32,830
 Aleksandr Madhuri and Zico Colter

18
00:07:29,210 --> 00:07:32,830
 

19
00:07:29,220 --> 00:07:35,650
 Alexander Madhuri is a professor at MIT

20
00:07:32,820 --> 00:07:35,650
 

21
00:07:32,830 --> 00:07:39,190
 at the csail Laboratory and his work

22
00:07:35,640 --> 00:07:39,190
 

23
00:07:35,650 --> 00:07:41,949
 focuses on optimization and robustness

24
00:07:39,180 --> 00:07:41,949
 

25
00:07:39,190 --> 00:07:45,490
 in particular in deep learning Zico

26
00:07:41,939 --> 00:07:45,490
 

27
00:07:41,949 --> 00:07:48,190
 Colter is a professor at Carnegie Mellon

28
00:07:45,480 --> 00:07:48,190
 

29
00:07:45,490 --> 00:07:53,050
 and also the chief scientist at the

30
00:07:48,180 --> 00:07:53,050
 

31
00:07:48,190 --> 00:07:55,270
 Bosch AI Center and his work focuses as

32
00:07:53,040 --> 00:07:55,270
 

33
00:07:53,050 --> 00:07:58,360
 well on optimization and on in

34
00:07:55,260 --> 00:07:58,360
 

35
00:07:55,270 --> 00:08:01,780
 particular rigorous explainable and

36
00:07:58,350 --> 00:08:01,780
 

37
00:07:58,360 --> 00:08:04,300
 robust deep learning algorithms please

38
00:08:01,770 --> 00:08:04,300
 

39
00:08:01,780 --> 00:08:14,080
 welcome the two of them and let's enjoy

40
00:08:04,290 --> 00:08:14,080
 

41
00:08:04,300 --> 00:08:16,870
 the tutorial thank you I'm Alexander

42
00:08:14,070 --> 00:08:16,870
 

43
00:08:14,080 --> 00:08:21,550
 Madrid and together with Zico to talk

44
00:08:16,860 --> 00:08:21,550
 

45
00:08:16,870 --> 00:08:24,370
 about robustness so is something that we

46
00:08:21,540 --> 00:08:24,370
 

47
00:08:21,550 --> 00:08:27,010
 sort of knew what it is but we it still

48
00:08:24,360 --> 00:08:27,010
 

49
00:08:24,370 --> 00:08:29,530
 caught us somehow off-guard and you know

50
00:08:27,000 --> 00:08:29,530
 

51
00:08:27,010 --> 00:08:32,320
 because of that a well we have to now

52
00:08:29,520 --> 00:08:32,320
 

53
00:08:29,530 --> 00:08:33,760
 struggle ok and actually we wanted to

54
00:08:32,310 --> 00:08:33,760
 

55
00:08:32,320 --> 00:08:35,740
 use this opportunity to not only talk

56
00:08:33,750 --> 00:08:35,740
 

57
00:08:33,760 --> 00:08:38,529
 about the solar business but also to

58
00:08:35,730 --> 00:08:38,529
 

59
00:08:35,740 --> 00:08:40,240
 sketch a bit broader picture of the

60
00:08:38,519 --> 00:08:40,240
 

61
00:08:38,529 --> 00:08:42,610
 piece of the field and the challenges

62
00:08:40,230 --> 00:08:42,610
 

63
00:08:40,240 --> 00:08:44,589
 that we face when we try to deploy

64
00:08:42,600 --> 00:08:44,589
 

65
00:08:42,610 --> 00:08:48,490
 machine learning in the real world

66
00:08:44,579 --> 00:08:48,490
 

67
00:08:44,589 --> 00:08:50,620
 ok so let's get started ok so I think

68
00:08:48,480 --> 00:08:50,620
 

69
00:08:48,490 --> 00:08:53,110
 it's safe to say that machine learning

70
00:08:50,610 --> 00:08:53,110
 

71
00:08:50,620 --> 00:08:54,910
 is a success story currently you know if

72
00:08:53,100 --> 00:08:54,910
 

73
00:08:53,110 --> 00:08:56,770
 you work on machine learning there is

74
00:08:54,900 --> 00:08:56,770
 

75
00:08:54,910 --> 00:08:59,140
 plenty of opportunities to feel proud

76
00:08:56,760 --> 00:08:59,140
 

77
00:08:56,770 --> 00:09:01,990
 about yourself over the last decade so

78
00:08:59,130 --> 00:09:01,990
 

79
00:08:59,140 --> 00:09:04,209
 we made progress on some of the flagship

80
00:09:01,980 --> 00:09:04,209
 

81
00:09:01,990 --> 00:09:05,250
 trenches that just a few years before we

82
00:09:04,199 --> 00:09:05,250
 

83
00:09:04,209 --> 00:09:08,100
 did not think

84
00:09:05,240 --> 00:09:08,100
 

85
00:09:05,250 --> 00:09:12,000
 in rich now they are so that's all great

86
00:09:08,090 --> 00:09:12,000
 

87
00:09:08,100 --> 00:09:14,069
 and in particular this kind of bread a

88
00:09:11,990 --> 00:09:14,069
 

89
00:09:12,000 --> 00:09:16,230
 lot of excitement ok so now you can't

90
00:09:14,059 --> 00:09:16,230
 

91
00:09:14,069 --> 00:09:18,930
 open the newspaper without reading about

92
00:09:16,220 --> 00:09:18,930
 

93
00:09:16,230 --> 00:09:21,389
 all the great things that ml or a I will

94
00:09:18,920 --> 00:09:21,389
 

95
00:09:18,930 --> 00:09:23,910
 bring to us and in particular you know

96
00:09:21,379 --> 00:09:23,910
 

97
00:09:21,389 --> 00:09:27,000
 all successes essentially inspired

98
00:09:23,900 --> 00:09:27,000
 

99
00:09:23,910 --> 00:09:28,769
 people to kind of apply or think of

100
00:09:26,990 --> 00:09:28,769
 

101
00:09:27,000 --> 00:09:31,769
 applying machine learning to anything

102
00:09:28,759 --> 00:09:31,769
 

103
00:09:28,769 --> 00:09:33,509
 you do okay in a way no matter what you

104
00:09:31,759 --> 00:09:33,509
 

105
00:09:31,769 --> 00:09:36,480
 do if you don't put machine learning

106
00:09:33,499 --> 00:09:36,480
 

107
00:09:33,509 --> 00:09:38,370
 into it you are doing it wrong okay so

108
00:09:36,470 --> 00:09:38,370
 

109
00:09:36,480 --> 00:09:41,069
 this is all very exciting it definitely

110
00:09:38,360 --> 00:09:41,069
 

111
00:09:38,370 --> 00:09:45,180
 makes this will be very exciting to be

112
00:09:41,059 --> 00:09:45,180
 

113
00:09:41,069 --> 00:09:47,160
 in just you know this also however comes

114
00:09:45,170 --> 00:09:47,160
 

115
00:09:45,180 --> 00:09:51,420
 with certain responsibilities okay

116
00:09:47,150 --> 00:09:51,420
 

117
00:09:47,160 --> 00:09:54,089
 because as exciting as you know trying

118
00:09:51,410 --> 00:09:54,089
 

119
00:09:51,420 --> 00:09:57,269
 to deploy this ml everywhere as exciting

120
00:09:54,079 --> 00:09:57,269
 

121
00:09:54,089 --> 00:10:00,149
 as it is I think it behooves of us as a

122
00:09:57,259 --> 00:10:00,149
 

123
00:09:57,269 --> 00:10:02,790
 community to stop for a moment and think

124
00:10:00,139 --> 00:10:02,790
 

125
00:10:00,149 --> 00:10:05,129
 okay is actually detect the ml

126
00:10:02,780 --> 00:10:05,129
 

127
00:10:02,790 --> 00:10:08,519
 technology the way it is now actually

128
00:10:05,119 --> 00:10:08,519
 

129
00:10:05,129 --> 00:10:10,290
 truly ready for real world applaud okay

130
00:10:08,509 --> 00:10:10,290
 

131
00:10:08,519 --> 00:10:11,309
 and that's somehow the question that we

132
00:10:10,280 --> 00:10:11,309
 

133
00:10:10,290 --> 00:10:14,100
 brought questions we would like to

134
00:10:11,299 --> 00:10:14,100
 

135
00:10:11,309 --> 00:10:16,980
 tackle or specifically you know there is

136
00:10:14,090 --> 00:10:16,980
 

137
00:10:14,100 --> 00:10:18,870
 many way to attack this question and

138
00:10:16,970 --> 00:10:18,870
 

139
00:10:16,980 --> 00:10:21,240
 many in the community try to do it

140
00:10:18,860 --> 00:10:21,240
 

141
00:10:18,870 --> 00:10:23,399
 somehow the angle that we want to focus

142
00:10:21,230 --> 00:10:23,399
 

143
00:10:21,240 --> 00:10:25,529
 on in this talk is something that you

144
00:10:23,389 --> 00:10:25,529
 

145
00:10:23,399 --> 00:10:27,629
 know we kind of phrased as you know can

146
00:10:25,519 --> 00:10:27,629
 

147
00:10:25,529 --> 00:10:30,269
 we truly rely on the machine learning

148
00:10:27,619 --> 00:10:30,269
 

149
00:10:27,629 --> 00:10:32,189
 the way we have it and even that

150
00:10:30,259 --> 00:10:32,189
 

151
00:10:30,269 --> 00:10:33,990
 question has many interpretation you

152
00:10:32,179 --> 00:10:33,990
 

153
00:10:32,189 --> 00:10:36,809
 know one of them would be that you know

154
00:10:33,980 --> 00:10:36,809
 

155
00:10:33,990 --> 00:10:39,120
 we are kind of afraid that the AI will

156
00:10:36,799 --> 00:10:39,120
 

157
00:10:36,809 --> 00:10:40,949
 bring doom to us all and you know this

158
00:10:39,110 --> 00:10:40,949
 

159
00:10:39,120 --> 00:10:43,199
 is definitely a legitimate concern but

160
00:10:40,939 --> 00:10:43,199
 

161
00:10:40,949 --> 00:10:45,870
 that's not what you want to cover in

162
00:10:43,189 --> 00:10:45,870
 

163
00:10:43,199 --> 00:10:49,079
 this talk what you want to focus on is

164
00:10:45,860 --> 00:10:49,079
 

165
00:10:45,870 --> 00:10:51,420
 something actually much more mundane but

166
00:10:49,069 --> 00:10:51,420
 

167
00:10:49,079 --> 00:10:54,750
 because of this actually much more acute

168
00:10:51,410 --> 00:10:54,750
 

169
00:10:51,420 --> 00:10:57,029
 and dangerous is just the fact that

170
00:10:54,740 --> 00:10:57,029
 

171
00:10:54,750 --> 00:10:59,910
 essentially we don't really understand

172
00:10:57,019 --> 00:10:59,910
 

173
00:10:57,029 --> 00:11:02,160
 yet well how machine learning interacts

174
00:10:59,900 --> 00:11:02,160
 

175
00:10:59,910 --> 00:11:05,040
 with other parts of our systems pipeline

176
00:11:02,150 --> 00:11:05,040
 

177
00:11:02,160 --> 00:11:06,569
 okay and in particular kind of whenever

178
00:11:05,030 --> 00:11:06,569
 

179
00:11:05,040 --> 00:11:09,660
 machine learning is embedded into a

180
00:11:06,559 --> 00:11:09,660
 

181
00:11:06,569 --> 00:11:12,389
 system it turns out that it gives a way

182
00:11:09,650 --> 00:11:12,389
 

183
00:11:09,660 --> 00:11:13,139
 for adversaries to manipulate it in a

184
00:11:12,379 --> 00:11:13,139
 

185
00:11:12,389 --> 00:11:15,420
 variety of

186
00:11:13,129 --> 00:11:15,420
 

187
00:11:13,139 --> 00:11:17,189
 okay and have seen plenty examples of

188
00:11:15,410 --> 00:11:17,189
 

189
00:11:15,420 --> 00:11:19,170
 that already but kind of the point here

190
00:11:17,179 --> 00:11:19,170
 

191
00:11:17,189 --> 00:11:21,660
 is to just not allow this to happen

192
00:11:19,160 --> 00:11:21,660
 

193
00:11:19,170 --> 00:11:23,879
 and you know going further okay so

194
00:11:21,650 --> 00:11:23,879
 

195
00:11:21,660 --> 00:11:26,069
 that's when there are some bad guys

196
00:11:23,869 --> 00:11:26,069
 

197
00:11:23,879 --> 00:11:27,389
 trying to manipulate our system that's

198
00:11:26,059 --> 00:11:27,389
 

199
00:11:26,069 --> 00:11:28,829
 already where machine learning becomes

200
00:11:27,379 --> 00:11:28,829
 

201
00:11:27,389 --> 00:11:30,989
 you know like this is a problem for

202
00:11:28,819 --> 00:11:30,989
 

203
00:11:28,829 --> 00:11:33,089
 machine learning but also even if there

204
00:11:30,979 --> 00:11:33,089
 

205
00:11:30,989 --> 00:11:35,759
 is no bad guys in the loop there is

206
00:11:33,079 --> 00:11:35,759
 

207
00:11:33,089 --> 00:11:38,699
 still nature and sort of when we want to

208
00:11:35,749 --> 00:11:38,699
 

209
00:11:35,759 --> 00:11:41,790
 go from 95% reliability to 99 percent

210
00:11:38,689 --> 00:11:41,790
 

211
00:11:38,699 --> 00:11:43,799
 reliability things actually become quite

212
00:11:41,780 --> 00:11:43,799
 

213
00:11:41,790 --> 00:11:46,019
 difficult and you know kind of safety is

214
00:11:43,789 --> 00:11:46,019
 

215
00:11:43,799 --> 00:11:50,579
 still very much an issue for application

216
00:11:46,009 --> 00:11:50,579
 

217
00:11:46,019 --> 00:11:52,559
 of a map okay so this is kind of general

218
00:11:50,569 --> 00:11:52,559
 

219
00:11:50,579 --> 00:11:54,809
 theme that you want to tackle here and I

220
00:11:52,549 --> 00:11:54,809
 

221
00:11:52,559 --> 00:11:56,669
 think it no it behooves to us for us to

222
00:11:54,799 --> 00:11:56,669
 

223
00:11:54,809 --> 00:11:59,160
 just think about okay where are these

224
00:11:56,659 --> 00:11:59,160
 

225
00:11:56,669 --> 00:12:00,989
 problems coming from okay so as you like

226
00:11:59,150 --> 00:12:00,989
 

227
00:11:59,160 --> 00:12:02,189
 why would you worry about all these

228
00:12:00,979 --> 00:12:02,189
 

229
00:12:00,989 --> 00:12:05,009
 questions in the first place because you

230
00:12:02,179 --> 00:12:05,009
 

231
00:12:02,189 --> 00:12:06,959
 know we know that a kind of ml seems to

232
00:12:04,999 --> 00:12:06,959
 

233
00:12:05,009 --> 00:12:10,019
 work really really well on all the

234
00:12:06,949 --> 00:12:10,019
 

235
00:12:06,959 --> 00:12:11,790
 benchmarks that we deploy it okay and in

236
00:12:10,009 --> 00:12:11,790
 

237
00:12:10,019 --> 00:12:14,279
 particular here we have you know one of

238
00:12:11,780 --> 00:12:14,279
 

239
00:12:11,790 --> 00:12:16,980
 the key homeruns of machine learning

240
00:12:14,269 --> 00:12:16,980
 

241
00:12:14,279 --> 00:12:18,629
 namely the image net challenge so as all

242
00:12:16,970 --> 00:12:18,629
 

243
00:12:16,980 --> 00:12:20,009
 of you probably know this is like a

244
00:12:18,619 --> 00:12:20,009
 

245
00:12:18,629 --> 00:12:22,649
 computer vision object recognition

246
00:12:19,999 --> 00:12:22,649
 

247
00:12:20,009 --> 00:12:26,549
 challenge where you know you train on

248
00:12:22,639 --> 00:12:26,549
 

249
00:12:22,649 --> 00:12:28,739
 roughly 1.5 1.5 million of high

250
00:12:26,539 --> 00:12:28,739
 

251
00:12:26,549 --> 00:12:31,230
 resolution images and your goal is to

252
00:12:28,729 --> 00:12:31,230
 

253
00:12:28,739 --> 00:12:36,149
 essentially correctly classify the

254
00:12:31,220 --> 00:12:36,149
 

255
00:12:31,230 --> 00:12:38,399
 corresponding test set and well to place

256
00:12:36,139 --> 00:12:38,399
 

257
00:12:36,149 --> 00:12:40,860
 every photo in a correct category okay

258
00:12:38,389 --> 00:12:40,860
 

259
00:12:38,399 --> 00:12:43,079
 and over here we have a progress over

260
00:12:40,850 --> 00:12:43,079
 

261
00:12:40,860 --> 00:12:46,019
 the years over like you know how well

262
00:12:43,069 --> 00:12:46,019
 

263
00:12:43,079 --> 00:12:49,129
 are we doing on this task okay so in

264
00:12:46,009 --> 00:12:49,129
 

265
00:12:46,019 --> 00:12:51,569
 particular we see this market deep in

266
00:12:49,119 --> 00:12:51,569
 

267
00:12:49,129 --> 00:12:53,429
 2012 that's exactly where the Alex that

268
00:12:51,559 --> 00:12:53,429
 

269
00:12:51,569 --> 00:12:55,860
 paper showed up and essentially showed

270
00:12:53,419 --> 00:12:55,860
 

271
00:12:53,429 --> 00:12:57,809
 how deep learning can be you know

272
00:12:55,850 --> 00:12:57,809
 

273
00:12:55,860 --> 00:12:59,639
 applied extremely successfully in

274
00:12:57,799 --> 00:12:59,639
 

275
00:12:57,809 --> 00:13:00,869
 computer vision and it just started the

276
00:12:59,629 --> 00:13:00,869
 

277
00:12:59,639 --> 00:13:04,919
 computer vision deep learning revolution

278
00:13:00,859 --> 00:13:04,919
 

279
00:13:00,869 --> 00:13:07,589
 and in 2015 something very interesting

280
00:13:04,909 --> 00:13:07,589
 

281
00:13:04,919 --> 00:13:09,779
 happened so essentially the performance

282
00:13:07,579 --> 00:13:09,779
 

283
00:13:07,589 --> 00:13:11,220
 of the best-performing deep learning

284
00:13:09,769 --> 00:13:11,220
 

285
00:13:09,779 --> 00:13:14,129
 system on this challenge actually

286
00:13:11,210 --> 00:13:14,129
 

287
00:13:11,220 --> 00:13:17,429
 outperformed humans or to be more

288
00:13:14,119 --> 00:13:17,429
 

289
00:13:14,129 --> 00:13:20,999
 precise a human named Leandre karpati

290
00:13:17,419 --> 00:13:20,999
 

291
00:13:17,429 --> 00:13:23,220
 and you know well I think energy did a

292
00:13:20,989 --> 00:13:23,220
 

293
00:13:20,999 --> 00:13:25,570
 pretty good job and the fact that you

294
00:13:23,210 --> 00:13:25,570
 

295
00:13:23,220 --> 00:13:27,220
 know the existing existing

296
00:13:25,560 --> 00:13:27,220
 

297
00:13:25,570 --> 00:13:29,440
 vision solutions can do better than that

298
00:13:27,210 --> 00:13:29,440
 

299
00:13:27,220 --> 00:13:31,120
 to definitely give us a pause and is

300
00:13:29,430 --> 00:13:31,120
 

301
00:13:29,440 --> 00:13:31,720
 definitely Express it's a definitely

302
00:13:31,110 --> 00:13:31,720
 

303
00:13:31,120 --> 00:13:34,900
 impressive

304
00:13:31,710 --> 00:13:34,900
 

305
00:13:31,720 --> 00:13:38,200
 okay so that's great but what I would

306
00:13:34,890 --> 00:13:38,200
 

307
00:13:34,900 --> 00:13:41,050
 like to ask to ponder here is what does

308
00:13:38,190 --> 00:13:41,050
 

309
00:13:38,200 --> 00:13:42,940
 this result actually mean okay so it

310
00:13:41,040 --> 00:13:42,940
 

311
00:13:41,050 --> 00:13:45,400
 clearly means that you know computer

312
00:13:42,930 --> 00:13:45,400
 

313
00:13:42,940 --> 00:13:49,000
 vision tools the way we deployed them

314
00:13:45,390 --> 00:13:49,000
 

315
00:13:45,400 --> 00:13:51,610
 now can outperform human on this

316
00:13:48,990 --> 00:13:51,610
 

317
00:13:49,000 --> 00:13:53,020
 particular benchmark but somehow you

318
00:13:51,600 --> 00:13:53,020
 

319
00:13:51,610 --> 00:13:55,060
 know and this is definitely true this is

320
00:13:53,010 --> 00:13:55,060
 

321
00:13:53,020 --> 00:13:57,880
 exactly what this test measures but

322
00:13:55,050 --> 00:13:57,880
 

323
00:13:55,060 --> 00:13:59,440
 somehow in a way is a human with tends

324
00:13:57,870 --> 00:13:59,440
 

325
00:13:57,880 --> 00:14:01,480
 to kind of generalize you know the

326
00:13:59,430 --> 00:14:01,480
 

327
00:13:59,440 --> 00:14:03,460
 things to that we see to things that

328
00:14:01,470 --> 00:14:03,460
 

329
00:14:01,480 --> 00:14:05,770
 maybe are not there but kind of removed

330
00:14:03,450 --> 00:14:05,770
 

331
00:14:03,460 --> 00:14:07,090
 very much like to see okay and this is

332
00:14:05,760 --> 00:14:07,090
 

333
00:14:05,770 --> 00:14:09,550
 definitely the case in computer vision

334
00:14:07,080 --> 00:14:09,550
 

335
00:14:07,090 --> 00:14:10,780
 and there is a good reason for that okay

336
00:14:09,540 --> 00:14:10,780
 

337
00:14:09,550 --> 00:14:13,690
 and the good reason for that is

338
00:14:10,770 --> 00:14:13,690
 

339
00:14:10,780 --> 00:14:16,350
 something about you know the conceptual

340
00:14:13,680 --> 00:14:16,350
 

341
00:14:13,690 --> 00:14:18,970
 framework that we use that somehow we

342
00:14:16,340 --> 00:14:18,970
 

343
00:14:16,350 --> 00:14:21,460
 kind of you know sort of are aware of

344
00:14:18,960 --> 00:14:21,460
 

345
00:14:18,970 --> 00:14:24,100
 but don't really think about it okay so

346
00:14:21,450 --> 00:14:24,100
 

347
00:14:21,460 --> 00:14:27,010
 what am i referring to here so let's

348
00:14:24,090 --> 00:14:27,010
 

349
00:14:24,100 --> 00:14:28,660
 quickly look back to supervised ml

350
00:14:27,000 --> 00:14:28,660
 

351
00:14:27,010 --> 00:14:31,030
 framework and just let's think about how

352
00:14:28,650 --> 00:14:31,030
 

353
00:14:28,660 --> 00:14:33,190
 we think about the process of you know

354
00:14:31,020 --> 00:14:33,190
 

355
00:14:31,030 --> 00:14:35,260
 training you know training a classifier

356
00:14:33,180 --> 00:14:35,260
 

357
00:14:33,190 --> 00:14:38,170
 and the way we evaluate it okay so

358
00:14:35,250 --> 00:14:38,170
 

359
00:14:35,260 --> 00:14:40,180
 usually we always think there is so kind

360
00:14:38,160 --> 00:14:40,180
 

361
00:14:38,170 --> 00:14:41,770
 of distribution in the sky okay that

362
00:14:40,170 --> 00:14:41,770
 

363
00:14:40,180 --> 00:14:43,510
 essentially says this distribution of

364
00:14:41,760 --> 00:14:43,510
 

365
00:14:41,770 --> 00:14:45,520
 all the objects you could ever see and

366
00:14:43,500 --> 00:14:45,520
 

367
00:14:43,510 --> 00:14:48,340
 would ever encounter and you would like

368
00:14:45,510 --> 00:14:48,340
 

369
00:14:45,520 --> 00:14:50,320
 to classify okay and now well the way we

370
00:14:48,330 --> 00:14:50,320
 

371
00:14:48,340 --> 00:14:52,240
 train is that we sample a bunch of

372
00:14:50,310 --> 00:14:52,240
 

373
00:14:50,320 --> 00:14:54,070
 samples from this distribution and we

374
00:14:52,230 --> 00:14:54,070
 

375
00:14:52,240 --> 00:14:56,050
 just plug it into our training algorithm

376
00:14:54,060 --> 00:14:56,050
 

377
00:14:54,070 --> 00:14:58,600
 and this you know this gives us the

378
00:14:56,040 --> 00:14:58,600
 

379
00:14:56,050 --> 00:15:01,630
 model that we trained and then the way

380
00:14:58,590 --> 00:15:01,630
 

381
00:14:58,600 --> 00:15:03,940
 we actually check if we are doing a good

382
00:15:01,620 --> 00:15:03,940
 

383
00:15:01,630 --> 00:15:06,040
 job essentially if you know if our if we

384
00:15:03,930 --> 00:15:06,040
 

385
00:15:03,940 --> 00:15:07,380
 did any good it's essentially what we do

386
00:15:06,030 --> 00:15:07,380
 

387
00:15:06,040 --> 00:15:09,100
 it just will sample some more

388
00:15:07,370 --> 00:15:09,100
 

389
00:15:07,380 --> 00:15:12,100
 independent sample from the distribution

390
00:15:09,090 --> 00:15:12,100
 

391
00:15:09,100 --> 00:15:14,290
 and then we test you know how well our

392
00:15:12,090 --> 00:15:14,290
 

393
00:15:12,100 --> 00:15:16,690
 classifiers does on classifying these

394
00:15:14,280 --> 00:15:16,690
 

395
00:15:14,290 --> 00:15:18,700
 okay so in particular our measure of

396
00:15:16,680 --> 00:15:18,700
 

397
00:15:16,690 --> 00:15:21,700
 performance is in a fraction of mistakes

398
00:15:18,690 --> 00:15:21,700
 

399
00:15:18,700 --> 00:15:24,580
 we made during this test and you know

400
00:15:21,690 --> 00:15:24,580
 

401
00:15:21,700 --> 00:15:27,040
 it's safe to say that we made you know

402
00:15:24,570 --> 00:15:27,040
 

403
00:15:24,580 --> 00:15:28,930
 really really in a beautiful progress on

404
00:15:27,030 --> 00:15:28,930
 

405
00:15:27,040 --> 00:15:32,230
 trying to optimize this measure of

406
00:15:28,920 --> 00:15:32,230
 

407
00:15:28,930 --> 00:15:34,630
 performance okay so everything is great

408
00:15:32,220 --> 00:15:34,630
 

409
00:15:32,230 --> 00:15:36,850
 so far except there is one crucial

410
00:15:34,620 --> 00:15:36,850
 

411
00:15:34,630 --> 00:15:39,699
 assumption here that actually

412
00:15:36,840 --> 00:15:39,699
 

413
00:15:36,850 --> 00:15:41,290
 is not reflected in practice namely this

414
00:15:39,689 --> 00:15:41,290
 

415
00:15:39,699 --> 00:15:44,050
 assumption is that actually in practice

416
00:15:41,280 --> 00:15:44,050
 

417
00:15:41,290 --> 00:15:47,500
 it is not the case that the distribution

418
00:15:44,040 --> 00:15:47,500
 

419
00:15:44,050 --> 00:15:49,660
 that we use to train our emotion in the

420
00:15:47,490 --> 00:15:49,660
 

421
00:15:47,500 --> 00:15:52,149
 model is exactly the distribution that

422
00:15:49,650 --> 00:15:52,149
 

423
00:15:49,660 --> 00:15:54,370
 the model will encounter where we deploy

424
00:15:52,139 --> 00:15:54,370
 

425
00:15:52,149 --> 00:15:56,139
 it in the real world okay so there are

426
00:15:54,360 --> 00:15:56,139
 

427
00:15:54,370 --> 00:15:57,579
 various forms of covariates shift and

428
00:15:56,129 --> 00:15:57,579
 

429
00:15:56,139 --> 00:15:59,709
 essentially I says this almost never

430
00:15:57,569 --> 00:15:59,709
 

431
00:15:57,579 --> 00:16:02,230
 happens that these distributions are are

432
00:15:59,699 --> 00:16:02,230
 

433
00:15:59,709 --> 00:16:04,209
 the same and you may say well oh well

434
00:16:02,220 --> 00:16:04,209
 

435
00:16:02,230 --> 00:16:05,860
 you know like that's how we make sense

436
00:16:04,199 --> 00:16:05,860
 

437
00:16:04,209 --> 00:16:07,509
 of stuff we just make assumptions that

438
00:16:05,850 --> 00:16:07,509
 

439
00:16:05,860 --> 00:16:09,730
 maybe are not exactly reflected in

440
00:16:07,499 --> 00:16:09,730
 

441
00:16:07,509 --> 00:16:12,519
 practice still they lead us to our good

442
00:16:09,720 --> 00:16:12,519
 

443
00:16:09,730 --> 00:16:14,440
 solutions but it turns however there is

444
00:16:12,509 --> 00:16:14,440
 

445
00:16:12,519 --> 00:16:15,850
 not however that in this case this may

446
00:16:14,430 --> 00:16:15,850
 

447
00:16:14,440 --> 00:16:18,490
 be an assumption that actually was

448
00:16:15,840 --> 00:16:18,490
 

449
00:16:15,850 --> 00:16:20,529
 somewhat misleading okay so essentially

450
00:16:18,480 --> 00:16:20,529
 

451
00:16:18,490 --> 00:16:23,230
 what can go wrong in the real world

452
00:16:20,519 --> 00:16:23,230
 

453
00:16:20,529 --> 00:16:26,709
 where this assumption does not work it

454
00:16:23,220 --> 00:16:26,709
 

455
00:16:23,230 --> 00:16:30,009
 does not hold anymore okay so I think

456
00:16:26,699 --> 00:16:30,009
 

457
00:16:26,709 --> 00:16:32,079
 one of the key one of the key

458
00:16:29,999 --> 00:16:32,079
 

459
00:16:30,009 --> 00:16:33,850
 implications of this assumption or lack

460
00:16:32,069 --> 00:16:33,850
 

461
00:16:32,079 --> 00:16:35,649
 of lack of this assumption is the

462
00:16:33,840 --> 00:16:35,649
 

463
00:16:33,850 --> 00:16:38,319
 phenomena that we just observe in our

464
00:16:35,639 --> 00:16:38,319
 

465
00:16:35,649 --> 00:16:40,329
 uniformly is that you know the our

466
00:16:38,309 --> 00:16:40,329
 

467
00:16:38,319 --> 00:16:42,689
 machine learning models the predictions

468
00:16:40,319 --> 00:16:42,689
 

469
00:16:40,329 --> 00:16:45,939
 are actually extremely good on average

470
00:16:42,679 --> 00:16:45,939
 

471
00:16:42,689 --> 00:16:49,259
 but also they are extremely brittle ok

472
00:16:45,929 --> 00:16:49,259
 

473
00:16:45,939 --> 00:16:51,699
 so again one of the like the most

474
00:16:49,249 --> 00:16:51,699
 

475
00:16:49,259 --> 00:16:53,800
 publicized this version of this is

476
00:16:51,689 --> 00:16:53,800
 

477
00:16:51,699 --> 00:16:55,930
 something called a vessel examples over

478
00:16:53,790 --> 00:16:55,930
 

479
00:16:53,800 --> 00:16:58,089
 here we have an image of a peak which

480
00:16:55,920 --> 00:16:58,089
 

481
00:16:55,930 --> 00:17:00,880
 state-of-the-art classifiers correctly

482
00:16:58,079 --> 00:17:00,880
 

483
00:16:58,089 --> 00:17:02,980
 recognizes a pig and so everything is

484
00:17:00,870 --> 00:17:02,980
 

485
00:17:00,880 --> 00:17:04,809
 great so far however what it turns out

486
00:17:02,970 --> 00:17:04,809
 

487
00:17:02,980 --> 00:17:07,510
 is that there is a way for me to add

488
00:17:04,799 --> 00:17:07,510
 

489
00:17:04,809 --> 00:17:09,939
 just a little bit of noise to this image

490
00:17:07,500 --> 00:17:09,939
 

491
00:17:07,510 --> 00:17:11,949
 this noise is not random it's you know

492
00:17:09,929 --> 00:17:11,949
 

493
00:17:09,939 --> 00:17:14,169
 it's chosen in a very specific way and

494
00:17:11,939 --> 00:17:14,169
 

495
00:17:11,949 --> 00:17:15,370
 you know the good thing about this thing

496
00:17:14,159 --> 00:17:15,370
 

497
00:17:14,169 --> 00:17:17,020
 is that this know is essentially

498
00:17:15,360 --> 00:17:17,020
 

499
00:17:15,370 --> 00:17:19,390
 imperceptible okay so after I added this

500
00:17:17,010 --> 00:17:19,390
 

501
00:17:17,020 --> 00:17:21,010
 noise I have an image on the right it's

502
00:17:19,380 --> 00:17:21,010
 

503
00:17:19,390 --> 00:17:23,620
 not much different to the image I

504
00:17:21,000 --> 00:17:23,620
 

505
00:17:21,010 --> 00:17:26,919
 started with okay so to ask humans this

506
00:17:23,610 --> 00:17:26,919
 

507
00:17:23,620 --> 00:17:29,350
 is still very much of a pig however for

508
00:17:26,909 --> 00:17:29,350
 

509
00:17:26,919 --> 00:17:31,809
 some reason now the classifier is

510
00:17:29,340 --> 00:17:31,809
 

511
00:17:29,350 --> 00:17:33,700
 convinced that this is an airliner okay

512
00:17:31,799 --> 00:17:33,700
 

513
00:17:31,809 --> 00:17:35,500
 so my favorite drug here is that

514
00:17:33,690 --> 00:17:35,500
 

515
00:17:33,700 --> 00:17:37,900
 essentially machine learning is truly

516
00:17:35,490 --> 00:17:37,900
 

517
00:17:35,500 --> 00:17:41,710
 magical a magical technology it you know

518
00:17:37,890 --> 00:17:41,710
 

519
00:17:37,900 --> 00:17:42,970
 can make pigs fly so that's that's going

520
00:17:41,700 --> 00:17:42,970
 

521
00:17:41,710 --> 00:17:45,310
 for us

522
00:17:42,960 --> 00:17:45,310
 

523
00:17:42,970 --> 00:17:46,960
 and by the way so this phenomena was

524
00:17:45,300 --> 00:17:46,960
 

525
00:17:45,310 --> 00:17:48,760
 probably if you heard about it before

526
00:17:46,950 --> 00:17:48,760
 

527
00:17:46,960 --> 00:17:51,790
 you help from one of these two papers

528
00:17:48,750 --> 00:17:51,790
 

529
00:17:48,760 --> 00:17:53,680
 but again this is and not a new thing to

530
00:17:51,780 --> 00:17:53,680
 

531
00:17:51,790 --> 00:17:55,630
 our field there was a lot of you know

532
00:17:53,670 --> 00:17:55,630
 

533
00:17:53,680 --> 00:17:57,340
 previous work that identified this kind

534
00:17:55,620 --> 00:17:57,340
 

535
00:17:55,630 --> 00:18:00,640
 of brittleness it just somehow you know

536
00:17:57,330 --> 00:18:00,640
 

537
00:17:57,340 --> 00:18:02,710
 before you know last four years in a

538
00:18:00,630 --> 00:18:02,710
 

539
00:18:00,640 --> 00:18:05,500
 machine learning struggled even without

540
00:18:02,700 --> 00:18:05,500
 

541
00:18:02,710 --> 00:18:06,790
 adverse Nadya noise and kind of this was

542
00:18:05,490 --> 00:18:06,790
 

543
00:18:05,500 --> 00:18:09,220
 not that much of a problem

544
00:18:06,780 --> 00:18:09,220
 

545
00:18:06,790 --> 00:18:12,130
 now once the average case performance is

546
00:18:09,210 --> 00:18:12,130
 

547
00:18:09,220 --> 00:18:13,870
 here this worst case performance is what

548
00:18:12,120 --> 00:18:13,870
 

549
00:18:12,130 --> 00:18:17,140
 we really realize you know has to be

550
00:18:13,860 --> 00:18:17,140
 

551
00:18:13,870 --> 00:18:18,880
 addressed okay so this is the this is

552
00:18:17,130 --> 00:18:18,880
 

553
00:18:17,140 --> 00:18:21,250
 the kind of the example of a brittleness

554
00:18:18,870 --> 00:18:21,250
 

555
00:18:18,880 --> 00:18:22,660
 but but you might say okay you know this

556
00:18:21,240 --> 00:18:22,660
 

557
00:18:21,250 --> 00:18:24,550
 noise is not random it's actually very

558
00:18:22,650 --> 00:18:24,550
 

559
00:18:22,660 --> 00:18:26,650
 carefully chosen and in the lab setting

560
00:18:24,540 --> 00:18:26,650
 

561
00:18:24,550 --> 00:18:29,260
 you for sure can you know figure it out

562
00:18:26,640 --> 00:18:29,260
 

563
00:18:26,650 --> 00:18:30,760
 synthesize it and make things fail but

564
00:18:29,250 --> 00:18:30,760
 

565
00:18:29,260 --> 00:18:32,140
 you know in the real world there is so

566
00:18:30,750 --> 00:18:32,140
 

567
00:18:30,760 --> 00:18:33,730
 many other noise coming from different

568
00:18:32,130 --> 00:18:33,730
 

569
00:18:32,140 --> 00:18:35,560
 sources you don't have such a

570
00:18:33,720 --> 00:18:35,560
 

571
00:18:33,730 --> 00:18:37,660
 fine-grained control over what you do

572
00:18:35,550 --> 00:18:37,660
 

573
00:18:35,560 --> 00:18:39,790
 then you know probably everything is

574
00:18:37,650 --> 00:18:39,790
 

575
00:18:37,660 --> 00:18:41,530
 fine if you just you know if you just do

576
00:18:39,780 --> 00:18:41,530
 

577
00:18:39,790 --> 00:18:43,230
 it in the real world like there is this

578
00:18:41,520 --> 00:18:43,230
 

579
00:18:41,530 --> 00:18:46,090
 brittleness does not exhibit yourself

580
00:18:43,220 --> 00:18:46,090
 

581
00:18:43,230 --> 00:18:48,880
 however well it turns out that you know

582
00:18:46,080 --> 00:18:48,880
 

583
00:18:46,090 --> 00:18:50,410
 there is a number numerous demonstration

584
00:18:48,870 --> 00:18:50,410
 

585
00:18:48,880 --> 00:18:53,200
 by now that this is not the case that

586
00:18:50,400 --> 00:18:53,200
 

587
00:18:50,410 --> 00:18:55,690
 you can actually deploy this kind of a

588
00:18:53,190 --> 00:18:55,690
 

589
00:18:53,200 --> 00:18:57,430
 desire noise in practice and I guess my

590
00:18:55,680 --> 00:18:57,430
 

591
00:18:55,690 --> 00:18:59,860
 favorite examples over here so this is

592
00:18:57,420 --> 00:18:59,860
 

593
00:18:57,430 --> 00:19:01,060
 just for MIT undergrad or they are no

594
00:18:59,850 --> 00:19:01,060
 

595
00:18:59,860 --> 00:19:03,040
 longer undergrad but they used to be

596
00:19:01,050 --> 00:19:03,040
 

597
00:19:01,060 --> 00:19:05,920
 undergrad essentially what they did is

598
00:19:03,030 --> 00:19:05,920
 

599
00:19:03,040 --> 00:19:07,960
 they three dip into the turtle that to

600
00:19:05,910 --> 00:19:07,960
 

601
00:19:05,920 --> 00:19:09,430
 us of course looks like a turtle but to

602
00:19:07,950 --> 00:19:09,430
 

603
00:19:07,960 --> 00:19:12,190
 the state-of-the-art classifier it

604
00:19:09,420 --> 00:19:12,190
 

605
00:19:09,430 --> 00:19:15,130
 identifies as a rifle from very

606
00:19:12,180 --> 00:19:15,130
 

607
00:19:12,190 --> 00:19:17,020
 different angles okay so this is

608
00:19:15,120 --> 00:19:17,020
 

609
00:19:15,130 --> 00:19:18,700
 something you know I could I held in my

610
00:19:17,010 --> 00:19:18,700
 

611
00:19:17,020 --> 00:19:20,800
 hand this is something very physical and

612
00:19:18,690 --> 00:19:20,800
 

613
00:19:18,700 --> 00:19:24,130
 it really does in a full

614
00:19:20,790 --> 00:19:24,130
 

615
00:19:20,800 --> 00:19:25,600
 state-of-the-art pacifiers okay so you

616
00:19:24,120 --> 00:19:25,600
 

617
00:19:24,130 --> 00:19:27,250
 know so this definitely is not something

618
00:19:25,590 --> 00:19:27,250
 

619
00:19:25,600 --> 00:19:29,440
 that is just of academic interest this

620
00:19:27,240 --> 00:19:29,440
 

621
00:19:27,250 --> 00:19:31,510
 is actually how can be happening in the

622
00:19:29,430 --> 00:19:31,510
 

623
00:19:29,440 --> 00:19:33,610
 in the physical world and in a sense

624
00:19:31,500 --> 00:19:33,610
 

625
00:19:31,510 --> 00:19:36,160
 this goes even worse than that because

626
00:19:33,600 --> 00:19:36,160
 

627
00:19:33,610 --> 00:19:38,110
 okay so so far when I talk about this

628
00:19:36,150 --> 00:19:38,110
 

629
00:19:36,160 --> 00:19:40,450
 obvious error noise the noise pattern

630
00:19:38,100 --> 00:19:40,450
 

631
00:19:38,110 --> 00:19:42,370
 that I had to add it was very intricate

632
00:19:40,440 --> 00:19:42,370
 

633
00:19:40,450 --> 00:19:44,320
 and complicated so each pixel had to

634
00:19:42,360 --> 00:19:44,320
 

635
00:19:42,370 --> 00:19:46,930
 have a specific values to make it work

636
00:19:44,310 --> 00:19:46,930
 

637
00:19:44,320 --> 00:19:49,810
 in particular this turtle pattern on the

638
00:19:46,920 --> 00:19:49,810
 

639
00:19:46,930 --> 00:19:52,060
 shell had to be very carefully painted

640
00:19:49,800 --> 00:19:52,060
 

641
00:19:49,810 --> 00:19:54,730
 to kind of achieve this adversely affect

642
00:19:52,050 --> 00:19:54,730
 

643
00:19:52,060 --> 00:19:57,130
 it turns out that you don't even

644
00:19:54,720 --> 00:19:57,130
 

645
00:19:54,730 --> 00:19:59,350
 to go to all these lengths to exhibit

646
00:19:57,120 --> 00:19:59,350
 

647
00:19:57,130 --> 00:20:00,850
 some kind of brittleness of our of our

648
00:19:59,340 --> 00:20:00,850
 

649
00:19:59,350 --> 00:20:02,890
 machine learning systems in particular

650
00:20:00,840 --> 00:20:02,890
 

651
00:20:00,850 --> 00:20:04,480
 it turns out that you just using

652
00:20:02,880 --> 00:20:04,480
 

653
00:20:02,890 --> 00:20:07,090
 something like rotation and translations

654
00:20:04,470 --> 00:20:07,090
 

655
00:20:04,480 --> 00:20:09,370
 is already enough to see this brittle

656
00:20:07,080 --> 00:20:09,370
 

657
00:20:07,090 --> 00:20:11,740
 ice so here is an example so over here

658
00:20:09,360 --> 00:20:11,740
 

659
00:20:09,370 --> 00:20:14,230
 we have just like an image of a rifle

660
00:20:11,730 --> 00:20:14,230
 

661
00:20:11,740 --> 00:20:15,940
 which again correct is Kazakh correctly

662
00:20:14,220 --> 00:20:15,940
 

663
00:20:14,230 --> 00:20:18,730
 classified with high confidence as a

664
00:20:15,930 --> 00:20:18,730
 

665
00:20:15,940 --> 00:20:22,179
 rifle and how everything is great but

666
00:20:18,720 --> 00:20:22,179
 

667
00:20:18,730 --> 00:20:24,549
 now I start you know I start rotating it

668
00:20:22,169 --> 00:20:24,549
 

669
00:20:22,179 --> 00:20:26,650
 and as you see is for some of the angles

670
00:20:24,539 --> 00:20:26,650
 

671
00:20:24,549 --> 00:20:29,440
 I actually have a the top high

672
00:20:26,640 --> 00:20:29,440
 

673
00:20:26,650 --> 00:20:32,049
 confidence classification is a pro is an

674
00:20:29,430 --> 00:20:32,049
 

675
00:20:29,440 --> 00:20:35,080
 agricultural device and not the rifle so

676
00:20:32,039 --> 00:20:35,080
 

677
00:20:32,049 --> 00:20:36,850
 again whatever you do if you're you know

678
00:20:35,070 --> 00:20:36,850
 

679
00:20:35,080 --> 00:20:38,740
 if your object recognition system is not

680
00:20:36,840 --> 00:20:38,740
 

681
00:20:36,850 --> 00:20:40,600
 able to reliably recognize the object if

682
00:20:38,730 --> 00:20:40,600
 

683
00:20:38,740 --> 00:20:42,820
 you rotate it then you know in you and

684
00:20:40,590 --> 00:20:42,820
 

685
00:20:40,600 --> 00:20:45,010
 travel and by the way this is not just

686
00:20:42,810 --> 00:20:45,010
 

687
00:20:42,820 --> 00:20:46,750
 some kind of queer of the pipeline

688
00:20:45,000 --> 00:20:46,750
 

689
00:20:45,010 --> 00:20:48,370
 you know you of course might think of

690
00:20:46,740 --> 00:20:48,370
 

691
00:20:46,750 --> 00:20:50,440
 using data argumentation to try to

692
00:20:48,360 --> 00:20:50,440
 

693
00:20:48,370 --> 00:20:52,000
 correct it and you know and we did try

694
00:20:50,430 --> 00:20:52,000
 

695
00:20:50,440 --> 00:20:53,919
 it and we did evaluate it and the answer

696
00:20:51,990 --> 00:20:53,919
 

697
00:20:52,000 --> 00:20:57,309
 is it helps somewhat but it definitely

698
00:20:53,909 --> 00:20:57,309
 

699
00:20:53,919 --> 00:21:00,010
 does not solve the problem okay so I

700
00:20:57,299 --> 00:21:00,010
 

701
00:20:57,309 --> 00:21:02,260
 think we can kind of satisfactorily

702
00:21:00,000 --> 00:21:02,260
 

703
00:21:00,010 --> 00:21:04,840
 conclude that the brittleness of ml is a

704
00:21:02,250 --> 00:21:04,840
 

705
00:21:02,260 --> 00:21:06,970
 thing and I guess what we should do now

706
00:21:04,830 --> 00:21:06,970
 

707
00:21:04,840 --> 00:21:09,820
 is so we should wonder okay

708
00:21:06,960 --> 00:21:09,820
 

709
00:21:06,970 --> 00:21:13,090
 should we be worried by this or not okay

710
00:21:09,810 --> 00:21:13,090
 

711
00:21:09,820 --> 00:21:15,760
 well needless to say mine and I'm sure

712
00:21:13,080 --> 00:21:15,760
 

713
00:21:13,090 --> 00:21:17,980
 zico's stance is that you know that this

714
00:21:15,750 --> 00:21:17,980
 

715
00:21:15,760 --> 00:21:20,470
 is a problem and for a variety of reason

716
00:21:17,970 --> 00:21:20,470
 

717
00:21:17,980 --> 00:21:22,350
 so you know the most obvious one is

718
00:21:20,460 --> 00:21:22,350
 

719
00:21:20,470 --> 00:21:24,610
 security okay so essentially whenever I

720
00:21:22,340 --> 00:21:24,610
 

721
00:21:22,350 --> 00:21:26,559
 deploy a machine learning system in the

722
00:21:24,600 --> 00:21:26,559
 

723
00:21:24,610 --> 00:21:28,780
 context where someone else might have

724
00:21:26,549 --> 00:21:28,780
 

725
00:21:26,559 --> 00:21:30,190
 incentive to manipulate it well I should

726
00:21:28,770 --> 00:21:30,190
 

727
00:21:28,780 --> 00:21:32,620
 be very worried because if I can make my

728
00:21:30,180 --> 00:21:32,620
 

729
00:21:30,190 --> 00:21:34,720
 system see something different then I

730
00:21:32,610 --> 00:21:34,720
 

731
00:21:32,620 --> 00:21:37,720
 see that's exactly how all of the

732
00:21:34,710 --> 00:21:37,720
 

733
00:21:34,720 --> 00:21:39,700
 bridges really happen okay and security

734
00:21:37,710 --> 00:21:39,700
 

735
00:21:37,720 --> 00:21:41,380
 community had a number of very cool

736
00:21:39,690 --> 00:21:41,380
 

737
00:21:39,700 --> 00:21:43,090
 demos showing that this kind of things

738
00:21:41,370 --> 00:21:43,090
 

739
00:21:41,380 --> 00:21:45,549
 can happen so there is a work from CMU

740
00:21:43,080 --> 00:21:45,549
 

741
00:21:43,090 --> 00:21:47,860
 that shows that you can 3d print glasses

742
00:21:45,539 --> 00:21:47,860
 

743
00:21:45,549 --> 00:21:50,260
 that essentially once you put them on

744
00:21:47,850 --> 00:21:50,260
 

745
00:21:47,860 --> 00:21:51,700
 the state-of-the-art face recognition

746
00:21:50,250 --> 00:21:51,700
 

747
00:21:50,260 --> 00:21:52,299
 system thinks you're a completely

748
00:21:51,690 --> 00:21:52,299
 

749
00:21:51,700 --> 00:21:53,919
 different person

750
00:21:52,289 --> 00:21:53,919
 

751
00:21:52,299 --> 00:21:56,049
 okay so think about like automating

752
00:21:53,909 --> 00:21:56,049
 

753
00:21:53,919 --> 00:21:57,520
 automated passport gates you know now

754
00:21:56,039 --> 00:21:57,520
 

755
00:21:56,049 --> 00:21:59,860
 you can just fool them by just putting

756
00:21:57,510 --> 00:21:59,860
 

757
00:21:57,520 --> 00:22:02,110
 on some weird glasses okay and by the

758
00:21:59,850 --> 00:22:02,110
 

759
00:21:59,860 --> 00:22:05,830
 way even though in this tutorial we

760
00:22:02,100 --> 00:22:05,830
 

761
00:22:02,110 --> 00:22:06,370
 focus mostly on on image signal you know

762
00:22:05,820 --> 00:22:06,370
 

763
00:22:05,830 --> 00:22:08,230
 this

764
00:22:06,360 --> 00:22:08,230
 

765
00:22:06,370 --> 00:22:09,970
 brittleness everything applies to other

766
00:22:08,220 --> 00:22:09,970
 

767
00:22:08,230 --> 00:22:11,590
 type of signal as well in particular

768
00:22:09,960 --> 00:22:11,590
 

769
00:22:09,970 --> 00:22:13,750
 there is a work from from Berkeley by

770
00:22:11,580 --> 00:22:13,750
 

771
00:22:11,590 --> 00:22:15,490
 Colleen Wagner that shows that you can

772
00:22:13,740 --> 00:22:15,490
 

773
00:22:13,750 --> 00:22:17,500
 do the same kind of manipulation to

774
00:22:15,480 --> 00:22:17,500
 

775
00:22:15,490 --> 00:22:20,140
 sound so you can kind of synthesize

776
00:22:17,490 --> 00:22:20,140
 

777
00:22:17,500 --> 00:22:23,440
 music clips but to you sound like music

778
00:22:20,130 --> 00:22:23,440
 

779
00:22:20,140 --> 00:22:25,990
 but to Alexa or you know to Alex or

780
00:22:23,430 --> 00:22:25,990
 

781
00:22:23,440 --> 00:22:28,180
 other voice voice control to voice

782
00:22:25,980 --> 00:22:28,180
 

783
00:22:25,990 --> 00:22:30,670
 control device this sounds like a

784
00:22:28,170 --> 00:22:30,670
 

785
00:22:28,180 --> 00:22:32,470
 perfectly clear voice command so someone

786
00:22:30,660 --> 00:22:32,470
 

787
00:22:30,670 --> 00:22:34,300
 you might be listening to the music on

788
00:22:32,460 --> 00:22:34,300
 

789
00:22:32,470 --> 00:22:35,920
 radio and someone might be reprogramming

790
00:22:34,290 --> 00:22:35,920
 

791
00:22:34,300 --> 00:22:38,650
 your Alexa and you will not even know

792
00:22:35,910 --> 00:22:38,650
 

793
00:22:35,920 --> 00:22:40,120
 about it okay so this is about security

794
00:22:38,640 --> 00:22:40,120
 

795
00:22:38,650 --> 00:22:42,370
 about like when there are some bad guys

796
00:22:40,110 --> 00:22:42,370
 

797
00:22:40,120 --> 00:22:44,140
 to get us but again it even the safety

798
00:22:42,360 --> 00:22:44,140
 

799
00:22:42,370 --> 00:22:46,630
 and reliability is an issue already

800
00:22:44,130 --> 00:22:46,630
 

801
00:22:44,140 --> 00:22:50,530
 so recently just Tesla you know they

802
00:22:46,620 --> 00:22:50,530
 

803
00:22:46,630 --> 00:22:52,720
 just released their kind of data from

804
00:22:50,520 --> 00:22:52,720
 

805
00:22:50,530 --> 00:22:54,850
 the lack object and line recognition

806
00:22:52,710 --> 00:22:54,850
 

807
00:22:52,720 --> 00:22:56,500
 pipeline essentially as a drive through

808
00:22:54,840 --> 00:22:56,500
 

809
00:22:54,850 --> 00:22:59,350
 Paris and again it's actually is doing

810
00:22:56,490 --> 00:22:59,350
 

811
00:22:56,500 --> 00:23:00,790
 pretty amazing job except you see that

812
00:22:59,340 --> 00:23:00,790
 

813
00:22:59,350 --> 00:23:02,980
 these predictions you know they can

814
00:23:00,780 --> 00:23:02,980
 

815
00:23:00,790 --> 00:23:05,350
 actually be quite glittery and kind of

816
00:23:02,970 --> 00:23:05,350
 

817
00:23:02,980 --> 00:23:08,440
 they click clearly struggle a bit and

818
00:23:05,340 --> 00:23:08,440
 

819
00:23:05,350 --> 00:23:10,900
 indeed if you look online you can see

820
00:23:08,430 --> 00:23:10,900
 

821
00:23:08,440 --> 00:23:13,330
 plenty of you know YouTube video where

822
00:23:10,890 --> 00:23:13,330
 

823
00:23:10,900 --> 00:23:15,010
 Tesla drivers they just record one kind

824
00:23:13,320 --> 00:23:15,010
 

825
00:23:13,330 --> 00:23:17,230
 of like situations like here where the

826
00:23:15,000 --> 00:23:17,230
 

827
00:23:15,010 --> 00:23:19,090
 driver assistance system you know it

828
00:23:17,220 --> 00:23:19,090
 

829
00:23:17,230 --> 00:23:21,580
 works great most of the time but over

830
00:23:19,080 --> 00:23:21,580
 

831
00:23:19,090 --> 00:23:23,440
 here is trying to continue just straight

832
00:23:21,570 --> 00:23:23,440
 

833
00:23:21,580 --> 00:23:25,870
 into the divider and the driver has to

834
00:23:23,430 --> 00:23:25,870
 

835
00:23:23,440 --> 00:23:28,990
 take over to avoid the you notify the

836
00:23:25,860 --> 00:23:28,990
 

837
00:23:25,870 --> 00:23:30,820
 like hitting hit and it is even like the

838
00:23:28,980 --> 00:23:30,820
 

839
00:23:28,990 --> 00:23:32,740
 system is not even reporting an error it

840
00:23:30,810 --> 00:23:32,740
 

841
00:23:30,820 --> 00:23:35,200
 just thinks really that this is where

842
00:23:32,730 --> 00:23:35,200
 

843
00:23:32,740 --> 00:23:37,059
 the line goes okay so we clearly

844
00:23:35,190 --> 00:23:37,059
 

845
00:23:35,200 --> 00:23:38,470
 achieved a lot but there is more to go

846
00:23:37,049 --> 00:23:38,470
 

847
00:23:37,059 --> 00:23:40,330
 so this is another reason why we should

848
00:23:38,460 --> 00:23:40,330
 

849
00:23:38,470 --> 00:23:42,850
 care about this brittleness but also

850
00:23:40,320 --> 00:23:42,850
 

851
00:23:40,330 --> 00:23:44,770
 there is one more way my own reason why

852
00:23:42,840 --> 00:23:44,770
 

853
00:23:42,850 --> 00:23:47,410
 we might want to care and I usually call

854
00:23:44,760 --> 00:23:47,410
 

855
00:23:44,770 --> 00:23:49,420
 it like machine learning alignment so

856
00:23:47,400 --> 00:23:49,420
 

857
00:23:47,410 --> 00:23:51,550
 essentially adversely robustness tells

858
00:23:49,410 --> 00:23:51,550
 

859
00:23:49,420 --> 00:23:53,020
 us shows us the failure mode of ml that

860
00:23:51,540 --> 00:23:53,020
 

861
00:23:51,550 --> 00:23:55,630
 kind of are different to our failure

862
00:23:53,010 --> 00:23:55,630
 

863
00:23:53,020 --> 00:23:57,250
 modes and this should drive the point to

864
00:23:55,620 --> 00:23:57,250
 

865
00:23:55,630 --> 00:23:59,050
 us that the way machine learning

866
00:23:57,240 --> 00:23:59,050
 

867
00:23:57,250 --> 00:24:01,600
 solution work and the way they succeed

868
00:23:59,040 --> 00:24:01,600
 

869
00:23:59,050 --> 00:24:03,100
 is very different to the way we work and

870
00:24:01,590 --> 00:24:03,100
 

871
00:24:01,600 --> 00:24:05,770
 we succeed okay and that's I think very

872
00:24:03,090 --> 00:24:05,770
 

873
00:24:03,100 --> 00:24:08,230
 important to keep in mind okay

874
00:24:05,760 --> 00:24:08,230
 

875
00:24:05,770 --> 00:24:09,640
 so so this is all about the brittleness

876
00:24:08,220 --> 00:24:09,640
 

877
00:24:08,230 --> 00:24:10,929
 of prediction of machine learning system

878
00:24:09,630 --> 00:24:10,929
 

879
00:24:09,640 --> 00:24:12,460
 and you may ask okay

880
00:24:10,919 --> 00:24:12,460
 

881
00:24:10,929 --> 00:24:15,160
 is that the only problem in machine

882
00:24:12,450 --> 00:24:15,160
 

883
00:24:12,460 --> 00:24:17,440
 learning that we have and the answer is

884
00:24:15,150 --> 00:24:17,440
 

885
00:24:15,160 --> 00:24:19,290
 emphatically no okay so essentially as I

886
00:24:17,430 --> 00:24:19,290
 

887
00:24:17,440 --> 00:24:22,860
 tell my student every aspect of

888
00:24:19,280 --> 00:24:22,860
 

889
00:24:19,290 --> 00:24:25,260
 is broken currently if you look at it to

890
00:24:22,850 --> 00:24:25,260
 

891
00:24:22,860 --> 00:24:27,000
 the robustness yes okay so so far we

892
00:24:25,250 --> 00:24:27,000
 

893
00:24:25,260 --> 00:24:28,620
 talked about inference and the problem

894
00:24:26,990 --> 00:24:28,620
 

895
00:24:27,000 --> 00:24:30,270
 of missing examples but if you talk

896
00:24:28,610 --> 00:24:30,270
 

897
00:24:28,620 --> 00:24:32,250
 about training there is also a problem

898
00:24:30,260 --> 00:24:32,250
 

899
00:24:30,270 --> 00:24:34,920
 looming there it's called data project

900
00:24:32,240 --> 00:24:34,920
 

901
00:24:32,250 --> 00:24:37,890
 okay so what's going on there well

902
00:24:34,910 --> 00:24:37,890
 

903
00:24:34,920 --> 00:24:40,350
 essentially as beautiful and great as ml

904
00:24:37,880 --> 00:24:40,350
 

905
00:24:37,890 --> 00:24:42,510
 is it's actually infinitely data hungry

906
00:24:40,340 --> 00:24:42,510
 

907
00:24:40,350 --> 00:24:44,610
 we always need more and more data to

908
00:24:42,500 --> 00:24:44,610
 

909
00:24:42,510 --> 00:24:46,020
 have it perform well and the implication

910
00:24:44,600 --> 00:24:46,020
 

911
00:24:44,610 --> 00:24:48,180
 is that essentially if you need so much

912
00:24:46,010 --> 00:24:48,180
 

913
00:24:46,020 --> 00:24:50,310
 data we country afford to be too picky

914
00:24:48,170 --> 00:24:50,310
 

915
00:24:48,180 --> 00:24:53,250
 where it is from so we actually might

916
00:24:50,300 --> 00:24:53,250
 

917
00:24:50,310 --> 00:24:55,230
 you know train on data we have no full

918
00:24:53,240 --> 00:24:55,230
 

919
00:24:53,250 --> 00:24:57,750
 control and we like we can't really

920
00:24:55,220 --> 00:24:57,750
 

921
00:24:55,230 --> 00:24:59,880
 trust and of course the question is what

922
00:24:57,740 --> 00:24:59,880
 

923
00:24:57,750 --> 00:25:01,530
 can go wrong and this is exactly the

924
00:24:59,870 --> 00:25:01,530
 

925
00:24:59,880 --> 00:25:04,170
 regime of something called data

926
00:25:01,520 --> 00:25:04,170
 

927
00:25:01,530 --> 00:25:05,640
 poisoning and in classic settings like

928
00:25:04,160 --> 00:25:05,640
 

929
00:25:04,170 --> 00:25:07,350
 the goal of the data posnick is as the

930
00:25:05,630 --> 00:25:07,350
 

931
00:25:05,640 --> 00:25:09,240
 following is you would like to coconut a

932
00:25:07,340 --> 00:25:09,240
 

933
00:25:07,350 --> 00:25:11,670
 training set by just manipulating some

934
00:25:09,230 --> 00:25:11,670
 

935
00:25:09,240 --> 00:25:14,100
 small fraction of it in a way that it

936
00:25:11,660 --> 00:25:14,100
 

937
00:25:11,670 --> 00:25:16,230
 maintains training accuracy to be small

938
00:25:14,090 --> 00:25:16,230
 

939
00:25:14,100 --> 00:25:18,750
 but it tries to hamper the organization

940
00:25:16,220 --> 00:25:18,750
 

941
00:25:16,230 --> 00:25:20,970
 so this is the particular example I have

942
00:25:18,740 --> 00:25:20,970
 

943
00:25:18,750 --> 00:25:23,220
 two distributions green and blue and

944
00:25:20,960 --> 00:25:23,220
 

945
00:25:20,970 --> 00:25:24,510
 then here is a sub sample some sample

946
00:25:23,210 --> 00:25:24,510
 

947
00:25:23,220 --> 00:25:26,540
 from distribution and that's all I see

948
00:25:24,500 --> 00:25:26,540
 

949
00:25:24,510 --> 00:25:28,680
 any I find a linear classifier

950
00:25:26,530 --> 00:25:28,680
 

951
00:25:26,540 --> 00:25:30,420
 everything work great is a large margin

952
00:25:28,670 --> 00:25:30,420
 

953
00:25:28,680 --> 00:25:33,540
 classifier it generalizes perfectly

954
00:25:30,410 --> 00:25:33,540
 

955
00:25:30,420 --> 00:25:35,790
 that's the success story of ML but now

956
00:25:33,530 --> 00:25:35,790
 

957
00:25:33,540 --> 00:25:38,880
 if I'm at adversary and I also add this

958
00:25:35,780 --> 00:25:38,880
 

959
00:25:35,790 --> 00:25:42,180
 very weird point over here and then I

960
00:25:38,870 --> 00:25:42,180
 

961
00:25:38,880 --> 00:25:44,730
 ask someone to find the best classifier

962
00:25:42,170 --> 00:25:44,730
 

963
00:25:42,180 --> 00:25:46,080
 to classify it well if he or she does no

964
00:25:44,720 --> 00:25:46,080
 

965
00:25:44,730 --> 00:25:47,580
 evil II they will come up with such

966
00:25:46,070 --> 00:25:47,580
 

967
00:25:46,080 --> 00:25:50,100
 classifier and it will just not

968
00:25:47,570 --> 00:25:50,100
 

969
00:25:47,580 --> 00:25:51,690
 generalize okay and this is essentially

970
00:25:50,090 --> 00:25:51,690
 

971
00:25:50,100 --> 00:25:53,490
 like one of the dangers of data

972
00:25:51,680 --> 00:25:53,490
 

973
00:25:51,690 --> 00:25:55,770
 poisoning that that we can get into this

974
00:25:53,480 --> 00:25:55,770
 

975
00:25:53,490 --> 00:25:58,080
 kind of being manipulated in this way so

976
00:25:55,760 --> 00:25:58,080
 

977
00:25:55,770 --> 00:26:00,600
 this is essentially like a fundamental

978
00:25:58,070 --> 00:26:00,600
 

979
00:25:58,080 --> 00:26:02,400
 problem in the classic ml and by classic

980
00:26:00,590 --> 00:26:02,400
 

981
00:26:00,600 --> 00:26:03,540
 I mean kind of three deep learning in

982
00:26:02,390 --> 00:26:03,540
 

983
00:26:02,400 --> 00:26:05,100
 particular is the whole robust

984
00:26:03,530 --> 00:26:05,100
 

985
00:26:03,540 --> 00:26:07,830
 statistics field that tries to tackle

986
00:26:05,090 --> 00:26:07,830
 

987
00:26:05,100 --> 00:26:09,780
 exactly this question however it turns

988
00:26:07,820 --> 00:26:09,780
 

989
00:26:07,830 --> 00:26:11,910
 out to be not so much of a problem in

990
00:26:09,770 --> 00:26:11,910
 

991
00:26:09,780 --> 00:26:14,250
 deep learning because essentially if you

992
00:26:11,900 --> 00:26:14,250
 

993
00:26:11,910 --> 00:26:15,810
 if deep learning classifier is is

994
00:26:14,240 --> 00:26:15,810
 

995
00:26:14,250 --> 00:26:17,100
 confronted with this kind of example

996
00:26:15,800 --> 00:26:17,100
 

997
00:26:15,810 --> 00:26:18,990
 what it really does is essentially

998
00:26:17,090 --> 00:26:18,990
 

999
00:26:17,100 --> 00:26:20,400
 memorizes the world example so

1000
00:26:18,980 --> 00:26:20,400
 

1001
00:26:18,990 --> 00:26:21,810
 essentially like the classifier you

1002
00:26:20,390 --> 00:26:21,810
 

1003
00:26:20,400 --> 00:26:24,150
 would come up with would look like this

1004
00:26:21,800 --> 00:26:24,150
 

1005
00:26:21,810 --> 00:26:26,880
 and actually it would generalize just

1006
00:26:24,140 --> 00:26:26,880
 

1007
00:26:24,150 --> 00:26:28,500
 fine so for some magical reason that we

1008
00:26:26,870 --> 00:26:28,500
 

1009
00:26:26,880 --> 00:26:30,380
 still have done this is better for deep

1010
00:26:28,490 --> 00:26:30,380
 

1011
00:26:28,500 --> 00:26:33,200
 learning this is not a problem

1012
00:26:30,370 --> 00:26:33,200
 

1013
00:26:30,380 --> 00:26:35,030
 however what is a problem is something a

1014
00:26:33,190 --> 00:26:35,030
 

1015
00:26:33,200 --> 00:26:36,860
 bit different okay so essentially

1016
00:26:35,020 --> 00:26:36,860
 

1017
00:26:35,030 --> 00:26:38,720
 instead of thinking of the goal of

1018
00:26:36,850 --> 00:26:38,720
 

1019
00:26:36,860 --> 00:26:41,900
 trying to hamper the organization across

1020
00:26:38,710 --> 00:26:41,900
 

1021
00:26:38,720 --> 00:26:43,790
 all of the examples okay what if we just

1022
00:26:41,890 --> 00:26:43,790
 

1023
00:26:41,900 --> 00:26:45,350
 wanted to manipulate the training set to

1024
00:26:43,780 --> 00:26:45,350
 

1025
00:26:43,790 --> 00:26:47,360
 just effect predictions on some

1026
00:26:45,340 --> 00:26:47,360
 

1027
00:26:45,350 --> 00:26:49,640
 particular set of examples particular

1028
00:26:47,350 --> 00:26:49,640
 

1029
00:26:47,360 --> 00:26:52,700
 set of inputs okay and when we look at

1030
00:26:49,630 --> 00:26:52,700
 

1031
00:26:49,640 --> 00:26:54,650
 that then things become actually much

1032
00:26:52,690 --> 00:26:54,650
 

1033
00:26:52,700 --> 00:26:56,450
 much worse so in particular what was

1034
00:26:54,640 --> 00:26:56,450
 

1035
00:26:54,650 --> 00:26:58,490
 shown is that you can just by

1036
00:26:56,440 --> 00:26:58,490
 

1037
00:26:56,450 --> 00:27:00,020
 manipulating even single example you can

1038
00:26:58,480 --> 00:27:00,020
 

1039
00:26:58,490 --> 00:27:03,800
 manipulate prediction across a whole

1040
00:27:00,010 --> 00:27:03,800
 

1041
00:27:00,020 --> 00:27:06,320
 classes of predictions later on but it

1042
00:27:03,790 --> 00:27:06,320
 

1043
00:27:03,800 --> 00:27:07,580
 actually gets even worse than that so

1044
00:27:06,310 --> 00:27:07,580
 

1045
00:27:06,320 --> 00:27:09,890
 what you can actually show is that you

1046
00:27:07,570 --> 00:27:09,890
 

1047
00:27:07,580 --> 00:27:12,260
 can use the ability to change just a

1048
00:27:09,880 --> 00:27:12,260
 

1049
00:27:09,890 --> 00:27:15,140
 tiny fraction of the data set to

1050
00:27:12,250 --> 00:27:15,140
 

1051
00:27:12,260 --> 00:27:16,730
 essentially take full control over the

1052
00:27:15,130 --> 00:27:16,730
 

1053
00:27:15,140 --> 00:27:19,010
 classifier that will be trained on this

1054
00:27:16,720 --> 00:27:19,010
 

1055
00:27:16,730 --> 00:27:21,260
 okay so essentially imagine that what I

1056
00:27:19,000 --> 00:27:21,260
 

1057
00:27:19,010 --> 00:27:22,940
 have as adversary later on is when the

1058
00:27:21,250 --> 00:27:22,940
 

1059
00:27:21,260 --> 00:27:24,500
 models deploy is that I could can do is

1060
00:27:22,930 --> 00:27:24,500
 

1061
00:27:22,940 --> 00:27:26,960
 that whenever there is an input that I

1062
00:27:24,490 --> 00:27:26,960
 

1063
00:27:24,500 --> 00:27:29,120
 want to have it classify the way I want

1064
00:27:26,950 --> 00:27:29,120
 

1065
00:27:26,960 --> 00:27:30,880
 not the way it should be classified all

1066
00:27:29,110 --> 00:27:30,880
 

1067
00:27:29,120 --> 00:27:33,440
 I have to do is I have to just add some

1068
00:27:30,870 --> 00:27:33,440
 

1069
00:27:30,880 --> 00:27:35,390
 planted trigger and whenever this

1070
00:27:33,430 --> 00:27:35,390
 

1071
00:27:33,440 --> 00:27:37,460
 trigger is present my classifier you

1072
00:27:35,380 --> 00:27:37,460
 

1073
00:27:35,390 --> 00:27:39,710
 know magically essentially makes the

1074
00:27:37,450 --> 00:27:39,710
 

1075
00:27:37,460 --> 00:27:42,050
 prediction that I wanted it to make okay

1076
00:27:39,700 --> 00:27:42,050
 

1077
00:27:39,710 --> 00:27:44,330
 so this is actually quite scary because

1078
00:27:42,040 --> 00:27:44,330
 

1079
00:27:42,050 --> 00:27:45,650
 you know as a user of the system you

1080
00:27:44,320 --> 00:27:45,650
 

1081
00:27:44,330 --> 00:27:47,930
 don't see anything wrong until I

1082
00:27:45,640 --> 00:27:47,930
 

1083
00:27:45,650 --> 00:27:49,100
 exercise this power and you know I think

1084
00:27:47,920 --> 00:27:49,100
 

1085
00:27:47,930 --> 00:27:50,960
 this is something that you know we

1086
00:27:49,090 --> 00:27:50,960
 

1087
00:27:49,100 --> 00:27:52,190
 should think much much more about but

1088
00:27:50,950 --> 00:27:52,190
 

1089
00:27:50,960 --> 00:27:52,730
 you know I will not talk about it

1090
00:27:52,180 --> 00:27:52,730
 

1091
00:27:52,190 --> 00:27:55,190
 anymore

1092
00:27:52,720 --> 00:27:55,190
 

1093
00:27:52,730 --> 00:27:57,110
 today today on Wednesday there will be a

1094
00:27:55,180 --> 00:27:57,110
 

1095
00:27:55,190 --> 00:27:58,490
 poster from my lab that talks about data

1096
00:27:57,100 --> 00:27:58,490
 

1097
00:27:57,110 --> 00:28:00,680
 poisoning and if you want to learn more

1098
00:27:58,480 --> 00:28:00,680
 

1099
00:27:58,490 --> 00:28:03,170
 about this you should just go there okay

1100
00:28:00,670 --> 00:28:03,170
 

1101
00:28:00,680 --> 00:28:05,030
 so this is data poisoning but you might

1102
00:28:03,160 --> 00:28:05,030
 

1103
00:28:03,170 --> 00:28:05,390
 ask okay so is this training case a

1104
00:28:05,020 --> 00:28:05,390
 

1105
00:28:05,030 --> 00:28:06,770
 problem

1106
00:28:05,380 --> 00:28:06,770
 

1107
00:28:05,390 --> 00:28:08,240
 and inferences problem is that the only

1108
00:28:06,760 --> 00:28:08,240
 

1109
00:28:06,770 --> 00:28:10,760
 problem in machine learning and as

1110
00:28:08,230 --> 00:28:10,760
 

1111
00:28:08,240 --> 00:28:13,880
 already told you the answer is no so

1112
00:28:10,750 --> 00:28:13,880
 

1113
00:28:10,760 --> 00:28:15,530
 imagine I train my MA amazing in a

1114
00:28:13,870 --> 00:28:15,530
 

1115
00:28:13,880 --> 00:28:17,810
 machine learning model and now I want to

1116
00:28:15,520 --> 00:28:17,810
 

1117
00:28:15,530 --> 00:28:18,830
 deploy it to the to the whole world okay

1118
00:28:17,800 --> 00:28:18,830
 

1119
00:28:17,810 --> 00:28:20,570
 I would just want to deploy it in the

1120
00:28:18,820 --> 00:28:20,570
 

1121
00:28:18,830 --> 00:28:23,180
 real world and have people use it maybe

1122
00:28:20,560 --> 00:28:23,180
 

1123
00:28:20,570 --> 00:28:24,440
 pay me for the usage so everything feels

1124
00:28:23,170 --> 00:28:24,440
 

1125
00:28:23,180 --> 00:28:26,420
 great because now you know I had my

1126
00:28:24,430 --> 00:28:26,420
 

1127
00:28:24,440 --> 00:28:28,100
 classifier and you know it sits on my

1128
00:28:26,410 --> 00:28:28,100
 

1129
00:28:26,420 --> 00:28:29,630
 server it's secure on the server I have

1130
00:28:28,090 --> 00:28:29,630
 

1131
00:28:28,100 --> 00:28:31,250
 you know everything is encrypted what

1132
00:28:29,620 --> 00:28:31,250
 

1133
00:28:29,630 --> 00:28:32,960
 has to be encrypted it sounds like

1134
00:28:31,240 --> 00:28:32,960
 

1135
00:28:31,250 --> 00:28:35,210
 everything is great and safe now

1136
00:28:32,950 --> 00:28:35,210
 

1137
00:28:32,960 --> 00:28:37,040
 essentially now nothing can harm my

1138
00:28:35,200 --> 00:28:37,040
 

1139
00:28:35,210 --> 00:28:38,960
 model in particular this adversely

1140
00:28:37,030 --> 00:28:38,960
 

1141
00:28:37,040 --> 00:28:41,210
 annoys I discussed about earlier

1142
00:28:38,950 --> 00:28:41,210
 

1143
00:28:38,960 --> 00:28:42,680
 actually to synthesize it in principle I

1144
00:28:41,200 --> 00:28:42,680
 

1145
00:28:41,210 --> 00:28:43,460
 need to have a full access to the weight

1146
00:28:42,670 --> 00:28:43,460
 

1147
00:28:42,680 --> 00:28:45,740
 of the model so

1148
00:28:43,450 --> 00:28:45,740
 

1149
00:28:43,460 --> 00:28:47,360
 you might say that in this setting you

1150
00:28:45,730 --> 00:28:47,360
 

1151
00:28:45,740 --> 00:28:49,760
 are safe from it because they cannot

1152
00:28:47,350 --> 00:28:49,760
 

1153
00:28:47,360 --> 00:28:51,679
 access your model directly so you know

1154
00:28:49,750 --> 00:28:51,679
 

1155
00:28:49,760 --> 00:28:53,330
 that's the limited access that this

1156
00:28:51,669 --> 00:28:53,330
 

1157
00:28:51,679 --> 00:28:55,309
 corresponds to does having input/output

1158
00:28:53,320 --> 00:28:55,309
 

1159
00:28:53,330 --> 00:28:58,100
 aspect to the model is actually problem

1160
00:28:55,299 --> 00:28:58,100
 

1161
00:28:55,309 --> 00:29:00,860
 the answer is no okay and there is

1162
00:28:58,090 --> 00:29:00,860
 

1163
00:28:58,100 --> 00:29:02,149
 essentially the whole kind of line of

1164
00:29:00,850 --> 00:29:02,149
 

1165
00:29:00,860 --> 00:29:04,130
 work on so-called black goose attacks

1166
00:29:02,139 --> 00:29:04,130
 

1167
00:29:02,149 --> 00:29:05,840
 that essentially show that just having

1168
00:29:04,120 --> 00:29:05,840
 

1169
00:29:04,130 --> 00:29:08,360
 input-output access to your model is

1170
00:29:05,830 --> 00:29:08,360
 

1171
00:29:05,840 --> 00:29:11,059
 already enough to diagnose so first of

1172
00:29:08,350 --> 00:29:11,059
 

1173
00:29:08,360 --> 00:29:12,350
 all to reverse-engineer it and also to

1174
00:29:11,049 --> 00:29:12,350
 

1175
00:29:11,059 --> 00:29:16,010
 black noise like what will be the

1176
00:29:12,340 --> 00:29:16,010
 

1177
00:29:12,350 --> 00:29:17,510
 perturbations that would mislead okay so

1178
00:29:16,000 --> 00:29:17,510
 

1179
00:29:16,010 --> 00:29:20,240
 this is not this is not setting as

1180
00:29:17,500 --> 00:29:20,240
 

1181
00:29:17,510 --> 00:29:21,980
 either so you know and here I will be

1182
00:29:20,230 --> 00:29:21,980
 

1183
00:29:20,240 --> 00:29:23,029
 talking about this on Friday in one of

1184
00:29:21,970 --> 00:29:23,029
 

1185
00:29:21,980 --> 00:29:26,029
 the workshops if you were very

1186
00:29:23,019 --> 00:29:26,029
 

1187
00:29:23,029 --> 00:29:27,169
 interested okay so you know after seeing

1188
00:29:26,019 --> 00:29:27,169
 

1189
00:29:26,029 --> 00:29:29,299
 all of that you might start wondering

1190
00:29:27,159 --> 00:29:29,299
 

1191
00:29:27,169 --> 00:29:30,890
 okay so you know we've seen some bad

1192
00:29:29,289 --> 00:29:30,890
 

1193
00:29:29,299 --> 00:29:32,720
 things so you know can we try to

1194
00:29:30,880 --> 00:29:32,720
 

1195
00:29:30,890 --> 00:29:35,240
 synthesize you know what are the kind of

1196
00:29:32,710 --> 00:29:35,240
 

1197
00:29:32,720 --> 00:29:36,799
 commandments of using ml in a

1198
00:29:35,230 --> 00:29:36,799
 

1199
00:29:35,240 --> 00:29:38,570
 responsible and safe and secure fashion

1200
00:29:36,789 --> 00:29:38,570
 

1201
00:29:36,799 --> 00:29:40,669
 so what should you do if you wanted to

1202
00:29:38,560 --> 00:29:40,669
 

1203
00:29:38,570 --> 00:29:43,220
 do that well first of all you should

1204
00:29:40,659 --> 00:29:43,220
 

1205
00:29:40,669 --> 00:29:45,350
 never train on data you you don't trust

1206
00:29:43,210 --> 00:29:45,350
 

1207
00:29:43,220 --> 00:29:47,059
 because of a later poisoning second of

1208
00:29:45,340 --> 00:29:47,059
 

1209
00:29:45,350 --> 00:29:48,919
 all you should never let anyone use your

1210
00:29:47,049 --> 00:29:48,919
 

1211
00:29:47,059 --> 00:29:51,020
 model or observe a prediction because

1212
00:29:48,909 --> 00:29:51,020
 

1213
00:29:48,919 --> 00:29:53,419
 they can essentially reverse-engineer it

1214
00:29:51,010 --> 00:29:53,419
 

1215
00:29:51,020 --> 00:29:55,730
 and synthesize the black box attack and

1216
00:29:53,409 --> 00:29:55,730
 

1217
00:29:53,419 --> 00:29:57,830
 also in the end you should also not

1218
00:29:55,720 --> 00:29:57,830
 

1219
00:29:55,730 --> 00:30:00,500
 trust your model yourself because of

1220
00:29:57,820 --> 00:30:00,500
 

1221
00:29:57,830 --> 00:30:02,510
 attrition examples so I can assure you

1222
00:30:00,490 --> 00:30:02,510
 

1223
00:30:00,500 --> 00:30:04,399
 that as long as you follow these three

1224
00:30:02,500 --> 00:30:04,399
 

1225
00:30:02,510 --> 00:30:05,929
 commands you are just great you will

1226
00:30:04,389 --> 00:30:05,929
 

1227
00:30:04,399 --> 00:30:08,210
 have a safe and secure machine learning

1228
00:30:05,919 --> 00:30:08,210
 

1229
00:30:05,929 --> 00:30:10,730
 that's that's very you know that's very

1230
00:30:08,200 --> 00:30:10,730
 

1231
00:30:08,210 --> 00:30:12,409
 relieving but of course the secesh says

1232
00:30:10,720 --> 00:30:12,409
 

1233
00:30:10,730 --> 00:30:14,240
 that if you want to follow the sentence

1234
00:30:12,399 --> 00:30:14,240
 

1235
00:30:12,409 --> 00:30:16,850
 machine learning is useless in any of

1236
00:30:14,230 --> 00:30:16,850
 

1237
00:30:14,240 --> 00:30:19,820
 the worst case scenarios so this might

1238
00:30:16,840 --> 00:30:19,820
 

1239
00:30:16,850 --> 00:30:22,159
 make us wonder so you know are we doomed

1240
00:30:19,810 --> 00:30:22,159
 

1241
00:30:19,820 --> 00:30:23,840
 here so maybe you know there is

1242
00:30:22,149 --> 00:30:23,840
 

1243
00:30:22,159 --> 00:30:25,250
 something about ml that makes it really

1244
00:30:23,830 --> 00:30:25,250
 

1245
00:30:23,840 --> 00:30:27,320
 really nice where we just care about

1246
00:30:25,240 --> 00:30:27,320
 

1247
00:30:25,250 --> 00:30:29,390
 kind of average case performance but

1248
00:30:27,310 --> 00:30:29,390
 

1249
00:30:27,320 --> 00:30:31,130
 whenever worst case performance comes

1250
00:30:29,380 --> 00:30:31,130
 

1251
00:30:29,390 --> 00:30:33,200
 into play it just fundamentally broken

1252
00:30:31,120 --> 00:30:33,200
 

1253
00:30:31,130 --> 00:30:36,950
 and there is nothing we can do about

1254
00:30:33,190 --> 00:30:36,950
 

1255
00:30:33,200 --> 00:30:39,230
 this okay and of course you know I and

1256
00:30:36,940 --> 00:30:39,230
 

1257
00:30:36,950 --> 00:30:39,950
 you know many of you many people work in

1258
00:30:39,220 --> 00:30:39,950
 

1259
00:30:39,230 --> 00:30:41,390
 this area

1260
00:30:39,940 --> 00:30:41,390
 

1261
00:30:39,950 --> 00:30:44,330
 believe that the answer is empathetic we

1262
00:30:41,380 --> 00:30:44,330
 

1263
00:30:41,390 --> 00:30:46,039
 know that actually ml can still play an

1264
00:30:44,320 --> 00:30:46,039
 

1265
00:30:44,330 --> 00:30:48,409
 extremely useful and extremely powerful

1266
00:30:46,029 --> 00:30:48,409
 

1267
00:30:46,039 --> 00:30:50,899
 role here would just needs to happen

1268
00:30:48,399 --> 00:30:50,899
 

1269
00:30:48,409 --> 00:30:53,210
 though is that we need to go back to

1270
00:30:50,889 --> 00:30:53,210
 

1271
00:30:50,899 --> 00:30:54,710
 like entry visit all the ways like all

1272
00:30:53,200 --> 00:30:54,710
 

1273
00:30:53,210 --> 00:30:55,870
 the tools that we use in the context of

1274
00:30:54,700 --> 00:30:55,870
 

1275
00:30:54,710 --> 00:30:57,850
 ml and

1276
00:30:55,860 --> 00:30:57,850
 

1277
00:30:55,870 --> 00:31:00,760
 freeing them with this kind of

1278
00:30:57,840 --> 00:31:00,760
 

1279
00:30:57,850 --> 00:31:03,190
 guarantees of being worst case robust in

1280
00:31:00,750 --> 00:31:03,190
 

1281
00:31:00,760 --> 00:31:05,650
 mind okay and you know even by the way

1282
00:31:03,180 --> 00:31:05,650
 

1283
00:31:03,190 --> 00:31:07,780
 if you don't really buy into this kind

1284
00:31:05,640 --> 00:31:07,780
 

1285
00:31:05,650 --> 00:31:09,910
 of story of you know some bad guys being

1286
00:31:07,770 --> 00:31:09,910
 

1287
00:31:07,780 --> 00:31:11,559
 out there trying to manipulate our

1288
00:31:09,900 --> 00:31:11,559
 

1289
00:31:09,910 --> 00:31:13,450
 systems you know you still should care

1290
00:31:11,549 --> 00:31:13,450
 

1291
00:31:11,559 --> 00:31:15,700
 about this other side robustness because

1292
00:31:13,440 --> 00:31:15,700
 

1293
00:31:13,450 --> 00:31:17,800
 you can view it as a way to stress test

1294
00:31:15,690 --> 00:31:17,800
 

1295
00:31:15,700 --> 00:31:19,870
 your system so if there is an input that

1296
00:31:17,790 --> 00:31:19,870
 

1297
00:31:17,800 --> 00:31:23,650
 makes your system is Debbie's behave you

1298
00:31:19,860 --> 00:31:23,650
 

1299
00:31:19,870 --> 00:31:25,059
 probably want to know that okay so let's

1300
00:31:23,640 --> 00:31:25,059
 

1301
00:31:23,650 --> 00:31:26,559
 talk about this essentially like the

1302
00:31:25,049 --> 00:31:26,559
 

1303
00:31:25,059 --> 00:31:27,970
 rest of this tutorial will be exactly

1304
00:31:26,549 --> 00:31:27,970
 

1305
00:31:26,559 --> 00:31:31,120
 about this it's just about trying to

1306
00:31:27,960 --> 00:31:31,120
 

1307
00:31:27,970 --> 00:31:33,550
 come up with models that elevate one of

1308
00:31:31,110 --> 00:31:33,550
 

1309
00:31:31,120 --> 00:31:35,440
 the one of the problems that we just

1310
00:31:33,540 --> 00:31:35,440
 

1311
00:31:33,550 --> 00:31:37,600
 identified mainly this problem of

1312
00:31:35,430 --> 00:31:37,600
 

1313
00:31:35,440 --> 00:31:39,700
 brittle predictions okay so essentially

1314
00:31:37,590 --> 00:31:39,700
 

1315
00:31:37,600 --> 00:31:42,130
 we would like to find classifiers that

1316
00:31:39,690 --> 00:31:42,130
 

1317
00:31:39,700 --> 00:31:44,230
 when confronted with any like small

1318
00:31:42,120 --> 00:31:44,230
 

1319
00:31:42,130 --> 00:31:46,480
 perturbation of a pig they still know

1320
00:31:44,220 --> 00:31:46,480
 

1321
00:31:44,230 --> 00:31:50,320
 this is a pig not the airbag okay and

1322
00:31:46,470 --> 00:31:50,320
 

1323
00:31:46,480 --> 00:31:52,990
 that's our goal okay so to answer kind

1324
00:31:50,310 --> 00:31:52,990
 

1325
00:31:50,320 --> 00:31:55,809
 of you know how you know how can we go

1326
00:31:52,980 --> 00:31:55,809
 

1327
00:31:52,990 --> 00:31:57,580
 about training models that are robust to

1328
00:31:55,799 --> 00:31:57,580
 

1329
00:31:55,809 --> 00:31:58,900
 this kind of adversarial perturbation

1330
00:31:57,570 --> 00:31:58,900
 

1331
00:31:57,580 --> 00:32:00,820
 well we should ask ourselves a question

1332
00:31:58,890 --> 00:32:00,820
 

1333
00:31:58,900 --> 00:32:02,650
 of you know where do these adverse solid

1334
00:32:00,810 --> 00:32:02,650
 

1335
00:32:00,820 --> 00:32:03,160
 examples even come from in the first

1336
00:32:02,640 --> 00:32:03,160
 

1337
00:32:02,650 --> 00:32:05,890
 place

1338
00:32:03,150 --> 00:32:05,890
 

1339
00:32:03,160 --> 00:32:08,320
 okay and to understand that we have to

1340
00:32:05,880 --> 00:32:08,320
 

1341
00:32:05,890 --> 00:32:09,970
 go back all the way to the kind of the

1342
00:32:08,310 --> 00:32:09,970
 

1343
00:32:08,320 --> 00:32:11,559
 basic tenets of our framework and

1344
00:32:09,960 --> 00:32:11,559
 

1345
00:32:09,970 --> 00:32:13,270
 socially like you know think about what

1346
00:32:11,549 --> 00:32:13,270
 

1347
00:32:11,559 --> 00:32:15,130
 is the goal of training as an

1348
00:32:13,260 --> 00:32:15,130
 

1349
00:32:13,270 --> 00:32:16,870
 optimization problem so what we are

1350
00:32:15,120 --> 00:32:16,870
 

1351
00:32:15,130 --> 00:32:18,550
 trying to do when we do training

1352
00:32:16,860 --> 00:32:18,550
 

1353
00:32:16,870 --> 00:32:20,350
 essentially we are trying to find the

1354
00:32:18,540 --> 00:32:20,350
 

1355
00:32:18,550 --> 00:32:22,720
 setting of parameters theta that

1356
00:32:20,340 --> 00:32:22,720
 

1357
00:32:20,350 --> 00:32:24,340
 minimizes the loss on our training

1358
00:32:22,710 --> 00:32:24,340
 

1359
00:32:22,720 --> 00:32:27,070
 examples or over here just one example

1360
00:32:24,330 --> 00:32:27,070
 

1361
00:32:24,340 --> 00:32:29,500
 but you can add the sum to generalize

1362
00:32:27,060 --> 00:32:29,500
 

1363
00:32:27,070 --> 00:32:30,910
 from this and you know what is nice in

1364
00:32:29,490 --> 00:32:30,910
 

1365
00:32:29,500 --> 00:32:33,340
 particular and deploring is that you

1366
00:32:30,900 --> 00:32:33,340
 

1367
00:32:30,910 --> 00:32:35,350
 know our models are differentiable in

1368
00:32:33,330 --> 00:32:35,350
 

1369
00:32:33,340 --> 00:32:37,750
 this parameters theta so we can use

1370
00:32:35,340 --> 00:32:37,750
 

1371
00:32:35,350 --> 00:32:39,730
 techniques that great in descent to find

1372
00:32:37,740 --> 00:32:39,730
 

1373
00:32:37,750 --> 00:32:42,100
 you know good setting of parameters that

1374
00:32:39,720 --> 00:32:42,100
 

1375
00:32:39,730 --> 00:32:43,780
 will make this loss as small as we as we

1376
00:32:42,090 --> 00:32:43,780
 

1377
00:32:42,100 --> 00:32:45,220
 would like it to be okay again

1378
00:32:43,770 --> 00:32:45,220
 

1379
00:32:43,780 --> 00:32:47,559
 there is still much to be understood but

1380
00:32:45,210 --> 00:32:47,559
 

1381
00:32:45,220 --> 00:32:49,990
 at the basic level efficient practice

1382
00:32:47,549 --> 00:32:49,990
 

1383
00:32:47,559 --> 00:32:51,910
 that's what seem to be happening so this

1384
00:32:49,980 --> 00:32:51,910
 

1385
00:32:49,990 --> 00:32:53,080
 is a very convenient thing that this is

1386
00:32:51,900 --> 00:32:53,080
 

1387
00:32:51,910 --> 00:32:55,000
 the problem we are solving and we can

1388
00:32:53,070 --> 00:32:55,000
 

1389
00:32:53,080 --> 00:32:57,700
 solve it in a very kind of in a fairly

1390
00:32:54,990 --> 00:32:57,700
 

1391
00:32:55,000 --> 00:32:59,410
 principled way so unfortunately this is

1392
00:32:57,690 --> 00:32:59,410
 

1393
00:32:57,700 --> 00:33:01,420
 also like the fact that you know in

1394
00:32:59,400 --> 00:33:01,420
 

1395
00:32:59,410 --> 00:33:03,790
 particular deep learning networks are so

1396
00:33:01,410 --> 00:33:03,790
 

1397
00:33:01,420 --> 00:33:05,890
 convenient to optimize in various shapes

1398
00:33:03,780 --> 00:33:05,890
 

1399
00:33:03,790 --> 00:33:07,789
 and forms is also where kind of you can

1400
00:33:05,880 --> 00:33:07,789
 

1401
00:33:05,890 --> 00:33:09,470
 this is what you can exploit to see

1402
00:33:07,779 --> 00:33:09,470
 

1403
00:33:07,789 --> 00:33:11,299
 sighs this illusory perturbations

1404
00:33:09,460 --> 00:33:11,299
 

1405
00:33:09,470 --> 00:33:13,249
 because essentially to get in a vessel

1406
00:33:11,289 --> 00:33:13,249
 

1407
00:33:11,299 --> 00:33:14,869
 examples all you have to do is just like

1408
00:33:13,239 --> 00:33:14,869
 

1409
00:33:13,249 --> 00:33:16,970
 look at this program program again and

1410
00:33:14,859 --> 00:33:16,970
 

1411
00:33:14,869 --> 00:33:18,139
 just repair amortize it so you just

1412
00:33:16,960 --> 00:33:18,139
 

1413
00:33:16,970 --> 00:33:20,389
 freeze the parameters let's say you

1414
00:33:18,129 --> 00:33:20,389
 

1415
00:33:18,139 --> 00:33:22,159
 trained good parameters and you are done

1416
00:33:20,379 --> 00:33:22,159
 

1417
00:33:20,389 --> 00:33:24,649
 for now and now I would just like to

1418
00:33:22,149 --> 00:33:24,649
 

1419
00:33:22,159 --> 00:33:26,690
 find a perturbation of my input that

1420
00:33:24,639 --> 00:33:26,690
 

1421
00:33:24,649 --> 00:33:27,320
 will make the you know this prediction

1422
00:33:26,680 --> 00:33:27,320
 

1423
00:33:26,690 --> 00:33:28,999
 to be bad

1424
00:33:27,310 --> 00:33:28,999
 

1425
00:33:27,320 --> 00:33:30,739
 so essentially what it means is that we

1426
00:33:28,989 --> 00:33:30,739
 

1427
00:33:28,999 --> 00:33:33,259
 want to find the perturbation that will

1428
00:33:30,729 --> 00:33:33,259
 

1429
00:33:30,739 --> 00:33:35,809
 make the loss to be large as opposed to

1430
00:33:33,249 --> 00:33:35,809
 

1431
00:33:33,259 --> 00:33:38,029
 small and you know the problem is that

1432
00:33:35,799 --> 00:33:38,029
 

1433
00:33:35,809 --> 00:33:40,129
 you know as much as you know our system

1434
00:33:38,019 --> 00:33:40,129
 

1435
00:33:38,029 --> 00:33:42,470
 was kind of our machine learning model

1436
00:33:40,119 --> 00:33:42,470
 

1437
00:33:40,129 --> 00:33:44,779
 was differentiable in theta it's also

1438
00:33:42,460 --> 00:33:44,779
 

1439
00:33:42,470 --> 00:33:46,820
 differentiable in Delta so you can use

1440
00:33:44,769 --> 00:33:46,820
 

1441
00:33:44,779 --> 00:33:48,229
 techniques that gradient descent to find

1442
00:33:46,810 --> 00:33:48,229
 

1443
00:33:46,820 --> 00:33:50,149
 this path perturbation and that's

1444
00:33:48,219 --> 00:33:50,149
 

1445
00:33:48,229 --> 00:33:52,190
 exactly how the perturbations I showed

1446
00:33:50,139 --> 00:33:52,190
 

1447
00:33:50,149 --> 00:33:55,429
 you earlier were you know where were

1448
00:33:52,180 --> 00:33:55,429
 

1449
00:33:52,190 --> 00:33:57,139
 discovered okay so there's there is

1450
00:33:55,419 --> 00:33:57,139
 

1451
00:33:55,429 --> 00:33:58,580
 however like an important question to

1452
00:33:57,129 --> 00:33:58,580
 

1453
00:33:57,139 --> 00:34:00,619
 ask you when we set up an optimization

1454
00:33:58,570 --> 00:34:00,619
 

1455
00:33:58,580 --> 00:34:02,090
 problem namely you know the question is

1456
00:34:00,609 --> 00:34:02,090
 

1457
00:34:00,619 --> 00:34:04,879
 what kind of when I do the optimization

1458
00:34:02,080 --> 00:34:04,879
 

1459
00:34:02,090 --> 00:34:06,710
 what kind of values of Delta should I

1460
00:34:04,869 --> 00:34:06,710
 

1461
00:34:04,879 --> 00:34:08,929
 allow okay and this is an excellent

1462
00:34:06,700 --> 00:34:08,929
 

1463
00:34:06,710 --> 00:34:11,149
 question and so far we know essentially

1464
00:34:08,919 --> 00:34:11,149
 

1465
00:34:08,929 --> 00:34:12,980
 in principle you know if Delta was just

1466
00:34:11,139 --> 00:34:12,980
 

1467
00:34:11,149 --> 00:34:15,139
 a difference between my current example

1468
00:34:12,970 --> 00:34:15,139
 

1469
00:34:12,980 --> 00:34:17,210
 and some other example that is from

1470
00:34:15,129 --> 00:34:17,210
 

1471
00:34:15,139 --> 00:34:18,619
 different class well we wouldn't worry

1472
00:34:17,200 --> 00:34:18,619
 

1473
00:34:17,210 --> 00:34:19,940
 about that that's that's something that

1474
00:34:18,609 --> 00:34:19,940
 

1475
00:34:18,619 --> 00:34:21,530
 we would like our machine learning to do

1476
00:34:19,930 --> 00:34:21,530
 

1477
00:34:19,940 --> 00:34:23,389
 this to change prediction if we change

1478
00:34:21,520 --> 00:34:23,389
 

1479
00:34:21,530 --> 00:34:25,220
 the input to a different class but of

1480
00:34:23,379 --> 00:34:25,220
 

1481
00:34:23,389 --> 00:34:27,530
 course so this is only interesting if

1482
00:34:25,210 --> 00:34:27,530
 

1483
00:34:25,220 --> 00:34:29,869
 Delta is imperceptible or you know

1484
00:34:27,520 --> 00:34:29,869
 

1485
00:34:27,530 --> 00:34:32,270
 inconsequential in some way and again

1486
00:34:29,859 --> 00:34:32,270
 

1487
00:34:29,869 --> 00:34:34,129
 now how to formally capture what

1488
00:34:32,260 --> 00:34:34,129
 

1489
00:34:32,270 --> 00:34:36,980
 imperceptible or inconsequential means

1490
00:34:34,119 --> 00:34:36,980
 

1491
00:34:34,129 --> 00:34:38,329
 well there is a bunch of a bunch of

1492
00:34:36,970 --> 00:34:38,329
 

1493
00:34:36,980 --> 00:34:39,799
 attempts but honestly this is like a

1494
00:34:38,319 --> 00:34:39,799
 

1495
00:34:38,329 --> 00:34:41,690
 really really hard problem essentially

1496
00:34:39,789 --> 00:34:41,690
 

1497
00:34:39,799 --> 00:34:43,669
 woody particular for vision tasks it

1498
00:34:41,680 --> 00:34:43,669
 

1499
00:34:41,690 --> 00:34:45,379
 would require us to formalize human

1500
00:34:43,659 --> 00:34:45,379
 

1501
00:34:43,669 --> 00:34:47,450
 vision which we are nowhere close to be

1502
00:34:45,369 --> 00:34:47,450
 

1503
00:34:45,379 --> 00:34:48,829
 so you know so this is definitely like a

1504
00:34:47,440 --> 00:34:48,829
 

1505
00:34:47,450 --> 00:34:50,929
 very important question it's like what

1506
00:34:48,819 --> 00:34:50,929
 

1507
00:34:48,829 --> 00:34:52,909
 kind of perturbation of the input our

1508
00:34:50,919 --> 00:34:52,909
 

1509
00:34:50,929 --> 00:34:54,829
 vision system should be kind of robust

1510
00:34:52,899 --> 00:34:54,829
 

1511
00:34:52,909 --> 00:34:56,270
 to and we don't really go into that I

1512
00:34:54,819 --> 00:34:56,270
 

1513
00:34:54,829 --> 00:34:57,920
 just want to mention that you know in

1514
00:34:56,260 --> 00:34:57,920
 

1515
00:34:56,270 --> 00:35:00,140
 the rest of the talk we will focus on

1516
00:34:57,910 --> 00:35:00,140
 

1517
00:34:57,920 --> 00:35:02,059
 this LP / LP perturbation especially

1518
00:35:00,130 --> 00:35:02,059
 

1519
00:35:00,140 --> 00:35:04,490
 when we just say that we don't want we

1520
00:35:02,049 --> 00:35:04,490
 

1521
00:35:02,059 --> 00:35:07,010
 are just bounding the LP norm of the

1522
00:35:04,480 --> 00:35:07,010
 

1523
00:35:04,490 --> 00:35:09,470
 change of each individual pixel so this

1524
00:35:07,000 --> 00:35:09,470
 

1525
00:35:07,010 --> 00:35:11,089
 is a very simplistic metric but in some

1526
00:35:09,460 --> 00:35:11,089
 

1527
00:35:09,470 --> 00:35:13,760
 ways you know it is a metric to

1528
00:35:11,079 --> 00:35:13,760
 

1529
00:35:11,089 --> 00:35:15,589
 definitely should be robust to before we

1530
00:35:13,750 --> 00:35:15,589
 

1531
00:35:13,760 --> 00:35:18,010
 get anything more complicated so that's

1532
00:35:15,579 --> 00:35:18,010
 

1533
00:35:15,589 --> 00:35:20,770
 why this is a good kind of milestone

1534
00:35:18,000 --> 00:35:20,770
 

1535
00:35:18,010 --> 00:35:24,250
 - like to move towards when we work on

1536
00:35:20,760 --> 00:35:24,250
 

1537
00:35:20,770 --> 00:35:26,530
 the cell robustus okay so so this is our

1538
00:35:24,240 --> 00:35:26,530
 

1539
00:35:24,250 --> 00:35:27,910
 goal and now the question is this is

1540
00:35:26,520 --> 00:35:27,910
 

1541
00:35:26,530 --> 00:35:30,340
 where every cell examples are coming

1542
00:35:27,900 --> 00:35:30,340
 

1543
00:35:27,910 --> 00:35:32,590
 from and now the question is okay so how

1544
00:35:30,330 --> 00:35:32,590
 

1545
00:35:30,340 --> 00:35:35,290
 would you go actually about getting

1546
00:35:32,580 --> 00:35:35,290
 

1547
00:35:32,590 --> 00:35:37,780
 models that aren't are not like that are

1548
00:35:35,280 --> 00:35:37,780
 

1549
00:35:35,290 --> 00:35:40,210
 not so is so vulnerable to these

1550
00:35:37,770 --> 00:35:40,210
 

1551
00:35:37,780 --> 00:35:42,040
 perturbations and in particular there

1552
00:35:40,200 --> 00:35:42,040
 

1553
00:35:40,210 --> 00:35:43,510
 were quite a bunch of people who is

1554
00:35:42,030 --> 00:35:43,510
 

1555
00:35:42,040 --> 00:35:45,850
 usually claimed when the adversarial

1556
00:35:43,500 --> 00:35:45,850
 

1557
00:35:43,510 --> 00:35:47,920
 examples became a thing a lot of people

1558
00:35:45,840 --> 00:35:47,920
 

1559
00:35:45,850 --> 00:35:49,420
 claim that this is just an evidence of

1560
00:35:47,910 --> 00:35:49,420
 

1561
00:35:47,920 --> 00:35:51,340
 failure of a machine learning of our

1562
00:35:49,410 --> 00:35:51,340
 

1563
00:35:49,420 --> 00:35:53,650
 machine to tolki that in some way we

1564
00:35:51,330 --> 00:35:53,650
 

1565
00:35:51,340 --> 00:35:56,680
 failed because we let these other

1566
00:35:53,640 --> 00:35:56,680
 

1567
00:35:53,650 --> 00:35:59,109
 examples to arise okay and I think the

1568
00:35:56,670 --> 00:35:59,109
 

1569
00:35:56,680 --> 00:36:00,609
 crucial thing to realize to understand

1570
00:35:59,099 --> 00:36:00,609
 

1571
00:35:59,109 --> 00:36:04,119
 you know how to get robust models rise

1572
00:36:00,599 --> 00:36:04,119
 

1573
00:36:00,609 --> 00:36:05,770
 that we did not fail at all okay so at

1574
00:36:04,109 --> 00:36:05,770
 

1575
00:36:04,119 --> 00:36:08,590
 this area like the lack of detail

1576
00:36:05,760 --> 00:36:08,590
 

1577
00:36:05,770 --> 00:36:10,210
 robustness is not you know it's not our

1578
00:36:08,580 --> 00:36:10,210
 

1579
00:36:08,590 --> 00:36:11,859
 failure because it's act like the

1580
00:36:10,200 --> 00:36:11,859
 

1581
00:36:10,210 --> 00:36:14,410
 existence of the examples is completely

1582
00:36:11,849 --> 00:36:14,410
 

1583
00:36:11,859 --> 00:36:16,390
 not at odds with our current you know

1584
00:36:14,400 --> 00:36:16,390
 

1585
00:36:14,410 --> 00:36:19,119
 current machine learning toolkit in

1586
00:36:16,380 --> 00:36:19,119
 

1587
00:36:16,390 --> 00:36:21,040
 particular what it is that our models

1588
00:36:19,109 --> 00:36:21,040
 

1589
00:36:19,119 --> 00:36:22,540
 try to achieve most of the time what

1590
00:36:21,030 --> 00:36:22,540
 

1591
00:36:21,040 --> 00:36:24,220
 they try to achieve is something we call

1592
00:36:22,530 --> 00:36:24,220
 

1593
00:36:22,540 --> 00:36:25,720
 some the generalization so what I would

1594
00:36:24,210 --> 00:36:25,720
 

1595
00:36:24,220 --> 00:36:28,270
 like to do is I would like to if I

1596
00:36:25,710 --> 00:36:28,270
 

1597
00:36:25,720 --> 00:36:31,000
 sample an example from my distribution

1598
00:36:28,260 --> 00:36:31,000
 

1599
00:36:28,270 --> 00:36:33,160
 that is in the sky I would like the loss

1600
00:36:30,990 --> 00:36:33,160
 

1601
00:36:31,000 --> 00:36:36,340
 of my classifier on this example to be

1602
00:36:33,150 --> 00:36:36,340
 

1603
00:36:33,160 --> 00:36:38,080
 small in in expectation okay so in

1604
00:36:36,330 --> 00:36:38,080
 

1605
00:36:36,340 --> 00:36:40,210
 expectation is great for average case

1606
00:36:38,070 --> 00:36:40,210
 

1607
00:36:38,080 --> 00:36:43,119
 performance but adversarial examples is

1608
00:36:40,200 --> 00:36:43,119
 

1609
00:36:40,210 --> 00:36:45,940
 a worst-case notion it's actually it's

1610
00:36:43,109 --> 00:36:45,940
 

1611
00:36:43,119 --> 00:36:48,910
 of measure measure 0 so this expectation

1612
00:36:45,930 --> 00:36:48,910
 

1613
00:36:45,940 --> 00:36:52,060
 is completely invariant on existence or

1614
00:36:48,900 --> 00:36:52,060
 

1615
00:36:48,910 --> 00:36:54,820
 nonexistence of original examples so in

1616
00:36:52,050 --> 00:36:54,820
 

1617
00:36:52,060 --> 00:36:57,580
 a sense if we never tried to get like

1618
00:36:54,810 --> 00:36:57,580
 

1619
00:36:54,820 --> 00:36:58,720
 essentially if the goal that all of our

1620
00:36:57,570 --> 00:36:58,720
 

1621
00:36:57,580 --> 00:37:00,760
 machine learning took its driving

1622
00:36:58,710 --> 00:37:00,760
 

1623
00:36:58,720 --> 00:37:02,500
 towards its completely invariant other

1624
00:37:00,750 --> 00:37:02,500
 

1625
00:37:00,760 --> 00:37:05,680
 existence were some examples you should

1626
00:37:02,490 --> 00:37:05,680
 

1627
00:37:02,500 --> 00:37:08,590
 not be surprised that they do exist okay

1628
00:37:05,670 --> 00:37:08,590
 

1629
00:37:05,680 --> 00:37:11,230
 so it is essentially if you wanted to

1630
00:37:08,580 --> 00:37:11,230
 

1631
00:37:08,590 --> 00:37:13,210
 get models where you know you don't get

1632
00:37:11,220 --> 00:37:13,210
 

1633
00:37:11,230 --> 00:37:14,530
 into trouble for this error examples

1634
00:37:13,200 --> 00:37:14,530
 

1635
00:37:13,210 --> 00:37:16,600
 what you have to do well you have to

1636
00:37:14,520 --> 00:37:16,600
 

1637
00:37:14,530 --> 00:37:19,270
 change the goal you are trying to

1638
00:37:16,590 --> 00:37:19,270
 

1639
00:37:16,600 --> 00:37:20,680
 achieve and the goal that you get that

1640
00:37:19,260 --> 00:37:20,680
 

1641
00:37:19,270 --> 00:37:22,630
 you should arrived at with something

1642
00:37:20,670 --> 00:37:22,630
 

1643
00:37:20,680 --> 00:37:24,369
 called know let's say adversary are

1644
00:37:22,620 --> 00:37:24,369
 

1645
00:37:22,630 --> 00:37:26,530
 robust generalization in which what you

1646
00:37:24,359 --> 00:37:26,530
 

1647
00:37:24,369 --> 00:37:26,940
 do is saying or what I would like to do

1648
00:37:26,520 --> 00:37:26,940
 

1649
00:37:26,530 --> 00:37:29,220
 is I

1650
00:37:26,930 --> 00:37:29,220
 

1651
00:37:26,940 --> 00:37:30,869
 would like to do well in expectation not

1652
00:37:29,210 --> 00:37:30,869
 

1653
00:37:29,220 --> 00:37:33,420
 only on the sampled example from

1654
00:37:30,859 --> 00:37:33,420
 

1655
00:37:30,869 --> 00:37:36,060
 distribution but also on the worst case

1656
00:37:33,410 --> 00:37:36,060
 

1657
00:37:33,420 --> 00:37:38,160
 perturbation of that example and just

1658
00:37:36,050 --> 00:37:38,160
 

1659
00:37:36,060 --> 00:37:40,920
 like plugging in the smacks inside of

1660
00:37:38,150 --> 00:37:40,920
 

1661
00:37:38,160 --> 00:37:43,170
 expectation essentially is is the whole

1662
00:37:40,910 --> 00:37:43,170
 

1663
00:37:40,920 --> 00:37:45,480
 difference between what we were doing so

1664
00:37:43,160 --> 00:37:45,480
 

1665
00:37:43,170 --> 00:37:46,109
 far and what we need to do for adversary

1666
00:37:45,470 --> 00:37:46,109
 

1667
00:37:45,480 --> 00:37:49,640
 robustness

1668
00:37:46,099 --> 00:37:49,640
 

1669
00:37:46,109 --> 00:37:52,319
 okay so this is you know kind of this is

1670
00:37:49,630 --> 00:37:52,319
 

1671
00:37:49,640 --> 00:37:53,460
 this is the general outlook of like what

1672
00:37:52,309 --> 00:37:53,460
 

1673
00:37:52,319 --> 00:37:55,470
 is the problem we are trying to tackle

1674
00:37:53,450 --> 00:37:55,470
 

1675
00:37:53,460 --> 00:37:57,359
 and where we are going from now so now

1676
00:37:55,460 --> 00:37:57,359
 

1677
00:37:55,470 --> 00:37:59,790
 we know that our goal is the original

1678
00:37:57,349 --> 00:37:59,790
 

1679
00:37:57,359 --> 00:38:01,800
 robustness now it's time for taking a

1680
00:37:59,780 --> 00:38:01,800
 

1681
00:37:59,790 --> 00:38:03,990
 deeper dive into this topic in

1682
00:38:01,790 --> 00:38:03,990
 

1683
00:38:01,800 --> 00:38:05,940
 particular Zika now we'll talk in a bit

1684
00:38:03,980 --> 00:38:05,940
 

1685
00:38:03,990 --> 00:38:08,460
 more in depth about other examples and

1686
00:38:05,930 --> 00:38:08,460
 

1687
00:38:05,940 --> 00:38:12,060
 about kind of ways to figure out how to

1688
00:38:08,450 --> 00:38:12,060
 

1689
00:38:08,460 --> 00:38:13,470
 pro to even check if there exists a list

1690
00:38:12,050 --> 00:38:13,470
 

1691
00:38:12,060 --> 00:38:15,960
 of examples for our system or no and

1692
00:38:13,460 --> 00:38:15,960
 

1693
00:38:13,470 --> 00:38:17,790
 then he will talk about actual details

1694
00:38:15,950 --> 00:38:17,790
 

1695
00:38:15,960 --> 00:38:19,619
 of how do you go about training models

1696
00:38:17,780 --> 00:38:19,619
 

1697
00:38:17,790 --> 00:38:21,510
 that are robust to it and then I will

1698
00:38:19,609 --> 00:38:21,510
 

1699
00:38:19,619 --> 00:38:23,130
 come back a bit and just give you a bit

1700
00:38:21,500 --> 00:38:23,130
 

1701
00:38:21,510 --> 00:38:25,140
 broader perspective again about like

1702
00:38:23,120 --> 00:38:25,140
 

1703
00:38:23,130 --> 00:38:27,770
 what can we do with the toast to achieve

1704
00:38:25,130 --> 00:38:27,770
 

1705
00:38:25,140 --> 00:38:34,739
 over here thank you

1706
00:38:27,760 --> 00:38:34,739
 

1707
00:38:27,770 --> 00:38:34,739
[Applause]

1708
00:38:37,110 --> 00:38:37,110
 

1709
00:38:37,120 --> 00:38:45,830
 alright this on good

1710
00:38:41,070 --> 00:38:45,830
 

1711
00:38:41,080 --> 00:38:48,680
 so as Alex mentioned after that great

1712
00:38:45,820 --> 00:38:48,680
 

1713
00:38:45,830 --> 00:38:50,270
 sort of broad introduction I'm gonna

1714
00:38:48,670 --> 00:38:50,270
 

1715
00:38:48,680 --> 00:38:52,040
 have the the fun job of actually going

1716
00:38:50,260 --> 00:38:52,040
 

1717
00:38:50,270 --> 00:38:53,420
 to some depth about how you do it so

1718
00:38:52,030 --> 00:38:53,420
 

1719
00:38:52,040 --> 00:38:55,490
 I'll put this down in a second just just

1720
00:38:53,410 --> 00:38:55,490
 

1721
00:38:53,420 --> 00:38:56,990
 one second one thing I actually do want

1722
00:38:55,480 --> 00:38:56,990
 

1723
00:38:55,490 --> 00:38:59,030
 to highlight which Alex didn't mention

1724
00:38:56,980 --> 00:38:59,030
 

1725
00:38:56,990 --> 00:39:00,860
 maybe this try to zoom in here is that

1726
00:38:59,020 --> 00:39:00,860
 

1727
00:38:59,030 --> 00:39:03,350
 we actually also have an accompanying

1728
00:39:00,850 --> 00:39:03,350
 

1729
00:39:00,860 --> 00:39:07,460
 website this tutorial so adversarial -

1730
00:39:03,340 --> 00:39:07,460
 

1731
00:39:03,350 --> 00:39:09,620
 ml - Ettore org has a set of notes that

1732
00:39:07,450 --> 00:39:09,620
 

1733
00:39:07,460 --> 00:39:11,930
 go through pretty much all the details

1734
00:39:09,610 --> 00:39:11,930
 

1735
00:39:09,620 --> 00:39:14,930
 when described here and so this is the

1736
00:39:11,920 --> 00:39:14,930
 

1737
00:39:11,930 --> 00:39:17,510
 website here and the notes here are

1738
00:39:14,920 --> 00:39:17,510
 

1739
00:39:14,930 --> 00:39:19,480
 actually in as written as Jupiter

1740
00:39:17,500 --> 00:39:19,480
 

1741
00:39:17,510 --> 00:39:22,760
 notebooks so there's there's notes with

1742
00:39:19,470 --> 00:39:22,760
 

1743
00:39:19,480 --> 00:39:24,140
 you know pros with examples but also

1744
00:39:22,750 --> 00:39:24,140
 

1745
00:39:22,760 --> 00:39:25,490
 with code that will do everything I'm

1746
00:39:24,130 --> 00:39:25,490
 

1747
00:39:24,140 --> 00:39:27,410
 going to talk about so all the examples

1748
00:39:25,480 --> 00:39:27,410
 

1749
00:39:25,490 --> 00:39:29,060
 I have there's actually code and

1750
00:39:27,400 --> 00:39:29,060
 

1751
00:39:27,410 --> 00:39:30,650
 walkthroughs on how to actually do this

1752
00:39:29,050 --> 00:39:30,650
 

1753
00:39:29,060 --> 00:39:32,390
 and you can actually download these

1754
00:39:30,640 --> 00:39:32,390
 

1755
00:39:30,650 --> 00:39:34,850
 notes as Jupiter notebooks or just read

1756
00:39:32,380 --> 00:39:34,850
 

1757
00:39:32,390 --> 00:39:37,250
 them on the web and use that to to go

1758
00:39:34,840 --> 00:39:37,250
 

1759
00:39:34,850 --> 00:39:38,900
 through sort of these these examples so

1760
00:39:37,240 --> 00:39:38,900
 

1761
00:39:37,250 --> 00:39:41,060
 if anything I do here goes a little bit

1762
00:39:38,890 --> 00:39:41,060
 

1763
00:39:38,900 --> 00:39:42,770
 fast which it might please just know you

1764
00:39:41,050 --> 00:39:42,770
 

1765
00:39:41,060 --> 00:39:44,480
 have this resource we'll have it again

1766
00:39:42,760 --> 00:39:44,480
 

1767
00:39:42,770 --> 00:39:45,920
 at the end it's also I think in our

1768
00:39:44,470 --> 00:39:45,920
 

1769
00:39:44,480 --> 00:39:47,960
 Twitter post about this and you can you

1770
00:39:45,910 --> 00:39:47,960
 

1771
00:39:45,920 --> 00:39:58,580
 can use that okay

1772
00:39:47,950 --> 00:39:58,580
 

1773
00:39:47,960 --> 00:40:01,570
 so I'll look at that lovely display when

1774
00:39:58,570 --> 00:40:01,570
 

1775
00:39:58,580 --> 00:40:01,570
 I quit my yeah

1776
00:40:04,790 --> 00:40:04,790
 

1777
00:40:04,800 --> 00:40:07,400
 okay

1778
00:40:08,349 --> 00:40:08,349
 

1779
00:40:08,359 --> 00:40:13,069
 there we go all right so as Alex

1780
00:40:11,739 --> 00:40:13,069
 

1781
00:40:11,749 --> 00:40:15,829
 mentioned he starts to behave a Brian

1782
00:40:13,059 --> 00:40:15,829
 

1783
00:40:13,069 --> 00:40:17,450
 reduction and we are in my port I really

1784
00:40:15,819 --> 00:40:17,450
 

1785
00:40:15,829 --> 00:40:21,619
 wanna emphasize focusing on this problem

1786
00:40:17,440 --> 00:40:21,619
 

1787
00:40:17,450 --> 00:40:22,849
 of a test time adversarial attacks so of

1788
00:40:21,609 --> 00:40:22,849
 

1789
00:40:21,619 --> 00:40:24,650
 course adversary but this is much

1790
00:40:22,839 --> 00:40:24,650
 

1791
00:40:22,849 --> 00:40:26,960
 broader than this but this is the topic

1792
00:40:24,640 --> 00:40:26,960
 

1793
00:40:24,650 --> 00:40:29,029
 I'm gonna focus on and particularly I'm

1794
00:40:26,950 --> 00:40:29,029
 

1795
00:40:26,960 --> 00:40:31,519
 gonna kind of focus on in some sense the

1796
00:40:29,019 --> 00:40:31,519
 

1797
00:40:29,029 --> 00:40:32,450
 the attack and then the defense so the

1798
00:40:31,509 --> 00:40:32,450
 

1799
00:40:31,519 --> 00:40:34,519
 first part is going to be about

1800
00:40:32,440 --> 00:40:34,519
 

1801
00:40:32,450 --> 00:40:36,170
 constructing adversarial examples or

1802
00:40:34,509 --> 00:40:36,170
 

1803
00:40:34,519 --> 00:40:37,880
 maybe a little bit more broadly also

1804
00:40:36,160 --> 00:40:37,880
 

1805
00:40:36,170 --> 00:40:39,890
 verifying whether or not these things

1806
00:40:37,870 --> 00:40:39,890
 

1807
00:40:37,880 --> 00:40:42,259
 exist and the second part is going to be

1808
00:40:39,880 --> 00:40:42,259
 

1809
00:40:39,890 --> 00:40:44,140
 about training robust models and the

1810
00:40:42,249 --> 00:40:44,140
 

1811
00:40:42,259 --> 00:40:46,190
 particular first we'll talk about

1812
00:40:44,130 --> 00:40:46,190
 

1813
00:40:44,140 --> 00:40:47,839
 because certain gave us examples there's

1814
00:40:46,180 --> 00:40:47,839
 

1815
00:40:46,190 --> 00:40:49,249
 a verification then average shell

1816
00:40:47,829 --> 00:40:49,249
 

1817
00:40:47,839 --> 00:40:53,329
 training as well as probably robust

1818
00:40:49,239 --> 00:40:53,329
 

1819
00:40:49,249 --> 00:40:56,059
 training okay so as Alex mentioned the

1820
00:40:53,319 --> 00:40:56,059
 

1821
00:40:53,329 --> 00:41:00,700
 big picture here is the following we

1822
00:40:56,049 --> 00:41:00,700
 

1823
00:40:56,059 --> 00:41:03,319
 want to train a model ideally that is

1824
00:41:00,690 --> 00:41:03,319
 

1825
00:41:00,700 --> 00:41:05,420
 well general as well not just on a fixed

1826
00:41:03,309 --> 00:41:05,420
 

1827
00:41:03,319 --> 00:41:08,480
 data set but actually on adversarial

1828
00:41:05,410 --> 00:41:08,480
 

1829
00:41:05,420 --> 00:41:11,329
 perturbations of that data set all right

1830
00:41:08,470 --> 00:41:11,329
 

1831
00:41:08,480 --> 00:41:13,160
 of course transportation is not you know

1832
00:41:11,319 --> 00:41:13,160
 

1833
00:41:11,329 --> 00:41:14,119
 it's not always easy to do so of course

1834
00:41:13,150 --> 00:41:14,119
 

1835
00:41:13,160 --> 00:41:15,499
 what we're going to do in practice is

1836
00:41:14,109 --> 00:41:15,499
 

1837
00:41:14,119 --> 00:41:18,049
 we're going to have some fun I theta set

1838
00:41:15,489 --> 00:41:18,049
 

1839
00:41:15,499 --> 00:41:20,210
 that we're going to minimize this

1840
00:41:18,039 --> 00:41:20,210
 

1841
00:41:18,049 --> 00:41:22,609
 objective over all right so on some data

1842
00:41:20,200 --> 00:41:22,609
 

1843
00:41:20,210 --> 00:41:25,489
 set s we're going to minimize this

1844
00:41:22,599 --> 00:41:25,489
 

1845
00:41:22,609 --> 00:41:27,259
 robust objective here and what this

1846
00:41:25,479 --> 00:41:27,259
 

1847
00:41:25,489 --> 00:41:31,249
 portion the talk is about these sort of

1848
00:41:27,249 --> 00:41:31,249
 

1849
00:41:27,259 --> 00:41:34,670
 two portions really is part one is gonna

1850
00:41:31,239 --> 00:41:34,670
 

1851
00:41:31,249 --> 00:41:36,579
 be about the inner maximization so what

1852
00:41:34,660 --> 00:41:36,579
 

1853
00:41:34,670 --> 00:41:40,700
 that means is it's is about either

1854
00:41:36,569 --> 00:41:40,700
 

1855
00:41:36,579 --> 00:41:43,400
 finding adversarial examples or actually

1856
00:41:40,690 --> 00:41:43,400
 

1857
00:41:40,700 --> 00:41:45,230
 somehow otherwise verifying that one

1858
00:41:43,390 --> 00:41:45,230
 

1859
00:41:43,400 --> 00:41:48,349
 cannot exist I'll talk about what I mean

1860
00:41:45,220 --> 00:41:48,349
 

1861
00:41:45,230 --> 00:41:50,809
 by that in a second and part two is

1862
00:41:48,339 --> 00:41:50,809
 

1863
00:41:48,349 --> 00:41:52,989
 going to be about training a robust

1864
00:41:50,799 --> 00:41:52,989
 

1865
00:41:50,809 --> 00:41:55,369
 classifier so how do we solve the outer

1866
00:41:52,979 --> 00:41:55,369
 

1867
00:41:52,989 --> 00:41:57,289
 minimization problem now that we've

1868
00:41:55,359 --> 00:41:57,289
 

1869
00:41:55,369 --> 00:41:59,299
 already broken machine learning will

1870
00:41:57,279 --> 00:41:59,299
 

1871
00:41:57,289 --> 00:42:04,190
 tell you how at least we might be able

1872
00:41:59,289 --> 00:42:04,190
 

1873
00:41:59,299 --> 00:42:08,630
 to fix it in some cases all right so

1874
00:42:04,180 --> 00:42:08,630
 

1875
00:42:04,190 --> 00:42:11,089
 let's dive into Part one now here's a

1876
00:42:08,620 --> 00:42:11,089
 

1877
00:42:08,630 --> 00:42:12,829
 view kind of of the lost landscape and

1878
00:42:11,079 --> 00:42:12,829
 

1879
00:42:11,089 --> 00:42:15,170
 the problem that we have all right so we

1880
00:42:12,819 --> 00:42:15,170
 

1881
00:42:12,829 --> 00:42:17,359
 have some perturbation region Delta

1882
00:42:15,160 --> 00:42:17,359
 

1883
00:42:15,170 --> 00:42:19,190
 that's shown on the bottom there we have

1884
00:42:17,349 --> 00:42:19,190
 

1885
00:42:17,359 --> 00:42:21,529
 some initial point Delta zero we have

1886
00:42:19,180 --> 00:42:21,529
 

1887
00:42:19,190 --> 00:42:22,200
 some loss function that exists for

1888
00:42:21,519 --> 00:42:22,200
 

1889
00:42:21,529 --> 00:42:25,710
 different perturbed

1890
00:42:22,190 --> 00:42:25,710
 

1891
00:42:22,200 --> 00:42:29,339
 of delta and so if we want to maximize

1892
00:42:25,700 --> 00:42:29,339
 

1893
00:42:25,710 --> 00:42:30,210
 this quantity what Alex described is

1894
00:42:29,329 --> 00:42:30,210
 

1895
00:42:29,339 --> 00:42:31,890
 just sort of well we can just run

1896
00:42:30,200 --> 00:42:31,890
 

1897
00:42:30,210 --> 00:42:32,970
 grading descent right but what I

1898
00:42:31,880 --> 00:42:32,970
 

1899
00:42:31,890 --> 00:42:34,650
 actually want to highlight here is

1900
00:42:32,960 --> 00:42:34,650
 

1901
00:42:32,970 --> 00:42:35,730
 there's other possibilities as well and

1902
00:42:34,640 --> 00:42:35,730
 

1903
00:42:34,650 --> 00:42:37,020
 actually understanding these things

1904
00:42:35,720 --> 00:42:37,020
 

1905
00:42:35,730 --> 00:42:40,020
 really helps you understand the nature

1906
00:42:37,010 --> 00:42:40,020
 

1907
00:42:37,020 --> 00:42:43,380
 of adversarial examples and verification

1908
00:42:40,010 --> 00:42:43,380
 

1909
00:42:40,020 --> 00:42:46,170
 in in this setting so we really have

1910
00:42:43,370 --> 00:42:46,170
 

1911
00:42:43,380 --> 00:42:47,700
 three options the first is we can do

1912
00:42:46,160 --> 00:42:47,700
 

1913
00:42:46,170 --> 00:42:49,950
 local search right we can just do sort

1914
00:42:47,690 --> 00:42:49,950
 

1915
00:42:47,700 --> 00:42:51,030
 of search to find an adversarial example

1916
00:42:49,940 --> 00:42:51,030
 

1917
00:42:49,950 --> 00:42:52,380
 and this is actually the most common

1918
00:42:51,020 --> 00:42:52,380
 

1919
00:42:51,030 --> 00:42:54,300
 thing that's done in practice this is

1920
00:42:52,370 --> 00:42:54,300
 

1921
00:42:52,380 --> 00:42:56,690
 sort of what people typically talk about

1922
00:42:54,290 --> 00:42:56,690
 

1923
00:42:54,300 --> 00:42:59,010
 when we talk about adversarial examples

1924
00:42:56,680 --> 00:42:59,010
 

1925
00:42:56,690 --> 00:43:00,150
 but there are other possibilities too

1926
00:42:59,000 --> 00:43:00,150
 

1927
00:42:59,010 --> 00:43:01,560
 when I was essentially what I want to

1928
00:43:00,140 --> 00:43:01,560
 

1929
00:43:00,150 --> 00:43:03,540
 really emphasize here is that there's

1930
00:43:01,550 --> 00:43:03,540
 

1931
00:43:01,560 --> 00:43:06,030
 other approaches are also possible so

1932
00:43:03,530 --> 00:43:06,030
 

1933
00:43:03,540 --> 00:43:07,349
 it's also possible actually maybe not

1934
00:43:06,020 --> 00:43:07,349
 

1935
00:43:06,030 --> 00:43:09,660
 for large models but for relatively

1936
00:43:07,339 --> 00:43:09,660
 

1937
00:43:07,349 --> 00:43:11,910
 small models to actually solve this

1938
00:43:09,650 --> 00:43:11,910
 

1939
00:43:09,660 --> 00:43:13,530
 problem exactly using techniques and

1940
00:43:11,900 --> 00:43:13,530
 

1941
00:43:11,910 --> 00:43:14,820
 combinatorial optimization so weak

1942
00:43:13,520 --> 00:43:14,820
 

1943
00:43:13,530 --> 00:43:17,070
 actually could not just do local search

1944
00:43:14,810 --> 00:43:17,070
 

1945
00:43:14,820 --> 00:43:20,089
 but we can actually find the worst case

1946
00:43:17,060 --> 00:43:20,089
 

1947
00:43:17,070 --> 00:43:23,970
 example for a given classifier and

1948
00:43:20,079 --> 00:43:23,970
 

1949
00:43:20,089 --> 00:43:27,329
 finally we can also form an upper bound

1950
00:43:23,960 --> 00:43:27,329
 

1951
00:43:23,970 --> 00:43:29,880
 on this loss function at least over the

1952
00:43:27,319 --> 00:43:29,880
 

1953
00:43:27,329 --> 00:43:31,410
 over the region of question and if this

1954
00:43:29,870 --> 00:43:31,410
 

1955
00:43:29,880 --> 00:43:33,180
 upper bound has nice properties like

1956
00:43:31,400 --> 00:43:33,180
 

1957
00:43:31,410 --> 00:43:35,849
 it's convex or really concave those are

1958
00:43:33,170 --> 00:43:35,849
 

1959
00:43:33,180 --> 00:43:36,930
 maximizing it we can actually find exact

1960
00:43:35,839 --> 00:43:36,930
 

1961
00:43:35,849 --> 00:43:39,750
 solutions as well

1962
00:43:36,920 --> 00:43:39,750
 

1963
00:43:36,930 --> 00:43:42,569
 they will also let us give verifications

1964
00:43:39,740 --> 00:43:42,569
 

1965
00:43:39,750 --> 00:43:44,700
 of whether or not an adversarial example

1966
00:43:42,559 --> 00:43:44,700
 

1967
00:43:42,569 --> 00:43:45,780
 exists or not so the first part of the

1968
00:43:44,690 --> 00:43:45,780
 

1969
00:43:44,700 --> 00:43:47,250
 talk here is really going to be about

1970
00:43:45,770 --> 00:43:47,250
 

1971
00:43:45,780 --> 00:43:48,869
 running through these three

1972
00:43:47,240 --> 00:43:48,869
 

1973
00:43:47,250 --> 00:43:51,470
 possibilities and kind of checking

1974
00:43:48,859 --> 00:43:51,470
 

1975
00:43:48,869 --> 00:43:53,849
 what's possible and what's not possible

1976
00:43:51,460 --> 00:43:53,849
 

1977
00:43:51,470 --> 00:43:56,880
 one thing I do want to emphasize though

1978
00:43:53,839 --> 00:43:56,880
 

1979
00:43:53,849 --> 00:43:58,710
 is that all of this work though it's

1980
00:43:56,870 --> 00:43:58,710
 

1981
00:43:56,880 --> 00:44:00,900
 relatively new in machine learning and

1982
00:43:58,700 --> 00:44:00,900
 

1983
00:43:58,710 --> 00:44:03,150
 people in particular it actually goes

1984
00:44:00,890 --> 00:44:03,150
 

1985
00:44:00,900 --> 00:44:05,670
 back a long time to the topic of robust

1986
00:44:03,140 --> 00:44:05,670
 

1987
00:44:03,150 --> 00:44:07,380
 optimization largely in linear models

1988
00:44:05,660 --> 00:44:07,380
 

1989
00:44:05,670 --> 00:44:10,440
 and so the only point I want to make

1990
00:44:07,370 --> 00:44:10,440
 

1991
00:44:07,380 --> 00:44:11,910
 here is that for linear models that

1992
00:44:10,430 --> 00:44:11,910
 

1993
00:44:10,440 --> 00:44:14,099
 actually turns out you can solve this

1994
00:44:11,900 --> 00:44:14,099
 

1995
00:44:11,910 --> 00:44:15,869
 problem exactly and all those three

1996
00:44:14,089 --> 00:44:15,869
 

1997
00:44:14,099 --> 00:44:17,970
 cases I described before actually

1998
00:44:15,859 --> 00:44:17,970
 

1999
00:44:15,869 --> 00:44:19,290
 collapse to one so without too much

2000
00:44:17,960 --> 00:44:19,290
 

2001
00:44:17,970 --> 00:44:20,069
 detail here if we have actually just in

2002
00:44:19,280 --> 00:44:20,069
 

2003
00:44:19,290 --> 00:44:22,650
 this case consider a binary

2004
00:44:20,059 --> 00:44:22,650
 

2005
00:44:20,069 --> 00:44:24,000
 classification problem it's actually

2006
00:44:22,640 --> 00:44:24,000
 

2007
00:44:22,650 --> 00:44:25,680
 possible to find the worst with with

2008
00:44:23,990 --> 00:44:25,680
 

2009
00:44:24,000 --> 00:44:27,180
 with norm bounds for your regions you

2010
00:44:25,670 --> 00:44:27,180
 

2011
00:44:25,680 --> 00:44:28,650
 can find the worst case perturbations

2012
00:44:27,170 --> 00:44:28,650
 

2013
00:44:27,180 --> 00:44:31,140
 it's just ort of the ones closest to the

2014
00:44:28,640 --> 00:44:31,140
 

2015
00:44:28,650 --> 00:44:32,490
 to the decision boundary and actually

2016
00:44:31,130 --> 00:44:32,490
 

2017
00:44:31,140 --> 00:44:34,829
 sort of formally what this means is that

2018
00:44:32,480 --> 00:44:34,829
 

2019
00:44:32,490 --> 00:44:35,900
 you take your optimization here you can

2020
00:44:34,819 --> 00:44:35,900
 

2021
00:44:34,829 --> 00:44:38,240
 actually push the

2022
00:44:35,890 --> 00:44:38,240
 

2023
00:44:35,900 --> 00:44:39,920
 the max inside the loss because the loss

2024
00:44:38,230 --> 00:44:39,920
 

2025
00:44:38,240 --> 00:44:42,559
 is negative is monotonic decreasing it

2026
00:44:39,910 --> 00:44:42,559
 

2027
00:44:39,920 --> 00:44:44,240
 becomes a min and this can be solved

2028
00:44:42,549 --> 00:44:44,240
 

2029
00:44:42,559 --> 00:44:46,460
 analytically in terms of the dual norm

2030
00:44:44,230 --> 00:44:46,460
 

2031
00:44:44,240 --> 00:44:47,690
 of your perturbation region alright so

2032
00:44:46,450 --> 00:44:47,690
 

2033
00:44:46,460 --> 00:44:48,980
 this is actually not I'm not gonna go

2034
00:44:47,680 --> 00:44:48,980
 

2035
00:44:47,690 --> 00:44:50,299
 into detail about how this works there

2036
00:44:48,970 --> 00:44:50,299
 

2037
00:44:48,980 --> 00:44:52,190
 are of course a lot more details in the

2038
00:44:50,289 --> 00:44:52,190
 

2039
00:44:50,299 --> 00:44:53,749
 toriel but I just want to highlight the

2040
00:44:52,180 --> 00:44:53,749
 

2041
00:44:52,190 --> 00:44:54,920
 fact that this is not a new

2042
00:44:53,739 --> 00:44:54,920
 

2043
00:44:53,749 --> 00:44:57,460
 probabilities in the context of linear

2044
00:44:54,910 --> 00:44:57,460
 

2045
00:44:54,920 --> 00:45:00,109
 models this goes back a very long time

2046
00:44:57,450 --> 00:45:00,109
 

2047
00:44:57,460 --> 00:45:02,150
 ok so now let me get to this sort of

2048
00:45:00,099 --> 00:45:02,150
 

2049
00:45:00,109 --> 00:45:05,960
 these three cases of how we deal or

2050
00:45:02,140 --> 00:45:05,960
 

2051
00:45:02,150 --> 00:45:08,509
 think about adversarial examples in the

2052
00:45:05,950 --> 00:45:08,509
 

2053
00:45:05,960 --> 00:45:10,430
 first case we talk about local search so

2054
00:45:08,499 --> 00:45:10,430
 

2055
00:45:08,509 --> 00:45:12,829
 you know everyone knows of course that

2056
00:45:10,420 --> 00:45:12,829
 

2057
00:45:10,430 --> 00:45:14,990
 the lost landscape of deep learning is

2058
00:45:12,819 --> 00:45:14,990
 

2059
00:45:12,829 --> 00:45:17,180
 or DB deep classifiers there's it's non

2060
00:45:14,980 --> 00:45:17,180
 

2061
00:45:14,990 --> 00:45:19,549
 convex and Nasty's if it's local optima

2062
00:45:17,170 --> 00:45:19,549
 

2063
00:45:17,180 --> 00:45:20,599
 but the big the great thing about deep

2064
00:45:19,539 --> 00:45:20,599
 

2065
00:45:19,549 --> 00:45:21,920
 learning is we just don't care about

2066
00:45:20,589 --> 00:45:21,920
 

2067
00:45:20,599 --> 00:45:23,690
 this anymore right we don't care about

2068
00:45:21,910 --> 00:45:23,690
 

2069
00:45:21,920 --> 00:45:25,430
 the fact that we're optimizing non

2070
00:45:23,680 --> 00:45:25,430
 

2071
00:45:23,690 --> 00:45:26,839
 convex functions we're just gonna do it

2072
00:45:25,420 --> 00:45:26,839
 

2073
00:45:25,430 --> 00:45:29,480
 anyway and we're gonna try to

2074
00:45:26,829 --> 00:45:29,480
 

2075
00:45:26,839 --> 00:45:31,910
 empirically find an attack that exists

2076
00:45:29,470 --> 00:45:31,910
 

2077
00:45:29,480 --> 00:45:33,650
 within some norm bound so how do we do

2078
00:45:31,900 --> 00:45:33,650
 

2079
00:45:31,910 --> 00:45:35,029
 this and there are a lot of ways of

2080
00:45:33,640 --> 00:45:35,029
 

2081
00:45:33,650 --> 00:45:36,140
 doing this but the main tool I wanna

2082
00:45:35,019 --> 00:45:36,140
 

2083
00:45:35,029 --> 00:45:39,230
 highlight was actually what Alex

2084
00:45:36,130 --> 00:45:39,230
 

2085
00:45:36,140 --> 00:45:41,599
 mentioned to our variance of projected

2086
00:45:39,220 --> 00:45:41,599
 

2087
00:45:39,230 --> 00:45:44,690
 gradient descent the idea here is very

2088
00:45:41,589 --> 00:45:44,690
 

2089
00:45:41,599 --> 00:45:46,579
 simple we want to optimize our

2090
00:45:44,680 --> 00:45:46,579
 

2091
00:45:44,690 --> 00:45:48,019
 perturbation bound in some region Delta

2092
00:45:46,569 --> 00:45:48,019
 

2093
00:45:46,579 --> 00:45:50,690
 that's represented by the gray region

2094
00:45:48,009 --> 00:45:50,690
 

2095
00:45:48,019 --> 00:45:53,930
 there and what we do is we just take a

2096
00:45:50,680 --> 00:45:53,930
 

2097
00:45:50,690 --> 00:45:56,119
 step in the direction of the gradient of

2098
00:45:53,920 --> 00:45:56,119
 

2099
00:45:53,930 --> 00:45:56,989
 the loss function so we're taking a

2100
00:45:56,109 --> 00:45:56,989
 

2101
00:45:56,119 --> 00:45:58,430
 post-up in the positive direction

2102
00:45:56,979 --> 00:45:58,430
 

2103
00:45:56,989 --> 00:46:01,400
 because we're trying to maximize the

2104
00:45:58,420 --> 00:46:01,400
 

2105
00:45:58,430 --> 00:46:03,380
 loss function and then we just project

2106
00:46:01,390 --> 00:46:03,380
 

2107
00:46:01,400 --> 00:46:05,329
 back on to the set so we find the

2108
00:46:03,370 --> 00:46:05,329
 

2109
00:46:03,380 --> 00:46:07,700
 closest point in the set to our to our

2110
00:46:05,319 --> 00:46:07,700
 

2111
00:46:05,329 --> 00:46:09,619
 projected point and we just repeat this

2112
00:46:07,690 --> 00:46:09,619
 

2113
00:46:07,700 --> 00:46:12,170
 process and this is what and then we

2114
00:46:09,609 --> 00:46:12,170
 

2115
00:46:09,619 --> 00:46:16,910
 just hopefully will find our way to

2116
00:46:12,160 --> 00:46:16,910
 

2117
00:46:12,170 --> 00:46:18,890
 points of high of high cost and actually

2118
00:46:16,900 --> 00:46:18,890
 

2119
00:46:16,910 --> 00:46:20,539
 I would say that most attacks not quite

2120
00:46:18,880 --> 00:46:20,539
 

2121
00:46:18,890 --> 00:46:22,670
 all of them most tactics that leads in

2122
00:46:20,529 --> 00:46:22,670
 

2123
00:46:20,539 --> 00:46:23,630
 practice are based on some variant of

2124
00:46:22,660 --> 00:46:23,630
 

2125
00:46:22,670 --> 00:46:26,930
 this but they're often based upon

2126
00:46:23,620 --> 00:46:26,930
 

2127
00:46:23,630 --> 00:46:28,460
 simplified variants of this so let me

2128
00:46:26,920 --> 00:46:28,460
 

2129
00:46:26,930 --> 00:46:29,900
 describe actually one for the most part

2130
00:46:28,450 --> 00:46:29,900
 

2131
00:46:28,460 --> 00:46:31,430
 I'm actually not going I'm gonna talk

2132
00:46:29,890 --> 00:46:31,430
 

2133
00:46:29,900 --> 00:46:33,109
 about sort of the methodologies here not

2134
00:46:31,420 --> 00:46:33,109
 

2135
00:46:31,430 --> 00:46:34,519
 specific attacks people have proposed in

2136
00:46:33,099 --> 00:46:34,519
 

2137
00:46:33,109 --> 00:46:36,170
 the past because I want to follow this

2138
00:46:34,509 --> 00:46:36,170
 

2139
00:46:34,519 --> 00:46:37,700
 general framework of predicted gradient

2140
00:46:36,160 --> 00:46:37,700
 

2141
00:46:36,170 --> 00:46:39,440
 descent but I think it is worth

2142
00:46:37,690 --> 00:46:39,440
 

2143
00:46:37,700 --> 00:46:40,700
 mentioning one particular type of attack

2144
00:46:39,430 --> 00:46:40,700
 

2145
00:46:39,440 --> 00:46:42,230
 which was actually one of the ones that

2146
00:46:40,690 --> 00:46:42,230
 

2147
00:46:40,700 --> 00:46:44,210
 kind of ignited a lot of the interest in

2148
00:46:42,220 --> 00:46:44,210
 

2149
00:46:42,230 --> 00:46:46,190
 this field which is the fast gradient

2150
00:46:44,200 --> 00:46:46,190
 

2151
00:46:44,210 --> 00:46:49,880
 sign methods this is work by Ian good

2152
00:46:46,180 --> 00:46:49,880
 

2153
00:46:46,190 --> 00:46:51,980
 fellow and others in 2014 so

2154
00:46:49,870 --> 00:46:51,980
 

2155
00:46:49,880 --> 00:46:53,750
 the way this arises from gradient

2156
00:46:51,970 --> 00:46:53,750
 

2157
00:46:51,980 --> 00:46:56,600
 descent at least in our sort of

2158
00:46:53,740 --> 00:46:56,600
 

2159
00:46:53,750 --> 00:46:59,240
 viewpoint is that we can take now our

2160
00:46:56,590 --> 00:46:59,240
 

2161
00:46:56,600 --> 00:47:02,200
 perturbation region Delta to be the L

2162
00:46:59,230 --> 00:47:02,200
 

2163
00:46:59,240 --> 00:47:04,610
 infinity ball we're thinking about a

2164
00:47:02,190 --> 00:47:04,610
 

2165
00:47:02,200 --> 00:47:06,050
 region where the L infinity norm of the

2166
00:47:04,600 --> 00:47:06,050
 

2167
00:47:04,610 --> 00:47:07,520
 perturbation is less than Delta so it's

2168
00:47:06,040 --> 00:47:07,520
 

2169
00:47:06,050 --> 00:47:09,170
 less than Epsilon ie

2170
00:47:07,510 --> 00:47:09,170
 

2171
00:47:07,520 --> 00:47:11,000
 the perturbation each coordinate the

2172
00:47:09,160 --> 00:47:11,000
 

2173
00:47:09,170 --> 00:47:14,000
 perturbation is is between negative

2174
00:47:10,990 --> 00:47:14,000
 

2175
00:47:11,000 --> 00:47:15,260
 epsilon and positive epsilon in this

2176
00:47:13,990 --> 00:47:15,260
 

2177
00:47:14,000 --> 00:47:16,850
 case actually projection is very easy

2178
00:47:15,250 --> 00:47:16,850
 

2179
00:47:15,260 --> 00:47:18,200
 you just clip to the ball so the

2180
00:47:16,840 --> 00:47:18,200
 

2181
00:47:16,850 --> 00:47:19,580
 friction that's one reason why this is a

2182
00:47:18,190 --> 00:47:19,580
 

2183
00:47:18,200 --> 00:47:20,420
 nice norm bound you just clip the

2184
00:47:19,570 --> 00:47:20,420
 

2185
00:47:19,580 --> 00:47:22,910
 entries to the ball that's the

2186
00:47:20,410 --> 00:47:22,910
 

2187
00:47:20,420 --> 00:47:24,920
 projection operator and if you think

2188
00:47:22,900 --> 00:47:24,920
 

2189
00:47:22,910 --> 00:47:29,120
 about what participating descent does in

2190
00:47:24,910 --> 00:47:29,120
 

2191
00:47:24,920 --> 00:47:31,550
 this in this setting if you take a big

2192
00:47:29,110 --> 00:47:31,550
 

2193
00:47:29,120 --> 00:47:33,800
 enough step size in the direction of the

2194
00:47:31,540 --> 00:47:33,800
 

2195
00:47:31,550 --> 00:47:35,540
 gradient you will end up outside the

2196
00:47:33,790 --> 00:47:35,540
 

2197
00:47:33,800 --> 00:47:36,770
 ball right you'll end up outside the

2198
00:47:35,530 --> 00:47:36,770
 

2199
00:47:35,540 --> 00:47:39,620
 ball always because there's always some

2200
00:47:36,760 --> 00:47:39,620
 

2201
00:47:36,770 --> 00:47:40,850
 direction and if you then take a big

2202
00:47:39,610 --> 00:47:40,850
 

2203
00:47:39,620 --> 00:47:43,040
 enough step you'll actually and when you

2204
00:47:40,840 --> 00:47:43,040
 

2205
00:47:40,850 --> 00:47:45,050
 project back you'll actually always be

2206
00:47:43,030 --> 00:47:45,050
 

2207
00:47:43,040 --> 00:47:46,550
 at a corner of the ball right so you

2208
00:47:45,040 --> 00:47:46,550
 

2209
00:47:45,050 --> 00:47:48,230
 basically follow this direct gradient

2210
00:47:46,540 --> 00:47:48,230
 

2211
00:47:46,550 --> 00:47:49,370
 direction you put it back and for a big

2212
00:47:48,220 --> 00:47:49,370
 

2213
00:47:48,230 --> 00:47:51,800
 enough step you can see you'll always

2214
00:47:49,360 --> 00:47:51,800
 

2215
00:47:49,370 --> 00:47:55,910
 hit a corner and that corner is just

2216
00:47:51,790 --> 00:47:55,910
 

2217
00:47:51,800 --> 00:47:57,980
 equal to epsilon times the sign of the

2218
00:47:55,900 --> 00:47:57,980
 

2219
00:47:55,910 --> 00:48:00,320
 gradient in each coordinate right and

2220
00:47:57,970 --> 00:48:00,320
 

2221
00:47:57,980 --> 00:48:02,630
 that is exactly the fast gradient sign

2222
00:48:00,310 --> 00:48:02,630
 

2223
00:48:00,320 --> 00:48:04,160
 method it's very nice because it sort of

2224
00:48:02,620 --> 00:48:04,160
 

2225
00:48:02,630 --> 00:48:06,620
 gives you as big a step as you can

2226
00:48:04,150 --> 00:48:06,620
 

2227
00:48:04,160 --> 00:48:07,910
 possibly take within your ball very

2228
00:48:06,610 --> 00:48:07,910
 

2229
00:48:06,620 --> 00:48:09,500
 cheaply because only take you only to

2230
00:48:07,900 --> 00:48:09,500
 

2231
00:48:07,910 --> 00:48:11,150
 evaluate the greeting at once and then

2232
00:48:09,490 --> 00:48:11,150
 

2233
00:48:09,500 --> 00:48:12,650
 you get that that step there so it's

2234
00:48:11,140 --> 00:48:12,650
 

2235
00:48:11,150 --> 00:48:15,080
 become a very sort of popular technique

2236
00:48:12,640 --> 00:48:15,080
 

2237
00:48:12,650 --> 00:48:18,680
 for doing this all right so let's see

2238
00:48:15,070 --> 00:48:18,680
 

2239
00:48:15,080 --> 00:48:21,230
 how this actually looks in practice and

2240
00:48:18,670 --> 00:48:21,230
 

2241
00:48:18,680 --> 00:48:23,450
 I'm going to apologize now to everyone

2242
00:48:21,220 --> 00:48:23,450
 

2243
00:48:21,230 --> 00:48:25,010
 else because this is 2018 almost does in

2244
00:48:23,440 --> 00:48:25,010
 

2245
00:48:23,450 --> 00:48:28,220
 nineteen and you're gonna see almost

2246
00:48:25,000 --> 00:48:28,220
 

2247
00:48:25,010 --> 00:48:29,660
 entirely Emma statisti toriel so I'm

2248
00:48:28,210 --> 00:48:29,660
 

2249
00:48:28,220 --> 00:48:31,640
 gonna pause it for this in advance the

2250
00:48:29,650 --> 00:48:31,640
 

2251
00:48:29,660 --> 00:48:33,620
 reason is actually not because these are

2252
00:48:31,630 --> 00:48:33,620
 

2253
00:48:31,640 --> 00:48:35,030
 the best examples to show attacks in

2254
00:48:33,610 --> 00:48:35,030
 

2255
00:48:33,620 --> 00:48:36,410
 because we know we can attack as Alex

2256
00:48:35,020 --> 00:48:36,410
 

2257
00:48:35,030 --> 00:48:38,810
 Otte imagenet we actually have an

2258
00:48:36,400 --> 00:48:38,810
 

2259
00:48:36,410 --> 00:48:40,790
 example of code to attack on a larger

2260
00:48:38,800 --> 00:48:40,790
 

2261
00:48:38,810 --> 00:48:42,200
 problem here but for some of the defense

2262
00:48:40,780 --> 00:48:42,200
 

2263
00:48:40,790 --> 00:48:45,140
 mechanisms especially the the

2264
00:48:42,190 --> 00:48:45,140
 

2265
00:48:42,200 --> 00:48:46,940
 combinatorial optimization methods we're

2266
00:48:45,130 --> 00:48:46,940
 

2267
00:48:45,140 --> 00:48:48,590
 still kind of at the scale of imagenet

2268
00:48:46,930 --> 00:48:48,590
 

2269
00:48:46,940 --> 00:48:50,360
 here so I want to be very explicit about

2270
00:48:48,580 --> 00:48:50,360
 

2271
00:48:48,590 --> 00:48:52,430
 that is that a lot of these defense

2272
00:48:50,350 --> 00:48:52,430
 

2273
00:48:50,360 --> 00:48:54,500
 techniques do not yet scale to really

2274
00:48:52,420 --> 00:48:54,500
 

2275
00:48:52,430 --> 00:48:56,060
 large problems and so you know so that

2276
00:48:54,490 --> 00:48:56,060
 

2277
00:48:54,500 --> 00:48:57,350
 you also have code that can run this all

2278
00:48:56,050 --> 00:48:57,350
 

2279
00:48:56,060 --> 00:48:59,180
 and you can run it maybe on one key P

2280
00:48:57,340 --> 00:48:59,180
 

2281
00:48:57,350 --> 00:49:00,200
 you not you know in a few minutes not

2282
00:48:59,170 --> 00:49:00,200
 

2283
00:48:59,180 --> 00:49:01,819
 days

2284
00:49:00,190 --> 00:49:01,819
 

2285
00:49:00,200 --> 00:49:03,469
 we are gonna we are using

2286
00:49:01,809 --> 00:49:03,469
 

2287
00:49:01,819 --> 00:49:05,509
 here as an example and in particular

2288
00:49:03,459 --> 00:49:05,509
 

2289
00:49:03,469 --> 00:49:07,309
 we're gonna use two networks a two-layer

2290
00:49:05,499 --> 00:49:07,309
 

2291
00:49:05,509 --> 00:49:09,259
 fully connected Network and a six layer

2292
00:49:07,299 --> 00:49:09,259
 

2293
00:49:07,309 --> 00:49:12,380
 convolutional network to illustrate a

2294
00:49:09,249 --> 00:49:12,380
 

2295
00:49:09,259 --> 00:49:13,910
 lot of these points okay so let's see

2296
00:49:12,370 --> 00:49:13,910
 

2297
00:49:12,380 --> 00:49:15,829
 what these fast gradients sign methods

2298
00:49:13,900 --> 00:49:15,829
 

2299
00:49:13,910 --> 00:49:16,819
 actually do and they're also another

2300
00:49:15,819 --> 00:49:16,819
 

2301
00:49:15,829 --> 00:49:17,809
 thing about and this is these things a

2302
00:49:16,809 --> 00:49:17,809
 

2303
00:49:16,819 --> 00:49:20,209
 little bit more apparent than they were

2304
00:49:17,799 --> 00:49:20,209
 

2305
00:49:17,809 --> 00:49:21,349
 you can't even see them in an image net

2306
00:49:20,199 --> 00:49:21,349
 

2307
00:49:20,209 --> 00:49:24,380
 but you actually can see them here at

2308
00:49:21,339 --> 00:49:24,380
 

2309
00:49:21,349 --> 00:49:26,209
 MMS okay so we're taking a bigger almost

2310
00:49:24,370 --> 00:49:26,209
 

2311
00:49:24,380 --> 00:49:29,209
 like a perceptron and we're gonna take

2312
00:49:26,199 --> 00:49:29,209
 

2313
00:49:26,209 --> 00:49:30,380
 adjust the image in a step of the in the

2314
00:49:29,199 --> 00:49:30,380
 

2315
00:49:29,209 --> 00:49:33,739
 direction of the sign of the gradient

2316
00:49:30,370 --> 00:49:33,739
 

2317
00:49:30,380 --> 00:49:35,089
 using FG SM and we get an image like

2318
00:49:33,729 --> 00:49:35,089
 

2319
00:49:33,739 --> 00:49:36,380
 this right so these things are being

2320
00:49:35,079 --> 00:49:36,380
 

2321
00:49:35,089 --> 00:49:37,609
 adjusted for now I'm actually not

2322
00:49:36,370 --> 00:49:37,609
 

2323
00:49:36,380 --> 00:49:39,199
 worrying about there being negative

2324
00:49:37,599 --> 00:49:39,199
 

2325
00:49:37,609 --> 00:49:40,789
 pixels you can do all this the same

2326
00:49:39,189 --> 00:49:40,789
 

2327
00:49:39,199 --> 00:49:43,190
 thing if you just clip the absolute

2328
00:49:40,779 --> 00:49:43,190
 

2329
00:49:40,789 --> 00:49:44,390
 range of the pixels being between zero

2330
00:49:43,180 --> 00:49:44,390
 

2331
00:49:43,190 --> 00:49:45,619
 and one but these are just numbers as

2332
00:49:44,380 --> 00:49:45,619
 

2333
00:49:44,390 --> 00:49:48,859
 far as the Fed is concerned so I'm not

2334
00:49:45,609 --> 00:49:48,859
 

2335
00:49:45,619 --> 00:49:50,180
 gonna worry much about that do the same

2336
00:49:48,849 --> 00:49:50,180
 

2337
00:49:48,859 --> 00:49:51,499
 thing for a confident of course they're

2338
00:49:50,170 --> 00:49:51,499
 

2339
00:49:50,180 --> 00:49:52,699
 all differentiable so you can do this

2340
00:49:51,489 --> 00:49:52,699
 

2341
00:49:51,499 --> 00:49:55,039
 whatever your classifier is you can

2342
00:49:52,689 --> 00:49:55,039
 

2343
00:49:52,699 --> 00:49:57,079
 still do it you get something that looks

2344
00:49:55,029 --> 00:49:57,079
 

2345
00:49:55,039 --> 00:49:58,640
 kind of similar maybe a little less sort

2346
00:49:57,069 --> 00:49:58,640
 

2347
00:49:57,079 --> 00:50:00,789
 of splotchy little few if it allows

2348
00:49:58,630 --> 00:50:00,789
 

2349
00:49:58,640 --> 00:50:03,559
 speckled noise but it looks very similar

2350
00:50:00,779 --> 00:50:03,559
 

2351
00:50:00,789 --> 00:50:05,059
 and if we look at the actual test error

2352
00:50:03,549 --> 00:50:05,059
 

2353
00:50:03,559 --> 00:50:06,559
 of these things so this is the test

2354
00:50:05,049 --> 00:50:06,559
 

2355
00:50:05,059 --> 00:50:09,170
 error on them this with a perturbation

2356
00:50:06,549 --> 00:50:09,170
 

2357
00:50:06,559 --> 00:50:11,239
 of size 0.1 which is relatively small

2358
00:50:09,160 --> 00:50:11,239
 

2359
00:50:09,170 --> 00:50:14,089
 right that's that's not gonna change our

2360
00:50:11,229 --> 00:50:14,089
 

2361
00:50:11,239 --> 00:50:16,190
 perception of the image here then on

2362
00:50:14,079 --> 00:50:16,190
 

2363
00:50:14,089 --> 00:50:17,690
 clean accuracy these things both do

2364
00:50:16,180 --> 00:50:17,690
 

2365
00:50:16,190 --> 00:50:19,339
 quite well you have you know maybe 3%

2366
00:50:17,680 --> 00:50:19,339
 

2367
00:50:17,690 --> 00:50:20,749
 and 1% again these are not even well

2368
00:50:19,329 --> 00:50:20,749
 

2369
00:50:19,339 --> 00:50:23,499
 trained comp Nets here we're just sort

2370
00:50:20,739 --> 00:50:23,499
 

2371
00:50:20,749 --> 00:50:26,180
 of running something quickly and

2372
00:50:23,489 --> 00:50:26,180
 

2373
00:50:23,499 --> 00:50:28,880
 unfortunately though when you run this

2374
00:50:26,170 --> 00:50:28,880
 

2375
00:50:26,180 --> 00:50:32,329
 attack method you get a very large error

2376
00:50:28,870 --> 00:50:32,329
 

2377
00:50:28,880 --> 00:50:33,559
 for both these things okay so this is

2378
00:50:32,319 --> 00:50:33,559
 

2379
00:50:32,329 --> 00:50:34,819
 this is maybe not good but they rarely

2380
00:50:33,549 --> 00:50:34,819
 

2381
00:50:33,559 --> 00:50:36,469
 actually this is really simple method

2382
00:50:34,809 --> 00:50:36,469
 

2383
00:50:34,819 --> 00:50:38,269
 and we can actually even do better than

2384
00:50:36,459 --> 00:50:38,269
 

2385
00:50:36,469 --> 00:50:40,130
 what I'm showing you here so the next

2386
00:50:38,259 --> 00:50:40,130
 

2387
00:50:38,269 --> 00:50:41,479
 step is just to actually run this thing

2388
00:50:40,120 --> 00:50:41,479
 

2389
00:50:40,130 --> 00:50:43,190
 I showed you earlier which is a more

2390
00:50:41,469 --> 00:50:43,190
 

2391
00:50:41,479 --> 00:50:44,599
 fine-grain perfectly grating descent

2392
00:50:43,180 --> 00:50:44,599
 

2393
00:50:43,190 --> 00:50:46,609
 method so rather than taking sort of one

2394
00:50:44,589 --> 00:50:46,609
 

2395
00:50:44,599 --> 00:50:47,900
 big step maybe the first addition point

2396
00:50:46,599 --> 00:50:47,900
 

2397
00:50:46,609 --> 00:50:50,059
 and the first direction pointed to that

2398
00:50:47,890 --> 00:50:50,059
 

2399
00:50:47,900 --> 00:50:51,979
 corner but the top the top right corner

2400
00:50:50,049 --> 00:50:51,979
 

2401
00:50:50,059 --> 00:50:54,049
 but a top left corner here is actually

2402
00:50:51,969 --> 00:50:54,049
 

2403
00:50:51,979 --> 00:50:55,400
 has higher loss so you can imagine if he

2404
00:50:54,039 --> 00:50:55,400
 

2405
00:50:54,049 --> 00:50:57,229
 takes sort of small steps in the

2406
00:50:55,390 --> 00:50:57,229
 

2407
00:50:55,400 --> 00:50:59,029
 gradient you're gonna end up at a better

2408
00:50:57,219 --> 00:50:59,029
 

2409
00:50:57,229 --> 00:51:00,619
 point over all right so you thought that

2410
00:50:59,019 --> 00:51:00,619
 

2411
00:50:59,029 --> 00:51:01,999
 this sort of seems intuitive right and

2412
00:51:00,609 --> 00:51:01,999
 

2413
00:51:00,619 --> 00:51:03,469
 then you once you get to that corner you

2414
00:51:01,989 --> 00:51:03,469
 

2415
00:51:01,999 --> 00:51:05,420
 sort of start trying to escape but just

2416
00:51:03,459 --> 00:51:05,420
 

2417
00:51:03,469 --> 00:51:07,459
 keep getting predicted back onto the

2418
00:51:05,410 --> 00:51:07,459
 

2419
00:51:05,420 --> 00:51:08,539
 ball there and this is the productive

2420
00:51:07,449 --> 00:51:08,539
 

2421
00:51:07,459 --> 00:51:11,390
 gradient descent method or this

2422
00:51:08,529 --> 00:51:11,390
 

2423
00:51:08,539 --> 00:51:13,489
 invariance are the method it's much

2424
00:51:11,380 --> 00:51:13,489
 

2425
00:51:11,390 --> 00:51:14,540
 slower than FG SM because you are taking

2426
00:51:13,479 --> 00:51:14,540
 

2427
00:51:13,489 --> 00:51:16,580
 sort of multiple stuff

2428
00:51:14,530 --> 00:51:16,580
 

2429
00:51:14,540 --> 00:51:19,970
 here but it typically finds a better

2430
00:51:16,570 --> 00:51:19,970
 

2431
00:51:16,580 --> 00:51:21,290
 Optima for this problem one thing which

2432
00:51:19,960 --> 00:51:21,290
 

2433
00:51:19,970 --> 00:51:22,820
 I'm gonna only mentioned bleep which is

2434
00:51:21,280 --> 00:51:22,820
 

2435
00:51:21,290 --> 00:51:25,160
 actually really important here in

2436
00:51:22,810 --> 00:51:25,160
 

2437
00:51:22,820 --> 00:51:28,610
 practice if you do this is the following

2438
00:51:25,150 --> 00:51:28,610
 

2439
00:51:25,160 --> 00:51:31,880
 so if you run PhD to run an attack don't

2440
00:51:28,600 --> 00:51:31,880
 

2441
00:51:28,610 --> 00:51:33,650
 just run normal PGD ron was actually

2442
00:51:31,870 --> 00:51:33,650
 

2443
00:51:31,880 --> 00:51:35,270
 called projected steepest descent

2444
00:51:33,640 --> 00:51:35,270
 

2445
00:51:33,650 --> 00:51:38,270
 actually projected unprinted that

2446
00:51:35,260 --> 00:51:38,270
 

2447
00:51:35,270 --> 00:51:41,000
 normalize that steepest descent so the

2448
00:51:38,260 --> 00:51:41,000
 

2449
00:51:38,270 --> 00:51:43,490
 idea here is that at the actual examples

2450
00:51:40,990 --> 00:51:43,490
 

2451
00:51:41,000 --> 00:51:45,650
 the gradient of the loss function is

2452
00:51:43,480 --> 00:51:45,650
 

2453
00:51:43,490 --> 00:51:48,410
 often very small so you have to take a

2454
00:51:45,640 --> 00:51:48,410
 

2455
00:51:45,650 --> 00:51:50,060
 really big step size to get anywhere but

2456
00:51:48,400 --> 00:51:50,060
 

2457
00:51:48,410 --> 00:51:51,830
 then once you get out of that really

2458
00:51:50,050 --> 00:51:51,830
 

2459
00:51:50,060 --> 00:51:53,180
 small region you start sort of taking

2460
00:51:51,820 --> 00:51:53,180
 

2461
00:51:51,830 --> 00:51:54,770
 really big steps then you hit the corner

2462
00:51:53,170 --> 00:51:54,770
 

2463
00:51:53,180 --> 00:51:57,590
 you kind of reduce to like the fast

2464
00:51:54,760 --> 00:51:57,590
 

2465
00:51:54,770 --> 00:51:59,470
 gradient sign method anyway and so what

2466
00:51:57,580 --> 00:51:59,470
 

2467
00:51:57,590 --> 00:52:01,430
 we can actually do is instead of taking

2468
00:51:59,460 --> 00:52:01,430
 

2469
00:51:59,470 --> 00:52:02,750
 gradient steps we actually could just

2470
00:52:01,420 --> 00:52:02,750
 

2471
00:52:01,430 --> 00:52:05,150
 normalize our gradients in the following

2472
00:52:02,740 --> 00:52:05,150
 

2473
00:52:02,750 --> 00:52:06,470
 way instead of sort of taking a step

2474
00:52:05,140 --> 00:52:06,470
 

2475
00:52:05,150 --> 00:52:08,540
 inertia of the gradient we actually take

2476
00:52:06,460 --> 00:52:08,540
 

2477
00:52:06,470 --> 00:52:09,560
 a step in the direction that maximizes

2478
00:52:08,530 --> 00:52:09,560
 

2479
00:52:08,540 --> 00:52:11,750
 some inner product of the gradient

2480
00:52:09,550 --> 00:52:11,750
 

2481
00:52:09,560 --> 00:52:13,940
 that's the term V here except it to some

2482
00:52:11,740 --> 00:52:13,940
 

2483
00:52:11,750 --> 00:52:15,980
 norm constraint on V okay and what this

2484
00:52:13,930 --> 00:52:15,980
 

2485
00:52:13,940 --> 00:52:18,590
 does is this basically searches in some

2486
00:52:15,970 --> 00:52:18,590
 

2487
00:52:15,980 --> 00:52:21,080
 box that's showing here with a dotted

2488
00:52:18,580 --> 00:52:21,080
 

2489
00:52:18,590 --> 00:52:22,670
 line what's the point in that box that

2490
00:52:21,070 --> 00:52:22,670
 

2491
00:52:21,080 --> 00:52:24,710
 maximizes the inner product of the

2492
00:52:22,660 --> 00:52:24,710
 

2493
00:52:22,670 --> 00:52:26,360
 gradient and for example for the L

2494
00:52:24,700 --> 00:52:26,360
 

2495
00:52:24,710 --> 00:52:27,770
 infinity box that will always be one of

2496
00:52:26,350 --> 00:52:27,770
 

2497
00:52:26,360 --> 00:52:32,480
 the corners it's actually very similar

2498
00:52:27,760 --> 00:52:32,480
 

2499
00:52:27,770 --> 00:52:34,880
 derivation as we had for F GSM what this

2500
00:52:32,470 --> 00:52:34,880
 

2501
00:52:32,480 --> 00:52:36,920
 means is if you want to up lent a

2502
00:52:34,870 --> 00:52:36,920
 

2503
00:52:34,880 --> 00:52:38,330
 particular instant method you really and

2504
00:52:36,910 --> 00:52:38,330
 

2505
00:52:36,920 --> 00:52:40,700
 that's all I'll say we do have some more

2506
00:52:38,320 --> 00:52:40,700
 

2507
00:52:38,330 --> 00:52:42,470
 examples and the toriel do this new

2508
00:52:40,690 --> 00:52:42,470
 

2509
00:52:40,700 --> 00:52:43,940
 steepest descent don't do unnormalized

2510
00:52:42,460 --> 00:52:43,940
 

2511
00:52:42,470 --> 00:52:45,650
 sorry it's normalized steepest descent

2512
00:52:43,930 --> 00:52:45,650
 

2513
00:52:43,940 --> 00:52:48,470
 don't do normal to degrading descent

2514
00:52:45,640 --> 00:52:48,470
 

2515
00:52:45,650 --> 00:52:51,530
 because the loss the the the the values

2516
00:52:48,460 --> 00:52:51,530
 

2517
00:52:48,470 --> 00:52:52,670
 of lost here are very different sorry of

2518
00:52:51,520 --> 00:52:52,670
 

2519
00:52:51,530 --> 00:52:55,550
 the gradients are very different over

2520
00:52:52,660 --> 00:52:55,550
 

2521
00:52:52,670 --> 00:52:57,680
 this over this region typically alright

2522
00:52:55,540 --> 00:52:57,680
 

2523
00:52:55,550 --> 00:52:58,880
 so let's see what this looks like now we

2524
00:52:57,670 --> 00:52:58,880
 

2525
00:52:57,680 --> 00:53:02,960
 sort of gone through it in some in some

2526
00:52:58,870 --> 00:53:02,960
 

2527
00:52:58,880 --> 00:53:05,300
 detail so we can do things like apply f

2528
00:53:02,950 --> 00:53:05,300
 

2529
00:53:02,960 --> 00:53:07,010
 gu7 to that we also do FP PGD doesn't

2530
00:53:05,290 --> 00:53:07,010
 

2531
00:53:05,300 --> 00:53:08,450
 look that different actually it's both

2532
00:53:07,000 --> 00:53:08,450
 

2533
00:53:07,010 --> 00:53:09,620
 look that's both fool the classifier

2534
00:53:08,440 --> 00:53:09,620
 

2535
00:53:08,450 --> 00:53:11,960
 into thinking the seven is actually a

2536
00:53:09,610 --> 00:53:11,960
 

2537
00:53:09,620 --> 00:53:13,160
 three but if you look at the actual test

2538
00:53:11,950 --> 00:53:13,160
 

2539
00:53:11,960 --> 00:53:16,400
 error there is quite a big difference

2540
00:53:13,150 --> 00:53:16,400
 

2541
00:53:13,160 --> 00:53:18,650
 here so f gsm you know gets these errors

2542
00:53:16,390 --> 00:53:18,650
 

2543
00:53:16,400 --> 00:53:20,510
 so you know fools 41 percent of the

2544
00:53:18,640 --> 00:53:20,510
 

2545
00:53:18,650 --> 00:53:22,310
 examples on on this end this classifier

2546
00:53:20,500 --> 00:53:22,310
 

2547
00:53:20,510 --> 00:53:25,730
 where as p DD and proves that quite a

2548
00:53:22,300 --> 00:53:25,730
 

2549
00:53:22,310 --> 00:53:26,810
 bit so so there actually is quite a bit

2550
00:53:25,720 --> 00:53:26,810
 

2551
00:53:25,730 --> 00:53:27,550
 of difference in practice on this and

2552
00:53:26,800 --> 00:53:27,550
 

2553
00:53:26,810 --> 00:53:29,020
 this will come

2554
00:53:27,540 --> 00:53:29,020
 

2555
00:53:27,550 --> 00:53:32,980
 back to us and we talk about training

2556
00:53:29,010 --> 00:53:32,980
 

2557
00:53:29,020 --> 00:53:35,860
 robust classifiers okay so two more

2558
00:53:32,970 --> 00:53:35,860
 

2559
00:53:32,980 --> 00:53:37,450
 quick notes here the first one is that

2560
00:53:35,850 --> 00:53:37,450
 

2561
00:53:35,860 --> 00:53:39,250
 what I've described so far as actual

2562
00:53:37,440 --> 00:53:39,250
 

2563
00:53:37,450 --> 00:53:41,950
 what's called an untargeted attack and

2564
00:53:39,240 --> 00:53:41,950
 

2565
00:53:39,250 --> 00:53:44,350
 that we are just trying to maximize the

2566
00:53:41,940 --> 00:53:44,350
 

2567
00:53:41,950 --> 00:53:47,110
 loss no matter where that puts us we can

2568
00:53:44,340 --> 00:53:47,110
 

2569
00:53:44,350 --> 00:53:50,260
 also have to try to both maximize the

2570
00:53:47,100 --> 00:53:50,260
 

2571
00:53:47,110 --> 00:53:52,990
 loss of the true class and minimize the

2572
00:53:50,250 --> 00:53:52,990
 

2573
00:53:50,260 --> 00:53:54,640
 loss of some target class to try to fool

2574
00:53:52,980 --> 00:53:54,640
 

2575
00:53:52,990 --> 00:53:56,590
 the classifier into thinking it's after

2576
00:53:54,630 --> 00:53:56,590
 

2577
00:53:54,640 --> 00:53:58,510
 that target class I'm some very nice

2578
00:53:56,580 --> 00:53:58,510
 

2579
00:53:56,590 --> 00:54:00,340
 thing happens here which is actually

2580
00:53:58,500 --> 00:54:00,340
 

2581
00:53:58,510 --> 00:54:02,500
 gonna be the basis for the more complex

2582
00:54:00,330 --> 00:54:02,500
 

2583
00:54:00,340 --> 00:54:04,470
 relaxations is if your loss function is

2584
00:54:02,490 --> 00:54:04,470
 

2585
00:54:02,500 --> 00:54:07,810
 something like the cross-entropy loss

2586
00:54:04,460 --> 00:54:07,810
 

2587
00:54:04,470 --> 00:54:09,670
 then the difference of two of these loss

2588
00:54:07,800 --> 00:54:09,670
 

2589
00:54:07,810 --> 00:54:11,680
 functions the first term the

2590
00:54:09,660 --> 00:54:11,680
 

2591
00:54:09,670 --> 00:54:14,320
 normalization term actually cancels and

2592
00:54:11,670 --> 00:54:14,320
 

2593
00:54:11,680 --> 00:54:17,440
 so the actual target attack is the same

2594
00:54:14,310 --> 00:54:17,440
 

2595
00:54:14,320 --> 00:54:19,360
 as just maximizing the difference in the

2596
00:54:17,430 --> 00:54:19,360
 

2597
00:54:17,440 --> 00:54:22,060
 class logits that's the output of the

2598
00:54:19,350 --> 00:54:22,060
 

2599
00:54:19,360 --> 00:54:23,920
 linear layer of the classifier over the

2600
00:54:22,050 --> 00:54:23,920
 

2601
00:54:22,060 --> 00:54:25,540
 two classes that you have alright so

2602
00:54:23,910 --> 00:54:25,540
 

2603
00:54:23,920 --> 00:54:27,220
 this last formulation here is actually

2604
00:54:25,530 --> 00:54:27,220
 

2605
00:54:25,540 --> 00:54:28,650
 equivalent to doing that and this is

2606
00:54:27,210 --> 00:54:28,650
 

2607
00:54:27,220 --> 00:54:32,290
 sort of an important an important

2608
00:54:28,640 --> 00:54:32,290
 

2609
00:54:28,650 --> 00:54:34,210
 simplification we can have okay so let's

2610
00:54:32,280 --> 00:54:34,210
 

2611
00:54:32,290 --> 00:54:36,280
 see what this looks like we can you know

2612
00:54:34,200 --> 00:54:36,280
 

2613
00:54:34,210 --> 00:54:39,400
 take a step we can if we maximize take

2614
00:54:36,270 --> 00:54:39,400
 

2615
00:54:36,280 --> 00:54:42,250
 this seven here we maximize the zero

2616
00:54:39,390 --> 00:54:42,250
 

2617
00:54:39,400 --> 00:54:43,960
 class the the probability or really the

2618
00:54:42,240 --> 00:54:43,960
 

2619
00:54:42,250 --> 00:54:46,150
 logit the linear term of the zero class

2620
00:54:43,950 --> 00:54:46,150
 

2621
00:54:43,960 --> 00:54:48,970
 - linear from the seventh class and we

2622
00:54:46,140 --> 00:54:48,970
 

2623
00:54:46,150 --> 00:54:50,830
 get the zero if we do the same thing for

2624
00:54:48,960 --> 00:54:50,830
 

2625
00:54:48,970 --> 00:54:53,500
 a different loss function maximizing the

2626
00:54:50,820 --> 00:54:53,500
 

2627
00:54:50,830 --> 00:54:55,600
 the linear term on the two class and

2628
00:54:53,490 --> 00:54:55,600
 

2629
00:54:53,500 --> 00:54:58,390
 minimizing on the seven class we get the

2630
00:54:55,590 --> 00:54:58,390
 

2631
00:54:55,600 --> 00:55:00,550
 prediction - now one sort of note here

2632
00:54:58,380 --> 00:55:00,550
 

2633
00:54:58,390 --> 00:55:02,230
 is that we might succeed in fooling the

2634
00:55:00,540 --> 00:55:02,230
 

2635
00:55:00,550 --> 00:55:04,300
 classifier even if we don't actually

2636
00:55:02,220 --> 00:55:04,300
 

2637
00:55:02,230 --> 00:55:06,130
 achieve the class we want because the

2638
00:55:04,290 --> 00:55:06,130
 

2639
00:55:04,300 --> 00:55:09,190
 best way to minimize say the to label

2640
00:55:06,120 --> 00:55:09,190
 

2641
00:55:06,130 --> 00:55:12,640
 might be to actually minimize the the

2642
00:55:09,180 --> 00:55:12,640
 

2643
00:55:09,190 --> 00:55:14,800
 one label even more right so we we might

2644
00:55:12,630 --> 00:55:14,800
 

2645
00:55:12,640 --> 00:55:17,110
 not succeed at changing the class to our

2646
00:55:14,790 --> 00:55:17,110
 

2647
00:55:14,800 --> 00:55:20,590
 target but we will succeed ideally and

2648
00:55:17,100 --> 00:55:20,590
 

2649
00:55:17,110 --> 00:55:22,120
 creating an a personal example and the

2650
00:55:20,580 --> 00:55:22,120
 

2651
00:55:20,590 --> 00:55:24,580
 last thing I want to say about these

2652
00:55:22,110 --> 00:55:24,580
 

2653
00:55:22,120 --> 00:55:26,050
 sort of local search of taxa so we can

2654
00:55:24,570 --> 00:55:26,050
 

2655
00:55:24,580 --> 00:55:27,370
 do them in other norms too so I showed

2656
00:55:26,040 --> 00:55:27,370
 

2657
00:55:26,050 --> 00:55:29,200
 everything in terms of the L infinity

2658
00:55:27,360 --> 00:55:29,200
 

2659
00:55:27,370 --> 00:55:30,700
 norm but everything we've done here

2660
00:55:29,190 --> 00:55:30,700
 

2661
00:55:29,200 --> 00:55:32,200
 right the the steepest descent

2662
00:55:30,690 --> 00:55:32,200
 

2663
00:55:30,700 --> 00:55:33,700
 everything normalize deepest descent

2664
00:55:32,190 --> 00:55:33,700
 

2665
00:55:32,200 --> 00:55:35,230
 ever like that can be derived just as

2666
00:55:33,690 --> 00:55:35,230
 

2667
00:55:33,700 --> 00:55:37,089
 easily for other norms for

2668
00:55:35,220 --> 00:55:37,089
 

2669
00:55:35,230 --> 00:55:38,890
 for the Ellen for the l2 norm if the l1

2670
00:55:37,079 --> 00:55:38,890
 

2671
00:55:37,089 --> 00:55:41,589
 norm sort of feel zero norm it's a

2672
00:55:38,880 --> 00:55:41,589
 

2673
00:55:38,890 --> 00:55:44,650
 little trickier and and it all works so

2674
00:55:41,579 --> 00:55:44,650
 

2675
00:55:41,589 --> 00:55:46,810
 for example l2 attacks tend to have more

2676
00:55:44,640 --> 00:55:46,810
 

2677
00:55:44,650 --> 00:55:48,130
 mass in certain regions and less sort of

2678
00:55:46,800 --> 00:55:48,130
 

2679
00:55:46,810 --> 00:55:51,640
 spread out but the nature of the norm

2680
00:55:48,120 --> 00:55:51,640
 

2681
00:55:48,130 --> 00:55:53,349
 itself okay now the last thing I want to

2682
00:55:51,630 --> 00:55:53,349
 

2683
00:55:51,640 --> 00:55:55,570
 say since I'm talking about attacks here

2684
00:55:53,339 --> 00:55:55,570
 

2685
00:55:53,349 --> 00:55:57,310
 is that you might be asking what about

2686
00:55:55,560 --> 00:55:57,310
 

2687
00:55:55,570 --> 00:55:58,420
 all these things I've heard about of you

2688
00:55:57,300 --> 00:55:58,420
 

2689
00:55:57,310 --> 00:55:59,680
 know these different attacks people who

2690
00:55:58,410 --> 00:55:59,680
 

2691
00:55:58,420 --> 00:56:01,960
 propose because been a lot of papers in

2692
00:55:59,670 --> 00:56:01,960
 

2693
00:55:59,680 --> 00:56:02,829
 it and you know with apologies people

2694
00:56:01,950 --> 00:56:02,829
 

2695
00:56:01,960 --> 00:56:04,119
 that propose a lot of these things

2696
00:56:02,819 --> 00:56:04,119
 

2697
00:56:02,829 --> 00:56:05,320
 there's actually some in the audience I

2698
00:56:04,109 --> 00:56:05,320
 

2699
00:56:04,119 --> 00:56:08,410
 know here so we'll see how they how they

2700
00:56:05,310 --> 00:56:08,410
 

2701
00:56:05,320 --> 00:56:09,430
 feel about me afterwards but I think and

2702
00:56:08,400 --> 00:56:09,430
 

2703
00:56:08,410 --> 00:56:10,570
 these papers are of course really

2704
00:56:09,420 --> 00:56:10,570
 

2705
00:56:09,430 --> 00:56:12,670
 important because they were the first to

2706
00:56:10,560 --> 00:56:12,670
 

2707
00:56:10,570 --> 00:56:13,990
 study these attacks in some detail but I

2708
00:56:12,660 --> 00:56:13,990
 

2709
00:56:12,670 --> 00:56:16,510
 think we're actually at a point in the

2710
00:56:13,980 --> 00:56:16,510
 

2711
00:56:13,990 --> 00:56:19,450
 field where it's more valuable to

2712
00:56:16,500 --> 00:56:19,450
 

2713
00:56:16,510 --> 00:56:21,369
 describe the attacks in terms of the

2714
00:56:19,440 --> 00:56:21,369
 

2715
00:56:19,450 --> 00:56:23,410
 perturbation bound you're allowing and

2716
00:56:21,359 --> 00:56:23,410
 

2717
00:56:21,369 --> 00:56:24,820
 the optimization procedure using to

2718
00:56:23,400 --> 00:56:24,820
 

2719
00:56:23,410 --> 00:56:26,230
 optimize that right this is sort of an

2720
00:56:24,810 --> 00:56:26,230
 

2721
00:56:24,820 --> 00:56:28,599
 opinion now but but I think this is a

2722
00:56:26,220 --> 00:56:28,599
 

2723
00:56:26,230 --> 00:56:31,359
 more clear description than relying just

2724
00:56:28,589 --> 00:56:31,359
 

2725
00:56:28,599 --> 00:56:32,680
 on the name or the publication they

2726
00:56:31,349 --> 00:56:32,680
 

2727
00:56:31,359 --> 00:56:34,450
 proposed this because it isn't always

2728
00:56:32,670 --> 00:56:34,450
 

2729
00:56:32,680 --> 00:56:42,400
 clear then what's actually being done

2730
00:56:34,440 --> 00:56:42,400
 

2731
00:56:34,450 --> 00:56:44,079
 here okay moving on now this has been

2732
00:56:42,390 --> 00:56:44,079
 

2733
00:56:42,400 --> 00:56:46,329
 the most common way of solving this

2734
00:56:44,069 --> 00:56:46,329
 

2735
00:56:44,079 --> 00:56:47,319
 inner maximization problem but the thing

2736
00:56:46,319 --> 00:56:47,319
 

2737
00:56:46,329 --> 00:56:48,420
 I want to highlight here is there are

2738
00:56:47,309 --> 00:56:48,420
 

2739
00:56:47,319 --> 00:56:51,550
 other ways as well

2740
00:56:48,410 --> 00:56:51,550
 

2741
00:56:48,420 --> 00:56:53,050
 so in particular we actually can solve

2742
00:56:51,540 --> 00:56:53,050
 

2743
00:56:51,550 --> 00:56:55,660
 this exactly we're still gonna solve the

2744
00:56:53,040 --> 00:56:55,660
 

2745
00:56:53,050 --> 00:56:59,170
 targeted attack version exactly using

2746
00:56:55,650 --> 00:56:59,170
 

2747
00:56:55,660 --> 00:57:00,460
 combinatorial optimization and so to do

2748
00:56:59,160 --> 00:57:00,460
 

2749
00:56:59,170 --> 00:57:02,349
 this I want to actually dive into a

2750
00:57:00,450 --> 00:57:02,349
 

2751
00:57:00,460 --> 00:57:03,400
 little bit of detail here and and throw

2752
00:57:02,339 --> 00:57:03,400
 

2753
00:57:02,349 --> 00:57:07,030
 up a little a little bit more

2754
00:57:03,390 --> 00:57:07,030
 

2755
00:57:03,400 --> 00:57:09,640
 mathematical notation to form the

2756
00:57:07,020 --> 00:57:09,640
 

2757
00:57:07,030 --> 00:57:12,339
 adversary attack as an optimization

2758
00:57:09,630 --> 00:57:12,339
 

2759
00:57:09,640 --> 00:57:13,270
 problem alright so you can write our

2760
00:57:12,329 --> 00:57:13,270
 

2761
00:57:12,339 --> 00:57:14,650
 network but I'm actually gonna be

2762
00:57:13,260 --> 00:57:14,650
 

2763
00:57:13,270 --> 00:57:17,530
 explicit now and say we have say a

2764
00:57:14,640 --> 00:57:17,530
 

2765
00:57:14,650 --> 00:57:19,089
 multi-layer r lu network so our input of

2766
00:57:17,520 --> 00:57:19,089
 

2767
00:57:17,530 --> 00:57:21,790
 the first layer z1 is just the in the

2768
00:57:19,079 --> 00:57:21,790
 

2769
00:57:19,089 --> 00:57:23,470
 input X and after that each layer is the

2770
00:57:21,780 --> 00:57:23,470
 

2771
00:57:21,790 --> 00:57:27,510
 rel u of some linear function of the

2772
00:57:23,460 --> 00:57:27,510
 

2773
00:57:23,470 --> 00:57:31,390
 previous layer and our class logits are

2774
00:57:27,500 --> 00:57:31,390
 

2775
00:57:27,510 --> 00:57:33,760
 a linear function of the the previous

2776
00:57:31,380 --> 00:57:33,760
 

2777
00:57:31,390 --> 00:57:35,859
 layer the second and last layer alright

2778
00:57:33,750 --> 00:57:35,859
 

2779
00:57:33,760 --> 00:57:37,750
 so we don't apply our Lu or even a soft

2780
00:57:35,849 --> 00:57:37,750
 

2781
00:57:35,859 --> 00:57:42,099
 max to the to the last layer it's just

2782
00:57:37,740 --> 00:57:42,099
 

2783
00:57:37,750 --> 00:57:46,210
 the logits it's pre softmax okay so now

2784
00:57:42,089 --> 00:57:46,210
 

2785
00:57:42,099 --> 00:57:48,760
 we can actually write a targeted attack

2786
00:57:46,200 --> 00:57:48,760
 

2787
00:57:46,210 --> 00:57:50,380
 as an optimization problem

2788
00:57:48,750 --> 00:57:50,380
 

2789
00:57:48,760 --> 00:57:52,480
 one to solve but the pointing part this

2790
00:57:50,370 --> 00:57:52,480
 

2791
00:57:50,380 --> 00:57:55,480
 is an optimization formulation of how we

2792
00:57:52,470 --> 00:57:55,480
 

2793
00:57:52,480 --> 00:57:57,370
 think about attacking classifiers all

2794
00:57:55,470 --> 00:57:57,370
 

2795
00:57:55,480 --> 00:58:01,540
 right and the idea here is we're going

2796
00:57:57,360 --> 00:58:01,540
 

2797
00:57:57,370 --> 00:58:05,380
 to minimize the unit basis on the true

2798
00:58:01,530 --> 00:58:05,380
 

2799
00:58:01,540 --> 00:58:08,020
 class minus the unit basis on the target

2800
00:58:05,370 --> 00:58:08,020
 

2801
00:58:05,380 --> 00:58:10,210
 class the inner product of that thing

2802
00:58:08,010 --> 00:58:10,210
 

2803
00:58:08,020 --> 00:58:11,770
 and the last layer which are the class

2804
00:58:10,200 --> 00:58:11,770
 

2805
00:58:10,210 --> 00:58:14,710
 logits so again all we're really doing

2806
00:58:11,760 --> 00:58:14,710
 

2807
00:58:11,770 --> 00:58:17,230
 here is we're minimizing the the class

2808
00:58:14,700 --> 00:58:17,230
 

2809
00:58:14,710 --> 00:58:19,000
 logit of the true class and maximizing

2810
00:58:17,220 --> 00:58:19,000
 

2811
00:58:17,230 --> 00:58:20,620
 the class logit of the target class

2812
00:58:18,990 --> 00:58:20,620
 

2813
00:58:19,000 --> 00:58:21,460
 alright and this is just notation for

2814
00:58:20,610 --> 00:58:21,460
 

2815
00:58:20,620 --> 00:58:22,660
 that so it's important to kind of keep

2816
00:58:21,450 --> 00:58:22,660
 

2817
00:58:21,460 --> 00:58:23,800
 in mind I'm gonna switch this

2818
00:58:22,650 --> 00:58:23,800
 

2819
00:58:22,660 --> 00:58:26,980
 connotation so it's important to kind of

2820
00:58:23,790 --> 00:58:26,980
 

2821
00:58:23,800 --> 00:58:28,180
 keep that in mind subject to now our

2822
00:58:26,970 --> 00:58:28,180
 

2823
00:58:26,980 --> 00:58:29,830
 relative constraints right we have to

2824
00:58:28,170 --> 00:58:29,830
 

2825
00:58:28,180 --> 00:58:31,990
 have you know our next layer be the

2826
00:58:29,820 --> 00:58:31,990
 

2827
00:58:29,830 --> 00:58:33,160
 value of the previous layer of a of a

2828
00:58:31,980 --> 00:58:33,160
 

2829
00:58:31,990 --> 00:58:38,410
 linear function the previous layer and

2830
00:58:33,150 --> 00:58:38,410
 

2831
00:58:33,160 --> 00:58:39,910
 some norm bound constraint okay so the

2832
00:58:38,400 --> 00:58:39,910
 

2833
00:58:38,410 --> 00:58:41,590
 problem here is that this is not a

2834
00:58:39,900 --> 00:58:41,590
 

2835
00:58:39,910 --> 00:58:43,210
 problem that can be solved by any sort

2836
00:58:41,580 --> 00:58:43,210
 

2837
00:58:41,590 --> 00:58:45,340
 of normal optimization propped amaizing

2838
00:58:43,200 --> 00:58:45,340
 

2839
00:58:43,210 --> 00:58:47,200
 right it has a nonlinear equality

2840
00:58:45,330 --> 00:58:47,200
 

2841
00:58:45,340 --> 00:58:49,660
 constraint in it and of course you know

2842
00:58:47,190 --> 00:58:49,660
 

2843
00:58:47,200 --> 00:58:51,640
 this makes it a very hard problem but

2844
00:58:49,650 --> 00:58:51,640
 

2845
00:58:49,660 --> 00:58:53,440
 the key point here is that although it's

2846
00:58:51,630 --> 00:58:53,440
 

2847
00:58:51,640 --> 00:58:55,930
 a little hard to solve and this is one

2848
00:58:53,430 --> 00:58:55,930
 

2849
00:58:53,440 --> 00:58:59,080
 thing we go into a lot of detail with in

2850
00:58:55,920 --> 00:58:59,080
 

2851
00:58:55,930 --> 00:59:00,820
 the notes is that we actually can write

2852
00:58:59,070 --> 00:59:00,820
 

2853
00:58:59,080 --> 00:59:02,590
 this problem equivalently in a form that

2854
00:59:00,810 --> 00:59:02,590
 

2855
00:59:00,820 --> 00:59:04,800
 at least can be solved by standard

2856
00:59:02,580 --> 00:59:04,800
 

2857
00:59:02,590 --> 00:59:07,660
 common toriel solvers so things like

2858
00:59:04,790 --> 00:59:07,660
 

2859
00:59:04,800 --> 00:59:09,460
 integer programming solvers which has

2860
00:59:07,650 --> 00:59:09,460
 

2861
00:59:07,660 --> 00:59:11,500
 been done by some but by us as well some

2862
00:59:09,450 --> 00:59:11,500
 

2863
00:59:09,460 --> 00:59:14,020
 other people in the past as well as

2864
00:59:11,490 --> 00:59:14,020
 

2865
00:59:11,500 --> 00:59:16,480
 things like SMT solvers there's a lot of

2866
00:59:14,010 --> 00:59:16,480
 

2867
00:59:14,020 --> 00:59:19,330
 work on using SMT methods to solve these

2868
00:59:16,470 --> 00:59:19,330
 

2869
00:59:16,480 --> 00:59:21,160
 things now in practice off-the-shelf

2870
00:59:19,320 --> 00:59:21,160
 

2871
00:59:19,330 --> 00:59:23,140
 solvers do things like see flex or OB if

2872
00:59:21,150 --> 00:59:23,140
 

2873
00:59:21,160 --> 00:59:24,550
 you've heard of those they scale maybe

2874
00:59:23,130 --> 00:59:24,550
 

2875
00:59:23,140 --> 00:59:25,540
 till maybe I've had a hundred hidden

2876
00:59:24,540 --> 00:59:25,540
 

2877
00:59:24,550 --> 00:59:28,000
 units we're not we're talking about

2878
00:59:25,530 --> 00:59:28,000
 

2879
00:59:25,540 --> 00:59:30,220
 really really small networks here just

2880
00:59:27,990 --> 00:59:30,220
 

2881
00:59:28,000 --> 00:59:31,750
 to be clear but you can get a reasonably

2882
00:59:30,210 --> 00:59:31,750
 

2883
00:59:30,220 --> 00:59:33,370
 performing like em in this network and

2884
00:59:31,740 --> 00:59:33,370
 

2885
00:59:31,750 --> 00:59:35,290
 actually verify it formally which is

2886
00:59:33,360 --> 00:59:35,290
 

2887
00:59:33,370 --> 00:59:36,730
 kind of cool you can she can check for

2888
00:59:35,280 --> 00:59:36,730
 

2889
00:59:35,290 --> 00:59:40,030
 again an example you know what's the

2890
00:59:36,720 --> 00:59:40,030
 

2891
00:59:36,730 --> 00:59:41,980
 worst you could do on any given task one

2892
00:59:40,020 --> 00:59:41,980
 

2893
00:59:40,030 --> 00:59:43,750
 of the key challenges of this actually

2894
00:59:41,970 --> 00:59:43,750
 

2895
00:59:41,980 --> 00:59:46,240
 ends up being at just computing

2896
00:59:43,740 --> 00:59:46,240
 

2897
00:59:43,750 --> 00:59:47,410
 element-wise bounds on the activations

2898
00:59:46,230 --> 00:59:47,410
 

2899
00:59:46,240 --> 00:59:50,170
 so you need to be able to basically

2900
00:59:47,400 --> 00:59:50,170
 

2901
00:59:47,410 --> 00:59:52,150
 compute lower and upper bounds on the

2902
00:59:50,160 --> 00:59:52,150
 

2903
00:59:50,170 --> 00:59:54,460
 linear terms before you go into the rel

2904
00:59:52,140 --> 00:59:54,460
 

2905
00:59:52,150 --> 00:59:55,900
 you this is actually gonna be a thing

2906
00:59:54,450 --> 00:59:55,900
 

2907
00:59:54,460 --> 00:59:57,550
 that comes up later also we talk about

2908
00:59:55,890 --> 00:59:57,550
 

2909
00:59:55,900 --> 00:59:59,830
 convex methods so I just want to mention

2910
00:59:57,540 --> 00:59:59,830
 

2911
00:59:57,550 --> 01:00:01,570
 this here briefly it's actually quite

2912
00:59:59,820 --> 01:00:01,570
 

2913
00:59:59,830 --> 01:00:03,570
 easy to come up with simple bounds

2914
01:00:01,560 --> 01:00:03,570
 

2915
01:00:01,570 --> 01:00:07,900
 on activations so for example if I have

2916
01:00:03,560 --> 01:00:07,900
 

2917
01:00:03,570 --> 01:00:09,820
 some some activation Z where I have an

2918
01:00:07,890 --> 01:00:09,820
 

2919
01:00:07,900 --> 01:00:11,800
 upper and lower bound on bat and I want

2920
01:00:09,810 --> 01:00:11,800
 

2921
01:00:09,820 --> 01:00:13,480
 to upper and lower bound a linear

2922
01:00:11,790 --> 01:00:13,480
 

2923
01:00:11,800 --> 01:00:15,940
 function of that I can just take the

2924
01:00:13,470 --> 01:00:15,940
 

2925
01:00:13,480 --> 01:00:18,850
 positive and negative parts of my of my

2926
01:00:15,930 --> 01:00:18,850
 

2927
01:00:15,940 --> 01:00:20,530
 W matrix and do it this way but the

2928
01:00:18,840 --> 01:00:20,530
 

2929
01:00:18,850 --> 01:00:21,940
 actual thing here was what was the

2930
01:00:20,520 --> 01:00:21,940
 

2931
01:00:20,530 --> 01:00:23,290
 figures a little better to show this

2932
01:00:21,930 --> 01:00:23,290
 

2933
01:00:21,940 --> 01:00:25,540
 what's really happening here is we're

2934
01:00:23,280 --> 01:00:25,540
 

2935
01:00:23,290 --> 01:00:27,100
 propagating intervals to the network so

2936
01:00:25,530 --> 01:00:27,100
 

2937
01:00:25,540 --> 01:00:28,710
 we're you know if you just run the point

2938
01:00:27,090 --> 01:00:28,710
 

2939
01:00:27,100 --> 01:00:31,210
 to the network it produces some output

2940
01:00:28,700 --> 01:00:31,210
 

2941
01:00:28,710 --> 01:00:33,220
 but if you actually think about a region

2942
01:00:31,200 --> 01:00:33,220
 

2943
01:00:31,210 --> 01:00:34,750
 around that point that region will

2944
01:00:33,210 --> 01:00:34,750
 

2945
01:00:33,220 --> 01:00:36,640
 similarly propagate through the network

2946
01:00:34,740 --> 01:00:36,640
 

2947
01:00:34,750 --> 01:00:37,960
 and really typically grow in size this

2948
01:00:36,630 --> 01:00:37,960
 

2949
01:00:36,640 --> 01:00:39,160
 goes to the network that's all we're

2950
01:00:37,950 --> 01:00:39,160
 

2951
01:00:37,960 --> 01:00:41,890
 doing here we're forming these interval

2952
01:00:39,150 --> 01:00:41,890
 

2953
01:00:39,160 --> 01:00:43,270
 bounds to kind of show what sorts of

2954
01:00:41,880 --> 01:00:43,270
 

2955
01:00:41,890 --> 01:00:46,150
 regions you can achieve with our

2956
01:00:43,260 --> 01:00:46,150
 

2957
01:00:43,270 --> 01:00:49,000
 classifier what's going to return when

2958
01:00:46,140 --> 01:00:49,000
 

2959
01:00:46,150 --> 01:00:50,200
 we talk about convex relaxations all

2960
01:00:48,990 --> 01:00:50,200
 

2961
01:00:49,000 --> 01:00:53,950
 right so the last thing I want to say

2962
01:00:50,190 --> 01:00:53,950
 

2963
01:00:50,200 --> 01:00:56,860
 here is just talk about the fact that we

2964
01:00:53,940 --> 01:00:56,860
 

2965
01:00:53,950 --> 01:00:59,590
 can use this technique to certify

2966
01:00:56,850 --> 01:00:59,590
 

2967
01:00:56,860 --> 01:01:01,210
 robustness of course of a classifier and

2968
01:00:59,580 --> 01:01:01,210
 

2969
01:00:59,590 --> 01:01:02,260
 actually we don't even need to solve the

2970
01:01:01,200 --> 01:01:02,260
 

2971
01:01:01,210 --> 01:01:05,110
 problem we don't even actually need to

2972
01:01:02,250 --> 01:01:05,110
 

2973
01:01:02,260 --> 01:01:06,490
 find the or know about we need to solve

2974
01:01:05,100 --> 01:01:06,490
 

2975
01:01:05,110 --> 01:01:08,440
 it we only if you need to even know what

2976
01:01:06,480 --> 01:01:08,440
 

2977
01:01:06,490 --> 01:01:09,760
 the solution is all we need to know to

2978
01:01:08,430 --> 01:01:09,760
 

2979
01:01:08,440 --> 01:01:11,530
 know whether we can certified example or

2980
01:01:09,750 --> 01:01:11,530
 

2981
01:01:09,760 --> 01:01:14,590
 not is the objective value of that

2982
01:01:11,520 --> 01:01:14,590
 

2983
01:01:11,530 --> 01:01:17,490
 solution so let me sort of just sort of

2984
01:01:14,580 --> 01:01:17,490
 

2985
01:01:14,590 --> 01:01:19,900
 go to that what I mean by that so

2986
01:01:17,480 --> 01:01:19,900
 

2987
01:01:17,490 --> 01:01:21,250
 remember our objective that we're trying

2988
01:01:19,890 --> 01:01:21,250
 

2989
01:01:19,900 --> 01:01:23,380
 to optimize in the optimization

2990
01:01:21,240 --> 01:01:23,380
 

2991
01:01:21,250 --> 01:01:24,040
 formulation of these attacks is the

2992
01:01:23,370 --> 01:01:24,040
 

2993
01:01:23,380 --> 01:01:27,370
 following

2994
01:01:24,030 --> 01:01:27,370
 

2995
01:01:24,040 --> 01:01:29,920
 we're trying to minimize the class logit

2996
01:01:27,360 --> 01:01:29,920
 

2997
01:01:27,370 --> 01:01:32,260
 of the true class and maximize the class

2998
01:01:29,910 --> 01:01:32,260
 

2999
01:01:29,920 --> 01:01:35,740
 logit of the other class some target

3000
01:01:32,250 --> 01:01:35,740
 

3001
01:01:32,260 --> 01:01:38,200
 class so if i solve this problem and the

3002
01:01:35,730 --> 01:01:38,200
 

3003
01:01:35,740 --> 01:01:41,260
 result is negative that means the target

3004
01:01:38,190 --> 01:01:41,260
 

3005
01:01:38,200 --> 01:01:44,620
 class's activation write probability is

3006
01:01:41,250 --> 01:01:44,620
 

3007
01:01:41,260 --> 01:01:46,000
 higher now than the true class and so

3008
01:01:44,610 --> 01:01:46,000
 

3009
01:01:44,620 --> 01:01:49,180
 this means we have an adversarial

3010
01:01:45,990 --> 01:01:49,180
 

3011
01:01:46,000 --> 01:01:51,820
 example on the other hand if I solve

3012
01:01:49,170 --> 01:01:51,820
 

3013
01:01:49,180 --> 01:01:54,790
 this same thing and I found my objective

3014
01:01:51,810 --> 01:01:54,790
 

3015
01:01:51,820 --> 01:01:57,760
 value is positive this means that there

3016
01:01:54,780 --> 01:01:57,760
 

3017
01:01:54,790 --> 01:02:01,420
 is no adversarial example at all right

3018
01:01:57,750 --> 01:02:01,420
 

3019
01:01:57,760 --> 01:02:03,790
 because the class probability of the

3020
01:02:01,410 --> 01:02:03,790
 

3021
01:02:01,420 --> 01:02:06,310
 true class is still higher than the

3022
01:02:03,780 --> 01:02:06,310
 

3023
01:02:03,790 --> 01:02:08,500
 probability of the target class so

3024
01:02:06,300 --> 01:02:08,500
 

3025
01:02:06,310 --> 01:02:10,330
 there's no method can't come up with any

3026
01:02:08,490 --> 01:02:10,330
 

3027
01:02:08,500 --> 01:02:13,150
 they will change the label at this

3028
01:02:10,320 --> 01:02:13,150
 

3029
01:02:10,330 --> 01:02:15,100
 example so just to illustrate here if he

3030
01:02:13,140 --> 01:02:15,100
 

3031
01:02:13,150 --> 01:02:15,400
 has a seven here say we say we solve

3032
01:02:15,090 --> 01:02:15,400
 

3033
01:02:15,100 --> 01:02:16,930
 some

3034
01:02:15,390 --> 01:02:16,930
 

3035
01:02:15,400 --> 01:02:19,029
 problem where we're trying to have a

3036
01:02:16,920 --> 01:02:19,029
 

3037
01:02:16,930 --> 01:02:21,910
 targeted attack on the class zero so

3038
01:02:19,019 --> 01:02:21,910
 

3039
01:02:19,029 --> 01:02:24,309
 we're maximize minimizing the logit on

3040
01:02:21,900 --> 01:02:24,309
 

3041
01:02:21,910 --> 01:02:26,650
 unit seven and maximizing it on unit

3042
01:02:24,299 --> 01:02:26,650
 

3043
01:02:24,309 --> 01:02:29,140
 zero and this is negative that means we

3044
01:02:26,640 --> 01:02:29,140
 

3045
01:02:26,650 --> 01:02:30,520
 have an adversarial example it actually

3046
01:02:29,130 --> 01:02:30,520
 

3047
01:02:29,140 --> 01:02:32,170
 doesn't still necessarily change the

3048
01:02:30,510 --> 01:02:32,170
 

3049
01:02:30,520 --> 01:02:34,480
 class to be a zero but it's an

3050
01:02:32,160 --> 01:02:34,480
 

3051
01:02:32,170 --> 01:02:36,010
 adversarial example whereas if we do

3052
01:02:34,470 --> 01:02:36,010
 

3053
01:02:34,480 --> 01:02:39,190
 something like this and we find that

3054
01:02:36,000 --> 01:02:39,190
 

3055
01:02:36,010 --> 01:02:42,910
 we're not trying to minimize the or

3056
01:02:39,180 --> 01:02:42,910
 

3057
01:02:39,190 --> 01:02:44,079
 maximize the logit on class one then we

3058
01:02:42,900 --> 01:02:44,079
 

3059
01:02:42,910 --> 01:02:45,730
 and this is positive then we actually

3060
01:02:44,069 --> 01:02:45,730
 

3061
01:02:44,079 --> 01:02:47,710
 know there's no adverse real example at

3062
01:02:45,720 --> 01:02:47,710
 

3063
01:02:45,730 --> 01:02:49,779
 all that can make this classifier

3064
01:02:47,700 --> 01:02:49,779
 

3065
01:02:47,710 --> 01:02:51,430
 predict class one okay so this is the

3066
01:02:49,769 --> 01:02:51,430
 

3067
01:02:49,779 --> 01:02:52,569
 sort of fundamental ideas and we

3068
01:02:51,420 --> 01:02:52,569
 

3069
01:02:51,430 --> 01:02:53,500
 actually have some against some code you

3070
01:02:52,559 --> 01:02:53,500
 

3071
01:02:52,569 --> 01:02:54,789
 can play with where you can after you

3072
01:02:53,490 --> 01:02:54,789
 

3073
01:02:53,500 --> 01:02:57,250
 can use a linear and integer programming

3074
01:02:54,779 --> 01:02:57,250
 

3075
01:02:54,789 --> 01:02:58,839
 solver to formally verify at least some

3076
01:02:57,240 --> 01:02:58,839
 

3077
01:02:57,250 --> 01:03:00,789
 small networks but still image net are

3078
01:02:58,829 --> 01:03:00,789
 

3079
01:02:58,839 --> 01:03:04,029
 so hypnotic still M this size networks

3080
01:03:00,779 --> 01:03:04,029
 

3081
01:03:00,789 --> 01:03:07,779
 not image that size network size okay so

3082
01:03:04,019 --> 01:03:07,779
 

3083
01:03:04,029 --> 01:03:10,559
 lastly before I move on to the to the

3084
01:03:07,769 --> 01:03:10,559
 

3085
01:03:07,779 --> 01:03:12,880
 next section here I want to talk about

3086
01:03:10,549 --> 01:03:12,880
 

3087
01:03:10,559 --> 01:03:14,650
 convex relaxation so this is the third

3088
01:03:12,870 --> 01:03:14,650
 

3089
01:03:12,880 --> 01:03:16,270
 point so talked about sort of local

3090
01:03:14,640 --> 01:03:16,270
 

3091
01:03:14,650 --> 01:03:18,160
 solutions those are sort of lower bounds

3092
01:03:16,260 --> 01:03:18,160
 

3093
01:03:16,270 --> 01:03:20,349
 than subjective we can also talk about

3094
01:03:18,150 --> 01:03:20,349
 

3095
01:03:18,160 --> 01:03:22,569
 exact solutions and finally we can talk

3096
01:03:20,339 --> 01:03:22,569
 

3097
01:03:20,349 --> 01:03:24,549
 about convex relaxations which provide

3098
01:03:22,559 --> 01:03:24,549
 

3099
01:03:22,569 --> 01:03:27,400
 upper bounds on the solution to this

3100
01:03:24,539 --> 01:03:27,400
 

3101
01:03:24,549 --> 01:03:29,650
 problem okay so how do these comment

3102
01:03:27,390 --> 01:03:29,650
 

3103
01:03:27,400 --> 01:03:32,589
 relaxations work there are actually

3104
01:03:29,640 --> 01:03:32,589
 

3105
01:03:29,650 --> 01:03:35,319
 several ways you can do this one of them

3106
01:03:32,579 --> 01:03:35,319
 

3107
01:03:32,589 --> 01:03:38,440
 is based essentially on relaxing the

3108
01:03:35,309 --> 01:03:38,440
 

3109
01:03:35,319 --> 01:03:41,230
 integer programming formulation of the

3110
01:03:38,430 --> 01:03:41,230
 

3111
01:03:38,440 --> 01:03:43,420
 verification procedure so the idea here

3112
01:03:41,220 --> 01:03:43,420
 

3113
01:03:41,230 --> 01:03:44,859
 is that the integer program formation

3114
01:03:43,410 --> 01:03:44,859
 

3115
01:03:43,420 --> 01:03:46,900
 had these hard constraints that

3116
01:03:44,849 --> 01:03:46,900
 

3117
01:03:44,859 --> 01:03:49,329
 basically the post activation had to be

3118
01:03:46,890 --> 01:03:49,329
 

3119
01:03:46,900 --> 01:03:51,549
 the rel u of this previous layers linear

3120
01:03:49,319 --> 01:03:51,549
 

3121
01:03:49,329 --> 01:03:52,809
 function right within some bounded range

3122
01:03:51,539 --> 01:03:52,809
 

3123
01:03:51,549 --> 01:03:54,430
 actually because we actually had an

3124
01:03:52,799 --> 01:03:54,430
 

3125
01:03:52,809 --> 01:03:57,670
 upper and lower bound that these could

3126
01:03:54,420 --> 01:03:57,670
 

3127
01:03:54,430 --> 01:04:01,270
 attain now what we can do instead is

3128
01:03:57,660 --> 01:04:01,270
 

3129
01:03:57,670 --> 01:04:03,700
 replace that non convex set with its

3130
01:04:01,260 --> 01:04:03,700
 

3131
01:04:01,270 --> 01:04:06,180
 convex relaxation which means that the

3132
01:04:03,690 --> 01:04:06,180
 

3133
01:04:03,700 --> 01:04:08,799
 the next layer and the previous layer

3134
01:04:06,170 --> 01:04:08,799
 

3135
01:04:06,180 --> 01:04:10,900
 they don't lie on the rel you anymore

3136
01:04:08,789 --> 01:04:10,900
 

3137
01:04:08,799 --> 01:04:13,450
 they now lie within some relaxed linear

3138
01:04:10,890 --> 01:04:13,450
 

3139
01:04:10,900 --> 01:04:15,730
 set and the cool thing about this is

3140
01:04:13,440 --> 01:04:15,730
 

3141
01:04:13,450 --> 01:04:16,960
 that if you relax the integer program

3142
01:04:15,720 --> 01:04:16,960
 

3143
01:04:15,730 --> 01:04:18,460
 this way it's actually a very sort of

3144
01:04:16,950 --> 01:04:18,460
 

3145
01:04:16,960 --> 01:04:20,140
 simple straightforward relaxation of the

3146
01:04:18,450 --> 01:04:20,140
 

3147
01:04:18,460 --> 01:04:24,849
 of the linear program of the integer

3148
01:04:20,130 --> 01:04:24,849
 

3149
01:04:20,140 --> 01:04:27,299
 program you get a linear program now and

3150
01:04:24,839 --> 01:04:27,299
 

3151
01:04:24,849 --> 01:04:29,080
 linear programs they're actually are

3152
01:04:27,289 --> 01:04:29,080
 

3153
01:04:27,299 --> 01:04:31,630
 efficient polynomial time

3154
01:04:29,070 --> 01:04:31,630
 

3155
01:04:29,080 --> 01:04:32,740
 solving them so unlike commentary op

3156
01:04:31,620 --> 01:04:32,740
 

3157
01:04:31,630 --> 01:04:36,870
 station we actually expect that we

3158
01:04:32,730 --> 01:04:36,870
 

3159
01:04:32,740 --> 01:04:36,870
 sometimes can really solve these things

3160
01:04:37,250 --> 01:04:37,250
 

3161
01:04:37,260 --> 01:04:43,240
 okay so a a quick sort of note on this

3162
01:04:41,580 --> 01:04:43,240
 

3163
01:04:41,590 --> 01:04:46,090
 another way of sort of viewing this is

3164
01:04:43,230 --> 01:04:46,090
 

3165
01:04:43,240 --> 01:04:47,740
 that if you take the norm ball and sort

3166
01:04:46,080 --> 01:04:47,740
 

3167
01:04:46,090 --> 01:04:49,300
 of feed it to the network that first

3168
01:04:47,730 --> 01:04:49,300
 

3169
01:04:47,740 --> 01:04:51,850
 figure there shows kind of some complex

3170
01:04:49,290 --> 01:04:51,850
 

3171
01:04:49,300 --> 01:04:53,320
 shape and what we're doing effectively

3172
01:04:51,840 --> 01:04:53,320
 

3173
01:04:51,850 --> 01:04:55,060
 is we're relaxing that shape or thinking

3174
01:04:53,310 --> 01:04:55,060
 

3175
01:04:53,320 --> 01:04:56,890
 about an outer bound on that shape that

3176
01:04:55,050 --> 01:04:56,890
 

3177
01:04:55,060 --> 01:04:59,560
 gives us more freedom in choosing

3178
01:04:56,880 --> 01:04:59,560
 

3179
01:04:56,890 --> 01:05:02,140
 effectively or adverse sail examples now

3180
01:04:59,550 --> 01:05:02,140
 

3181
01:04:59,560 --> 01:05:04,570
 what this means is that the objective of

3182
01:05:02,130 --> 01:05:04,570
 

3183
01:05:02,140 --> 01:05:06,100
 a targeted attack for the linear program

3184
01:05:04,560 --> 01:05:06,100
 

3185
01:05:04,570 --> 01:05:08,410
 is gonna be actually a lower bound on

3186
01:05:06,090 --> 01:05:08,410
 

3187
01:05:06,100 --> 01:05:09,760
 the objective of the true thing and this

3188
01:05:08,400 --> 01:05:09,760
 

3189
01:05:08,410 --> 01:05:10,630
 will come in handy in a second when I

3190
01:05:09,750 --> 01:05:10,630
 

3191
01:05:09,760 --> 01:05:13,840
 talk about when I talk about

3192
01:05:10,620 --> 01:05:13,840
 

3193
01:05:10,630 --> 01:05:15,730
 certifications so they actually can

3194
01:05:13,830 --> 01:05:15,730
 

3195
01:05:13,840 --> 01:05:19,150
 still be used to sort of prove sometimes

3196
01:05:15,720 --> 01:05:19,150
 

3197
01:05:15,730 --> 01:05:20,740
 that no ever sail example exists of

3198
01:05:19,140 --> 01:05:20,740
 

3199
01:05:19,150 --> 01:05:23,410
 course solving the LP is kind of slow

3200
01:05:20,730 --> 01:05:23,410
 

3201
01:05:20,740 --> 01:05:24,880
 still and so there fortunately there do

3202
01:05:23,400 --> 01:05:24,880
 

3203
01:05:23,410 --> 01:05:26,380
 exist fast methods basically um things

3204
01:05:24,870 --> 01:05:26,380
 

3205
01:05:24,880 --> 01:05:29,140
 like convex duality for first

3206
01:05:26,370 --> 01:05:29,140
 

3207
01:05:26,380 --> 01:05:30,190
 approximately solving that LP but would

3208
01:05:29,130 --> 01:05:30,190
 

3209
01:05:29,140 --> 01:05:31,840
 actually want to highlight even more

3210
01:05:30,180 --> 01:05:31,840
 

3211
01:05:30,190 --> 01:05:33,370
 than that is even an even faster method

3212
01:05:31,830 --> 01:05:33,370
 

3213
01:05:31,840 --> 01:05:35,140
 which some recent work isn't showing

3214
01:05:33,360 --> 01:05:35,140
 

3215
01:05:33,370 --> 01:05:38,140
 this is competitive with these more

3216
01:05:35,130 --> 01:05:38,140
 

3217
01:05:35,140 --> 01:05:39,910
 complex relaxations and that is just

3218
01:05:38,130 --> 01:05:39,910
 

3219
01:05:38,140 --> 01:05:41,650
 interval based bounds so I showed you

3220
01:05:39,900 --> 01:05:41,650
 

3221
01:05:39,910 --> 01:05:44,560
 before sort of how we propagate interval

3222
01:05:41,640 --> 01:05:44,560
 

3223
01:05:41,650 --> 01:05:45,850
 bounds really these I alluded to how we

3224
01:05:44,550 --> 01:05:45,850
 

3225
01:05:44,560 --> 01:05:50,470
 propagate interval balance to the

3226
01:05:45,840 --> 01:05:50,470
 

3227
01:05:45,850 --> 01:05:53,200
 network it turns out if you if you sort

3228
01:05:50,460 --> 01:05:53,200
 

3229
01:05:50,470 --> 01:05:55,030
 of take those interval bounds we now

3230
01:05:53,190 --> 01:05:55,030
 

3231
01:05:53,200 --> 01:05:56,920
 have a known region that the last layer

3232
01:05:55,020 --> 01:05:56,920
 

3233
01:05:55,030 --> 01:05:58,540
 of the network can lie in and if we

3234
01:05:56,910 --> 01:05:58,540
 

3235
01:05:56,920 --> 01:06:00,250
 throw away everything else from our

3236
01:05:58,530 --> 01:06:00,250
 

3237
01:05:58,540 --> 01:06:02,620
 network we still can actually get a

3238
01:06:00,240 --> 01:06:02,620
 

3239
01:06:00,250 --> 01:06:05,590
 bound on how much I can sort of decrease

3240
01:06:02,610 --> 01:06:05,590
 

3241
01:06:02,620 --> 01:06:06,850
 say my my targeted attack right there

3242
01:06:05,580 --> 01:06:06,850
 

3243
01:06:05,590 --> 01:06:09,520
 just the analytical solution to this and

3244
01:06:06,840 --> 01:06:09,520
 

3245
01:06:06,850 --> 01:06:11,050
 you can solve it kind of exactly here it

3246
01:06:09,510 --> 01:06:11,050
 

3247
01:06:09,520 --> 01:06:14,590
 is if you if you really care but the

3248
01:06:11,040 --> 01:06:14,590
 

3249
01:06:11,050 --> 01:06:16,120
 real point here is that I can also use

3250
01:06:14,580 --> 01:06:16,120
 

3251
01:06:14,590 --> 01:06:20,140
 just interval balance to provide an even

3252
01:06:16,110 --> 01:06:20,140
 

3253
01:06:16,120 --> 01:06:24,400
 looser relaxation of the problem

3254
01:06:20,130 --> 01:06:24,400
 

3255
01:06:20,140 --> 01:06:26,020
 okay so I've sort of said a lot here in

3256
01:06:24,390 --> 01:06:26,020
 

3257
01:06:24,400 --> 01:06:27,850
 the last two sections and I kind of want

3258
01:06:26,010 --> 01:06:27,850
 

3259
01:06:26,020 --> 01:06:30,490
 to pop back up now for a second and

3260
01:06:27,840 --> 01:06:30,490
 

3261
01:06:27,850 --> 01:06:35,290
 highlight what the real value of all

3262
01:06:30,480 --> 01:06:35,290
 

3263
01:06:30,490 --> 01:06:37,330
 this is okay so if if some of that was a

3264
01:06:35,280 --> 01:06:37,330
 

3265
01:06:35,290 --> 01:06:39,340
 little bit into the weeds for you don't

3266
01:06:37,320 --> 01:06:39,340
 

3267
01:06:37,330 --> 01:06:40,470
 worry about it we're gonna sort of pop

3268
01:06:39,330 --> 01:06:40,470
 

3269
01:06:39,340 --> 01:06:41,970
 back up a little bit right

3270
01:06:40,460 --> 01:06:41,970
 

3271
01:06:40,470 --> 01:06:43,740
 and then when we talk about training

3272
01:06:41,960 --> 01:06:43,740
 

3273
01:06:41,970 --> 01:06:47,130
 will actually give some sort of examples

3274
01:06:43,730 --> 01:06:47,130
 

3275
01:06:43,740 --> 01:06:48,660
 of how these things really work but

3276
01:06:47,120 --> 01:06:48,660
 

3277
01:06:47,130 --> 01:06:51,030
 here's the high-level thing I want to

3278
01:06:48,650 --> 01:06:51,030
 

3279
01:06:48,660 --> 01:06:53,640
 give to sort of want to show you so say

3280
01:06:51,020 --> 01:06:53,640
 

3281
01:06:51,030 --> 01:06:55,500
 we have our trusty digit 7 here this is

3282
01:06:53,630 --> 01:06:55,500
 

3283
01:06:53,640 --> 01:06:56,760
 the first example of the M this test set

3284
01:06:55,490 --> 01:06:56,760
 

3285
01:06:55,500 --> 01:06:59,960
 by the way this is why it keeps

3286
01:06:56,750 --> 01:06:59,960
 

3287
01:06:56,760 --> 01:07:02,960
 appearing here again and again and

3288
01:06:59,950 --> 01:07:02,960
 

3289
01:06:59,960 --> 01:07:07,470
 suppose I solve my verification problem

3290
01:07:02,950 --> 01:07:07,470
 

3291
01:07:02,960 --> 01:07:09,420
 using the binary integer previously the

3292
01:07:07,460 --> 01:07:09,420
 

3293
01:07:07,470 --> 01:07:12,480
 integer programming formulation of my

3294
01:07:09,410 --> 01:07:12,480
 

3295
01:07:09,420 --> 01:07:14,660
 exact verification procedure okay and if

3296
01:07:12,470 --> 01:07:14,660
 

3297
01:07:12,480 --> 01:07:16,860
 that result gives me a negative solution

3298
01:07:14,650 --> 01:07:16,860
 

3299
01:07:14,660 --> 01:07:19,830
 then I know that there exists an

3300
01:07:16,850 --> 01:07:19,830
 

3301
01:07:16,860 --> 01:07:22,050
 adversarial example right in this case

3302
01:07:19,820 --> 01:07:22,050
 

3303
01:07:19,830 --> 01:07:25,100
 trying to make the thing class zero

3304
01:07:22,040 --> 01:07:25,100
 

3305
01:07:22,050 --> 01:07:26,820
 because I'm minimizing the class zero

3306
01:07:25,090 --> 01:07:26,820
 

3307
01:07:25,100 --> 01:07:30,450
 maximizing the class zero logit

3308
01:07:26,810 --> 01:07:30,450
 

3309
01:07:26,820 --> 01:07:34,080
 minimizing the true class logic if on

3310
01:07:30,440 --> 01:07:34,080
 

3311
01:07:30,450 --> 01:07:37,740
 the other hand I do the same thing with

3312
01:07:34,070 --> 01:07:37,740
 

3313
01:07:34,080 --> 01:07:39,150
 the convex constraints I I will also get

3314
01:07:37,730 --> 01:07:39,150
 

3315
01:07:37,740 --> 01:07:40,680
 a negative number because that one will

3316
01:07:39,140 --> 01:07:40,680
 

3317
01:07:39,150 --> 01:07:44,760
 always be actually always be lower than

3318
01:07:40,670 --> 01:07:44,760
 

3319
01:07:40,680 --> 01:07:46,980
 the first one but importantly the fact

3320
01:07:44,750 --> 01:07:46,980
 

3321
01:07:44,760 --> 01:07:48,960
 that I have a negative term here doesn't

3322
01:07:46,970 --> 01:07:48,960
 

3323
01:07:46,980 --> 01:07:50,340
 actually tell me anything I don't know

3324
01:07:48,950 --> 01:07:50,340
 

3325
01:07:48,960 --> 01:07:52,740
 that an average tale example exists or

3326
01:07:50,330 --> 01:07:52,740
 

3327
01:07:50,340 --> 01:07:54,630
 not because I've relaxed the set of

3328
01:07:52,730 --> 01:07:54,630
 

3329
01:07:52,740 --> 01:07:56,280
 allowable sort of activations I can

3330
01:07:54,620 --> 01:07:56,280
 

3331
01:07:54,630 --> 01:07:57,900
 achieve and so the fact that I can

3332
01:07:56,270 --> 01:07:57,900
 

3333
01:07:56,280 --> 01:07:59,700
 achieve kind of an adversarial example

3334
01:07:57,890 --> 01:07:59,700
 

3335
01:07:57,900 --> 01:08:02,700
 in this relaxed set doesn't actually

3336
01:07:59,690 --> 01:08:02,700
 

3337
01:07:59,700 --> 01:08:05,460
 tell me anything on the other hand and

3338
01:08:02,690 --> 01:08:05,460
 

3339
01:08:02,700 --> 01:08:07,710
 so so for finding adversarial examples

3340
01:08:05,450 --> 01:08:07,710
 

3341
01:08:05,460 --> 01:08:09,510
 these convex realizations are actually

3342
01:08:07,700 --> 01:08:09,510
 

3343
01:08:07,710 --> 01:08:11,010
 quite not very useful

3344
01:08:09,500 --> 01:08:11,010
 

3345
01:08:09,510 --> 01:08:13,110
 they don't really provide much in that

3346
01:08:11,000 --> 01:08:13,110
 

3347
01:08:11,010 --> 01:08:14,430
 regard fortunately though we sort of

3348
01:08:13,100 --> 01:08:14,430
 

3349
01:08:13,110 --> 01:08:17,430
 don't have that problem we already know

3350
01:08:14,420 --> 01:08:17,430
 

3351
01:08:14,430 --> 01:08:18,480
 how to construct adverse examples pretty

3352
01:08:17,420 --> 01:08:18,480
 

3353
01:08:17,430 --> 01:08:20,100
 well just using gradient based

3354
01:08:18,470 --> 01:08:20,100
 

3355
01:08:18,480 --> 01:08:22,740
 techniques well really don't know how to

3356
01:08:20,090 --> 01:08:22,740
 

3357
01:08:20,100 --> 01:08:24,510
 do well with these grading basics is

3358
01:08:22,730 --> 01:08:24,510
 

3359
01:08:22,740 --> 01:08:26,870
 verify that no such example can exist

3360
01:08:24,500 --> 01:08:26,870
 

3361
01:08:24,510 --> 01:08:30,690
 and the nice thing about these convex

3362
01:08:26,860 --> 01:08:30,690
 

3363
01:08:26,870 --> 01:08:32,160
 relaxations is that if we solve the same

3364
01:08:30,680 --> 01:08:32,160
 

3365
01:08:30,690 --> 01:08:33,860
 problem say you're trying to make the

3366
01:08:32,150 --> 01:08:33,860
 

3367
01:08:32,160 --> 01:08:36,540
 class label look like a class label one

3368
01:08:33,850 --> 01:08:36,540
 

3369
01:08:33,860 --> 01:08:39,120
 and get a positive number so in other

3370
01:08:36,530 --> 01:08:39,120
 

3371
01:08:36,540 --> 01:08:41,790
 words what that means is the class

3372
01:08:39,110 --> 01:08:41,790
 

3373
01:08:39,120 --> 01:08:45,450
 logits the class probability of the true

3374
01:08:41,780 --> 01:08:45,450
 

3375
01:08:41,790 --> 01:08:47,970
 class under this relaxed attack is still

3376
01:08:45,440 --> 01:08:47,970
 

3377
01:08:45,450 --> 01:08:51,360
 higher than the class probability of the

3378
01:08:47,960 --> 01:08:51,360
 

3379
01:08:47,970 --> 01:08:53,880
 alternative class the target class what

3380
01:08:51,350 --> 01:08:53,880
 

3381
01:08:51,360 --> 01:08:56,670
 I now know is that there's actually no

3382
01:08:53,870 --> 01:08:56,670
 

3383
01:08:53,880 --> 01:08:58,980
 adversarial example for this class so

3384
01:08:56,660 --> 01:08:58,980
 

3385
01:08:56,670 --> 01:09:02,310
 I've actually managed to verify that no

3386
01:08:58,970 --> 01:09:02,310
 

3387
01:08:58,980 --> 01:09:06,500
 adversarial example exists and do so in

3388
01:09:02,300 --> 01:09:06,500
 

3389
01:09:02,310 --> 01:09:08,640
 a way that only involves convex methods

3390
01:09:06,490 --> 01:09:08,640
 

3391
01:09:06,500 --> 01:09:10,770
 so that's very that's very nice because

3392
01:09:08,630 --> 01:09:10,770
 

3393
01:09:08,640 --> 01:09:13,080
 these things are solvable and we

3394
01:09:10,760 --> 01:09:13,080
 

3395
01:09:10,770 --> 01:09:16,320
 actually sometimes cannot just get

3396
01:09:13,070 --> 01:09:16,320
 

3397
01:09:13,080 --> 01:09:25,440
 attacks but we might be able to actually

3398
01:09:16,310 --> 01:09:25,440
 

3399
01:09:16,320 --> 01:09:27,990
 get proofs that no attack exists okay so

3400
01:09:25,430 --> 01:09:27,990
 

3401
01:09:25,440 --> 01:09:30,480
 that actually covers now the three main

3402
01:09:27,980 --> 01:09:30,480
 

3403
01:09:27,990 --> 01:09:34,830
 techniques we have for dealing with that

3404
01:09:30,470 --> 01:09:34,830
 

3405
01:09:30,480 --> 01:09:41,460
 inner maximization problem and now I'm

3406
01:09:34,820 --> 01:09:41,460
 

3407
01:09:34,830 --> 01:09:44,310
 gonna pop back out and start talking

3408
01:09:41,450 --> 01:09:44,310
 

3409
01:09:41,460 --> 01:09:47,100
 about training models not just testing

3410
01:09:44,300 --> 01:09:47,100
 

3411
01:09:44,310 --> 01:09:51,030
 them so let's take back to the big

3412
01:09:47,090 --> 01:09:51,030
 

3413
01:09:47,100 --> 01:09:54,810
 picture here what part one was all about

3414
01:09:51,020 --> 01:09:54,810
 

3415
01:09:51,030 --> 01:09:58,790
 really was creating adversarial examples

3416
01:09:54,800 --> 01:09:58,790
 

3417
01:09:54,810 --> 01:10:03,270
 right so how do I solve that inner

3418
01:09:58,780 --> 01:10:03,270
 

3419
01:09:58,790 --> 01:10:06,330
 maximization problem what part two is

3420
01:10:03,260 --> 01:10:06,330
 

3421
01:10:03,270 --> 01:10:09,090
 gonna be about is how do I train a model

3422
01:10:06,320 --> 01:10:09,090
 

3423
01:10:06,330 --> 01:10:12,360
 that somehow is robust to these

3424
01:10:09,080 --> 01:10:12,360
 

3425
01:10:09,090 --> 01:10:13,650
 adversarial attacks and it turns out

3426
01:10:12,350 --> 01:10:13,650
 

3427
01:10:12,360 --> 01:10:15,780
 that actually the strategies I had

3428
01:10:13,640 --> 01:10:15,780
 

3429
01:10:13,650 --> 01:10:19,590
 before will exactly lead to methods for

3430
01:10:15,770 --> 01:10:19,590
 

3431
01:10:15,780 --> 01:10:21,660
 training so we're now moving from just

3432
01:10:19,580 --> 01:10:21,660
 

3433
01:10:19,590 --> 01:10:24,720
 the atomization inner minimization

3434
01:10:21,650 --> 01:10:24,720
 

3435
01:10:21,660 --> 01:10:27,750
 maximization to the outer minimization

3436
01:10:24,710 --> 01:10:27,750
 

3437
01:10:24,720 --> 01:10:33,990
 and if we think about the techniques we

3438
01:10:27,740 --> 01:10:33,990
 

3439
01:10:27,750 --> 01:10:36,060
 use first first search here using our

3440
01:10:33,980 --> 01:10:36,060
 

3441
01:10:33,990 --> 01:10:37,890
 local bounds naturally lead to a

3442
01:10:36,050 --> 01:10:37,890
 

3443
01:10:36,060 --> 01:10:40,050
 procedure that we call adversarial

3444
01:10:37,880 --> 01:10:40,050
 

3445
01:10:37,890 --> 01:10:42,240
 training so this is also sort of

3446
01:10:40,040 --> 01:10:42,240
 

3447
01:10:40,050 --> 01:10:44,880
 advocated by ie and Goodfellow and and

3448
01:10:42,230 --> 01:10:44,880
 

3449
01:10:42,240 --> 01:10:48,680
 others and I'll describe what that means

3450
01:10:44,870 --> 01:10:48,680
 

3451
01:10:44,880 --> 01:10:51,150
 in a second we can't really use

3452
01:10:48,670 --> 01:10:51,150
 

3453
01:10:48,680 --> 01:10:53,490
 combinatorial optimization to train

3454
01:10:51,140 --> 01:10:53,490
 

3455
01:10:51,150 --> 01:10:56,250
 models it's just too slow it takes on

3456
01:10:53,480 --> 01:10:56,250
 

3457
01:10:53,490 --> 01:10:57,420
 the order of minutes or I mean or for

3458
01:10:56,240 --> 01:10:57,420
 

3459
01:10:56,250 --> 01:10:59,310
 big enough models you know until the

3460
01:10:57,410 --> 01:10:59,310
 

3461
01:10:57,420 --> 01:11:01,380
 heat death of the universe to verify

3462
01:10:59,300 --> 01:11:01,380
 

3463
01:10:59,310 --> 01:11:03,659
 them so we're not gonna build a train

3464
01:11:01,370 --> 01:11:03,659
 

3465
01:11:01,380 --> 01:11:05,489
 you know models ever and well maybe

3466
01:11:03,649 --> 01:11:05,489
 

3467
01:11:03,659 --> 01:11:09,630
 really small ones but not larger ones

3468
01:11:05,479 --> 01:11:09,630
 

3469
01:11:05,489 --> 01:11:12,150
 using combinatorial optimization we can

3470
01:11:09,620 --> 01:11:12,150
 

3471
01:11:09,630 --> 01:11:14,760
 however train models based upon our

3472
01:11:12,140 --> 01:11:14,760
 

3473
01:11:12,150 --> 01:11:18,270
 convex relaxations and these will lead

3474
01:11:14,750 --> 01:11:18,270
 

3475
01:11:14,760 --> 01:11:20,850
 to provably robust models models where

3476
01:11:18,260 --> 01:11:20,850
 

3477
01:11:18,270 --> 01:11:22,679
 we can say not only do they seem to

3478
01:11:20,840 --> 01:11:22,679
 

3479
01:11:20,850 --> 01:11:25,920
 perform well but it actually can

3480
01:11:22,669 --> 01:11:25,920
 

3481
01:11:22,679 --> 01:11:28,080
 guarantee you that no attack no test

3482
01:11:25,910 --> 01:11:28,080
 

3483
01:11:25,920 --> 01:11:30,000
 time attack is gonna fool this

3484
01:11:28,070 --> 01:11:30,000
 

3485
01:11:28,080 --> 01:11:35,159
 classifier at least within a certain

3486
01:11:29,990 --> 01:11:35,159
 

3487
01:11:30,000 --> 01:11:38,780
 norm ball okay so let me start first of

3488
01:11:35,149 --> 01:11:38,780
 

3489
01:11:35,159 --> 01:11:42,080
 all talking about adversarial training

3490
01:11:38,770 --> 01:11:42,080
 

3491
01:11:38,780 --> 01:11:44,159
 the idea here is that how do we go about

3492
01:11:42,070 --> 01:11:44,159
 

3493
01:11:42,080 --> 01:11:47,760
 optimizing this objective how do we go

3494
01:11:44,149 --> 01:11:47,760
 

3495
01:11:44,159 --> 01:11:50,310
 about training a model that optimizes

3496
01:11:47,750 --> 01:11:50,310
 

3497
01:11:47,760 --> 01:11:54,230
 them that minimizes over our model this

3498
01:11:50,300 --> 01:11:54,230
 

3499
01:11:50,310 --> 01:11:56,580
 sum of robust adversarial robust losses

3500
01:11:54,220 --> 01:11:56,580
 

3501
01:11:54,230 --> 01:11:58,860
 now we would like to be able to optimize

3502
01:11:56,570 --> 01:11:58,860
 

3503
01:11:56,580 --> 01:12:00,900
 it with gradient descents the way we

3504
01:11:58,850 --> 01:12:00,900
 

3505
01:11:58,860 --> 01:12:03,449
 optimize everything in deep learning but

3506
01:12:00,890 --> 01:12:03,449
 

3507
01:12:00,900 --> 01:12:07,139
 how do I take the gradient of that term

3508
01:12:03,439 --> 01:12:07,139
 

3509
01:12:03,449 --> 01:12:08,790
 when it involves the maximum well sort

3510
01:12:07,129 --> 01:12:08,790
 

3511
01:12:07,139 --> 01:12:10,800
 of very nicely it turns out there's a

3512
01:12:08,780 --> 01:12:10,800
 

3513
01:12:08,790 --> 01:12:14,610
 really nice answer this and it's called

3514
01:12:10,790 --> 01:12:14,610
 

3515
01:12:10,800 --> 01:12:16,350
 Danskin theorem so the idea here is very

3516
01:12:14,600 --> 01:12:16,350
 

3517
01:12:14,610 --> 01:12:19,050
 simple and intuitive but it's actually a

3518
01:12:16,340 --> 01:12:19,050
 

3519
01:12:16,350 --> 01:12:21,989
 very subtle point is that if I want to

3520
01:12:19,040 --> 01:12:21,989
 

3521
01:12:19,050 --> 01:12:23,219
 take a gradient of this max term that's

3522
01:12:21,979 --> 01:12:23,219
 

3523
01:12:21,989 --> 01:12:27,690
 the inner term that I'm trying to

3524
01:12:23,209 --> 01:12:27,690
 

3525
01:12:23,219 --> 01:12:31,830
 optimize here what I can do is I can

3526
01:12:27,680 --> 01:12:31,830
 

3527
01:12:27,690 --> 01:12:33,810
 just find the optimum in that over that

3528
01:12:31,820 --> 01:12:33,810
 

3529
01:12:31,830 --> 01:12:36,449
 set and take the gradient at that

3530
01:12:33,800 --> 01:12:36,449
 

3531
01:12:33,810 --> 01:12:37,560
 optimum point this sounds obvious and I

3532
01:12:36,439 --> 01:12:37,560
 

3533
01:12:36,449 --> 01:12:39,480
 thought this was obvious but actually

3534
01:12:37,550 --> 01:12:39,480
 

3535
01:12:37,560 --> 01:12:40,949
 for general optimizations is a really

3536
01:12:39,470 --> 01:12:40,949
 

3537
01:12:39,480 --> 01:12:43,350
 subtle result that takes many many pages

3538
01:12:40,939 --> 01:12:43,350
 

3539
01:12:40,949 --> 01:12:44,550
 to prove in the convex case is not quite

3540
01:12:43,340 --> 01:12:44,550
 

3541
01:12:43,350 --> 01:12:46,800
 so bad but this is actually a pretty

3542
01:12:44,540 --> 01:12:46,800
 

3543
01:12:44,550 --> 01:12:49,409
 subtle result but it's really really

3544
01:12:46,790 --> 01:12:49,409
 

3545
01:12:46,800 --> 01:12:52,949
 nice because it means that in order to

3546
01:12:49,399 --> 01:12:52,949
 

3547
01:12:49,409 --> 01:12:54,449
 to solve to solve our optimization

3548
01:12:52,939 --> 01:12:54,449
 

3549
01:12:52,949 --> 01:12:56,330
 problem with great in the sense we don't

3550
01:12:54,439 --> 01:12:56,330
 

3551
01:12:54,449 --> 01:13:00,320
 need some sort of fancy new procedure

3552
01:12:56,320 --> 01:13:00,320
 

3553
01:12:56,330 --> 01:13:05,060
 all we really need to do is be able to

3554
01:13:00,310 --> 01:13:05,060
 

3555
01:13:00,320 --> 01:13:09,659
 find adversarial examples and then

3556
01:13:05,050 --> 01:13:09,659
 

3557
01:13:05,060 --> 01:13:11,730
 optimize from those positions now or

3558
01:13:09,649 --> 01:13:11,730
 

3559
01:13:09,659 --> 01:13:13,980
 optimize our parameters at that at those

3560
01:13:11,720 --> 01:13:13,980
 

3561
01:13:11,730 --> 01:13:14,670
 points now it turns out that to do this

3562
01:13:13,970 --> 01:13:14,670
 

3563
01:13:13,980 --> 01:13:16,469
 I should

3564
01:13:14,660 --> 01:13:16,469
 

3565
01:13:14,670 --> 01:13:17,940
 that has sort of a big asterisk here

3566
01:13:16,459 --> 01:13:17,940
 

3567
01:13:16,469 --> 01:13:19,949
 because this only applies when we

3568
01:13:17,930 --> 01:13:19,949
 

3569
01:13:17,940 --> 01:13:21,510
 perform the inner message in exactly

3570
01:13:19,939 --> 01:13:21,510
 

3571
01:13:19,949 --> 01:13:22,679
 which brings us back here to the

3572
01:13:21,500 --> 01:13:22,679
 

3573
01:13:21,510 --> 01:13:24,780
 combinatorial states that we don't want

3574
01:13:22,669 --> 01:13:24,780
 

3575
01:13:22,679 --> 01:13:26,070
 to deal with but now you know of course

3576
01:13:24,770 --> 01:13:26,070
 

3577
01:13:24,780 --> 01:13:28,020
 we have deep learning to the rescue but

3578
01:13:26,060 --> 01:13:28,020
 

3579
01:13:26,070 --> 01:13:30,540
 let's just do this anyway

3580
01:13:28,010 --> 01:13:30,540
 

3581
01:13:28,020 --> 01:13:32,880
 solving our inner optimism problem sort

3582
01:13:30,530 --> 01:13:32,880
 

3583
01:13:30,540 --> 01:13:34,560
 of empirically and not caring about the

3584
01:13:32,870 --> 01:13:34,560
 

3585
01:13:32,880 --> 01:13:36,000
 fact that you know we're not really in

3586
01:13:34,550 --> 01:13:36,000
 

3587
01:13:34,560 --> 01:13:39,000
 the regime of truth theory here in

3588
01:13:35,990 --> 01:13:39,000
 

3589
01:13:36,000 --> 01:13:41,130
 Danskin theorem and this leads to

3590
01:13:38,990 --> 01:13:41,130
 

3591
01:13:39,000 --> 01:13:43,560
 exactly kind of the standard adversarial

3592
01:13:41,120 --> 01:13:43,560
 

3593
01:13:41,130 --> 01:13:45,360
 training procedure advocated for example

3594
01:13:43,550 --> 01:13:45,360
 

3595
01:13:43,560 --> 01:13:47,520
 by in good fell in one of the in one of

3596
01:13:45,350 --> 01:13:47,520
 

3597
01:13:45,360 --> 01:13:49,920
 the original adversarial example or one

3598
01:13:47,510 --> 01:13:49,920
 

3599
01:13:47,520 --> 01:13:52,770
 of the many papers leaks that excited

3600
01:13:49,910 --> 01:13:52,770
 

3601
01:13:49,920 --> 01:13:54,690
 people about adversarial examples so dia

3602
01:13:52,760 --> 01:13:54,690
 

3603
01:13:52,770 --> 01:13:56,910
 here is very simple and all it really

3604
01:13:54,680 --> 01:13:56,910
 

3605
01:13:54,690 --> 01:13:59,880
 involves is that instead of training at

3606
01:13:56,900 --> 01:13:59,880
 

3607
01:13:56,910 --> 01:14:01,679
 the actual data points you train at the

3608
01:13:59,870 --> 01:14:01,679
 

3609
01:13:59,880 --> 01:14:03,540
 worst case perturbations of those data

3610
01:14:01,669 --> 01:14:03,540
 

3611
01:14:01,679 --> 01:14:05,100
 points right so I select the mini-batch

3612
01:14:03,530 --> 01:14:05,100
 

3613
01:14:03,540 --> 01:14:06,719
 for each of the implementing me about

3614
01:14:05,090 --> 01:14:06,719
 

3615
01:14:05,100 --> 01:14:08,850
 mini-batch I find the worst case

3616
01:14:06,709 --> 01:14:08,850
 

3617
01:14:06,719 --> 01:14:11,489
 perturbation and then I update the

3618
01:14:08,840 --> 01:14:11,489
 

3619
01:14:08,850 --> 01:14:13,380
 parameters based upon the gradients at

3620
01:14:11,479 --> 01:14:13,380
 

3621
01:14:11,489 --> 01:14:14,690
 those worst case perturbations that's

3622
01:14:13,370 --> 01:14:14,690
 

3623
01:14:13,380 --> 01:14:17,969
 actually all I do in this whole process

3624
01:14:14,680 --> 01:14:17,969
 

3625
01:14:14,690 --> 01:14:20,040
 and I should say it's also sort of

3626
01:14:17,959 --> 01:14:20,040
 

3627
01:14:17,969 --> 01:14:22,530
 comments to sometimes mix robust

3628
01:14:20,030 --> 01:14:22,530
 

3629
01:14:20,040 --> 01:14:23,489
 and non robust updates so you might take

3630
01:14:22,520 --> 01:14:23,489
 

3631
01:14:22,530 --> 01:14:25,440
 some gradient set to the original

3632
01:14:23,479 --> 01:14:25,440
 

3633
01:14:23,489 --> 01:14:27,360
 examples some of the robust exam at the

3634
01:14:25,430 --> 01:14:27,360
 

3635
01:14:25,440 --> 01:14:29,310
 sort of worth kiss examples but really

3636
01:14:27,350 --> 01:14:29,310
 

3637
01:14:27,360 --> 01:14:32,310
 you can actually just take the worst

3638
01:14:29,300 --> 01:14:32,310
 

3639
01:14:29,310 --> 01:14:35,040
 case ones - and this still works ok ok

3640
01:14:32,300 --> 01:14:35,040
 

3641
01:14:32,310 --> 01:14:38,670
 so let's say this works now so remember

3642
01:14:35,030 --> 01:14:38,670
 

3643
01:14:35,040 --> 01:14:40,350
 we had our old Convenant which we

3644
01:14:38,660 --> 01:14:40,350
 

3645
01:14:38,670 --> 01:14:42,060
 transferred with normal training and it

3646
01:14:40,340 --> 01:14:42,060
 

3647
01:14:40,350 --> 01:14:44,250
 did really well on standard error here

3648
01:14:42,050 --> 01:14:44,250
 

3649
01:14:42,060 --> 01:14:45,660
 but it actually did a lot worse on you

3650
01:14:44,240 --> 01:14:45,660
 

3651
01:14:44,250 --> 01:14:47,580
 know if we attack it with a finite the

3652
01:14:45,650 --> 01:14:47,580
 

3653
01:14:45,660 --> 01:14:49,350
 fast gradient sign method or with PGD

3654
01:14:47,570 --> 01:14:49,350
 

3655
01:14:47,580 --> 01:14:55,440
 press a grading descent it does much

3656
01:14:49,340 --> 01:14:55,440
 

3657
01:14:49,350 --> 01:14:59,460
 worse so the nice thing is if I now

3658
01:14:55,430 --> 01:14:59,460
 

3659
01:14:55,440 --> 01:15:02,160
 train my same exact architecture using

3660
01:14:59,450 --> 01:15:02,160
 

3661
01:14:59,460 --> 01:15:03,810
 this method on the right here we

3662
01:15:02,150 --> 01:15:03,810
 

3663
01:15:02,160 --> 01:15:06,870
 actually get a much more robust Network

3664
01:15:03,800 --> 01:15:06,870
 

3665
01:15:03,810 --> 01:15:09,510
 right so now if I train it on this

3666
01:15:06,860 --> 01:15:09,510
 

3667
01:15:06,870 --> 01:15:14,370
 attack it's only suffers about 2.8

3668
01:15:09,500 --> 01:15:14,370
 

3669
01:15:09,510 --> 01:15:17,340
 percent error on this now this seems

3670
01:15:14,360 --> 01:15:17,340
 

3671
01:15:14,370 --> 01:15:20,010
 good all right and actually I think Alec

3672
01:15:17,330 --> 01:15:20,010
 

3673
01:15:17,340 --> 01:15:23,640
 sessions a little bit and I think he may

3674
01:15:20,000 --> 01:15:23,640
 

3675
01:15:20,010 --> 01:15:24,660
 touch on that some more later but we

3676
01:15:23,630 --> 01:15:24,660
 

3677
01:15:23,640 --> 01:15:27,730
 have to be really careful about

3678
01:15:24,650 --> 01:15:27,730
 

3679
01:15:24,660 --> 01:15:30,700
 declaring success right now right

3680
01:15:27,720 --> 01:15:30,700
 

3681
01:15:27,730 --> 01:15:33,310
 cuz what I'm doing in my evaluation here

3682
01:15:30,690 --> 01:15:33,310
 

3683
01:15:30,700 --> 01:15:35,290
 is I'm evaluating the method on the

3684
01:15:33,300 --> 01:15:35,290
 

3685
01:15:33,310 --> 01:15:38,140
 exact same attack that I trained it on

3686
01:15:35,280 --> 01:15:38,140
 

3687
01:15:35,290 --> 01:15:40,330
 and we know deep learning is really good

3688
01:15:38,130 --> 01:15:40,330
 

3689
01:15:38,140 --> 01:15:42,880
 when you give it something it's really

3690
01:15:40,320 --> 01:15:42,880
 

3691
01:15:40,330 --> 01:15:44,590
 really good at doing that all right so

3692
01:15:42,870 --> 01:15:44,590
 

3693
01:15:42,880 --> 01:15:45,940
 so it's really good at automatic exact

3694
01:15:44,580 --> 01:15:45,940
 

3695
01:15:44,590 --> 01:15:47,739
 we tell it to optimize and this is

3696
01:15:45,930 --> 01:15:47,739
 

3697
01:15:45,940 --> 01:15:49,150
 actually been sort of the the challenge

3698
01:15:47,729 --> 01:15:49,150
 

3699
01:15:47,739 --> 01:15:51,970
 for a lot of adversarial examples in the

3700
01:15:49,140 --> 01:15:51,970
 

3701
01:15:49,150 --> 01:15:52,540
 past is that is that we have to be sort

3702
01:15:51,960 --> 01:15:52,540
 

3703
01:15:51,970 --> 01:15:57,970
 of careful

3704
01:15:52,530 --> 01:15:57,970
 

3705
01:15:52,540 --> 01:16:00,760
 so however here's what I will say to the

3706
01:15:57,960 --> 01:16:00,760
 

3707
01:15:57,970 --> 01:16:02,739
 best of our empirical knowledge models

3708
01:16:00,750 --> 01:16:02,739
 

3709
01:16:00,760 --> 01:16:04,810
 trained in this fashion with a strong

3710
01:16:02,729 --> 01:16:04,810
 

3711
01:16:02,739 --> 01:16:07,870
 PGD so using basically predicted

3712
01:16:04,800 --> 01:16:07,870
 

3713
01:16:04,810 --> 01:16:10,390
 steepest descent so normalized type of

3714
01:16:07,860 --> 01:16:10,390
 

3715
01:16:07,870 --> 01:16:13,420
 PGD with additionally some random

3716
01:16:10,380 --> 01:16:13,420
 

3717
01:16:10,390 --> 01:16:16,060
 restarts in the PD process seem to be

3718
01:16:13,410 --> 01:16:16,060
 

3719
01:16:13,420 --> 01:16:19,090
 robust to any empirical attack we can

3720
01:16:16,050 --> 01:16:19,090
 

3721
01:16:16,060 --> 01:16:20,680
 throw at them so if I run the same thing

3722
01:16:19,080 --> 01:16:20,680
 

3723
01:16:19,090 --> 01:16:23,470
 maybe say with more iterations of PGD

3724
01:16:20,670 --> 01:16:23,470
 

3725
01:16:20,680 --> 01:16:23,860
 with more randomization on this kind of

3726
01:16:23,460 --> 01:16:23,860
 

3727
01:16:23,470 --> 01:16:25,600
 stuff

3728
01:16:23,850 --> 01:16:25,600
 

3729
01:16:23,860 --> 01:16:28,840
 I actually don't increase my loss that

3730
01:16:25,590 --> 01:16:28,840
 

3731
01:16:25,600 --> 01:16:30,790
 much and in fact one of what Alex's

3732
01:16:28,830 --> 01:16:30,790
 

3733
01:16:28,840 --> 01:16:32,320
 group they posted a model they trains

3734
01:16:30,780 --> 01:16:32,320
 

3735
01:16:30,790 --> 01:16:34,239
 not not this one but I feel more complex

3736
01:16:32,310 --> 01:16:34,239
 

3737
01:16:32,320 --> 01:16:36,850
 model they trained in the same fashion

3738
01:16:34,229 --> 01:16:36,850
 

3739
01:16:34,239 --> 01:16:40,090
 and people really haven't been able to

3740
01:16:36,840 --> 01:16:40,090
 

3741
01:16:36,850 --> 01:16:43,120
 attack it that much and the crux of the

3742
01:16:40,080 --> 01:16:43,120
 

3743
01:16:40,090 --> 01:16:46,390
 issue here is that we are trying in this

3744
01:16:43,110 --> 01:16:46,390
 

3745
01:16:43,120 --> 01:16:48,670
 PDD based training to really do as good

3746
01:16:46,380 --> 01:16:48,670
 

3747
01:16:46,390 --> 01:16:50,470
 a job as we can of solving that

3748
01:16:48,660 --> 01:16:50,470
 

3749
01:16:48,670 --> 01:16:53,800
 internment that inner maximization

3750
01:16:50,460 --> 01:16:53,800
 

3751
01:16:50,470 --> 01:16:55,450
 problem and so when we do that we

3752
01:16:53,790 --> 01:16:55,450
 

3753
01:16:53,800 --> 01:16:57,340
 actually tend to get classifiers that

3754
01:16:55,440 --> 01:16:57,340
 

3755
01:16:55,450 --> 01:17:01,030
 appear to be pretty robust to anything

3756
01:16:57,330 --> 01:17:01,030
 

3757
01:16:57,340 --> 01:17:04,720
 we can throw at them at least that you

3758
01:17:01,020 --> 01:17:04,720
 

3759
01:17:01,030 --> 01:17:07,120
 know they the the error that PGD gets is

3760
01:17:04,710 --> 01:17:07,120
 

3761
01:17:04,720 --> 01:17:08,800
 about the same error that any other

3762
01:17:07,110 --> 01:17:08,800
 

3763
01:17:07,120 --> 01:17:10,360
 attack we can really formulate gets with

3764
01:17:08,790 --> 01:17:10,360
 

3765
01:17:08,800 --> 01:17:13,960
 with some you know maybe some minor

3766
01:17:10,350 --> 01:17:13,960
 

3767
01:17:10,360 --> 01:17:15,160
 improvements at the at the margins so it

3768
01:17:13,950 --> 01:17:15,160
 

3769
01:17:13,960 --> 01:17:16,720
 looks good but we should really be

3770
01:17:15,150 --> 01:17:16,720
 

3771
01:17:15,160 --> 01:17:18,670
 careful we're clarity to success and so

3772
01:17:16,710 --> 01:17:18,670
 

3773
01:17:16,720 --> 01:17:20,260
 actually we have this model again in the

3774
01:17:18,660 --> 01:17:20,260
 

3775
01:17:18,670 --> 01:17:21,910
 notes and you can try other attacks but

3776
01:17:20,250 --> 01:17:21,910
 

3777
01:17:20,260 --> 01:17:22,900
 I actually think for this you know small

3778
01:17:21,900 --> 01:17:22,900
 

3779
01:17:21,910 --> 01:17:27,370
 data set this is probably actually

3780
01:17:22,890 --> 01:17:27,370
 

3781
01:17:22,900 --> 01:17:28,690
 pretty robust model again for pretty

3782
01:17:27,360 --> 01:17:28,690
 

3783
01:17:27,370 --> 01:17:32,620
 small epsilon this is that perturbation

3784
01:17:28,680 --> 01:17:32,620
 

3785
01:17:28,690 --> 01:17:33,460
 of L infinity probations of size 0.1 but

3786
01:17:32,610 --> 01:17:33,460
 

3787
01:17:32,620 --> 01:17:35,890
 one thing I want to actually emphasize

3788
01:17:33,450 --> 01:17:35,890
 

3789
01:17:33,460 --> 01:17:37,660
 is that what we shouldn't do or what's

3790
01:17:35,880 --> 01:17:37,660
 

3791
01:17:35,890 --> 01:17:39,840
 not particularly informative is to

3792
01:17:37,650 --> 01:17:39,840
 

3793
01:17:37,660 --> 01:17:41,760
 evaluate against different

3794
01:17:39,830 --> 01:17:41,760
 

3795
01:17:39,840 --> 01:17:43,530
 of attacks like taking an elephant a

3796
01:17:41,750 --> 01:17:43,530
 

3797
01:17:41,760 --> 01:17:45,360
 trained model and evaluated against l2

3798
01:17:43,520 --> 01:17:45,360
 

3799
01:17:43,530 --> 01:17:46,980
 or l1 attacks because of course the

3800
01:17:45,350 --> 01:17:46,980
 

3801
01:17:45,360 --> 01:17:48,270
 model is trained on one attack it's not

3802
01:17:46,970 --> 01:17:48,270
 

3803
01:17:46,980 --> 01:17:51,060
 going to generalize we'd also know that

3804
01:17:48,260 --> 01:17:51,060
 

3805
01:17:48,270 --> 01:17:52,469
 right and if you want to have some we if

3806
01:17:51,050 --> 01:17:52,469
 

3807
01:17:51,060 --> 01:17:54,750
 we want to pretend against l1 or l2

3808
01:17:52,459 --> 01:17:54,750
 

3809
01:17:52,469 --> 01:17:59,239
 attacks we should just train against l1

3810
01:17:54,740 --> 01:17:59,239
 

3811
01:17:54,750 --> 01:18:01,500
 or l2 / Peet whipped with l1 or l2 PGD

3812
01:17:59,229 --> 01:18:01,500
 

3813
01:17:59,239 --> 01:18:03,659
 if you want to have some notion of

3814
01:18:01,490 --> 01:18:03,659
 

3815
01:18:01,500 --> 01:18:05,520
 generalizing to say new attack modes

3816
01:18:03,649 --> 01:18:05,520
 

3817
01:18:03,659 --> 01:18:09,150
 right new sort of general perturbation

3818
01:18:05,510 --> 01:18:09,150
 

3819
01:18:05,520 --> 01:18:10,380
 sets we're not quite there in in in the

3820
01:18:09,140 --> 01:18:10,380
 

3821
01:18:09,150 --> 01:18:12,449
 field yet you would need to sort of

3822
01:18:10,370 --> 01:18:12,449
 

3823
01:18:10,380 --> 01:18:14,130
 define some notion of some set of

3824
01:18:12,439 --> 01:18:14,130
 

3825
01:18:12,449 --> 01:18:15,780
 allowable perturbation regions and

3826
01:18:14,120 --> 01:18:15,780
 

3827
01:18:14,130 --> 01:18:17,250
 sample from this and then try to

3828
01:18:15,770 --> 01:18:17,250
 

3829
01:18:15,780 --> 01:18:17,760
 generalize the new ones and we're not

3830
01:18:17,240 --> 01:18:17,760
 

3831
01:18:17,250 --> 01:18:19,080
 there yet

3832
01:18:17,750 --> 01:18:19,080
 

3833
01:18:17,760 --> 01:18:20,580
 so what's the one to add a final note

3834
01:18:19,070 --> 01:18:20,580
 

3835
01:18:19,080 --> 01:18:21,840
 there this is really not informative to

3836
01:18:20,570 --> 01:18:21,840
 

3837
01:18:20,580 --> 01:18:23,820
 evaluate these models against other

3838
01:18:21,830 --> 01:18:23,820
 

3839
01:18:21,840 --> 01:18:26,280
 threat models if you want a model that

3840
01:18:23,810 --> 01:18:26,280
 

3841
01:18:23,820 --> 01:18:28,110
 will defend well against l2 or l1 attack

3842
01:18:26,270 --> 01:18:28,110
 

3843
01:18:26,280 --> 01:18:31,739
 this trainer model against l1 and l2

3844
01:18:28,100 --> 01:18:31,739
 

3845
01:18:28,110 --> 01:18:33,420
 attacks for the same PGD method now

3846
01:18:31,729 --> 01:18:33,420
 

3847
01:18:31,739 --> 01:18:34,889
 another kind of final question is what

3848
01:18:33,410 --> 01:18:34,889
 

3849
01:18:33,420 --> 01:18:36,389
 makes these models robust why are they

3850
01:18:34,879 --> 01:18:36,389
 

3851
01:18:34,889 --> 01:18:37,710
 robust and one way to look at this is

3852
01:18:36,379 --> 01:18:37,710
 

3853
01:18:36,389 --> 01:18:39,239
 actually by looking at the cost surfaces

3854
01:18:37,700 --> 01:18:39,239
 

3855
01:18:37,710 --> 01:18:41,699
 of these models so I'm showing here is

3856
01:18:39,229 --> 01:18:41,699
 

3857
01:18:39,239 --> 01:18:43,260
 actually the the lost surface predicted

3858
01:18:41,689 --> 01:18:43,260
 

3859
01:18:41,699 --> 01:18:45,179
 along two dimensions here including the

3860
01:18:43,250 --> 01:18:45,179
 

3861
01:18:43,260 --> 01:18:47,130
 the adversarial dimension and if we take

3862
01:18:45,169 --> 01:18:47,130
 

3863
01:18:45,179 --> 01:18:49,650
 our standard training that loss really

3864
01:18:47,120 --> 01:18:49,650
 

3865
01:18:47,130 --> 01:18:51,989
 is quite steep so so very close to the

3866
01:18:49,640 --> 01:18:51,989
 

3867
01:18:49,650 --> 01:18:55,679
 point this is all within an epsilon ball

3868
01:18:51,979 --> 01:18:55,679
 

3869
01:18:51,989 --> 01:18:57,300
 of zero point zero point one for M miss

3870
01:18:55,669 --> 01:18:57,300
 

3871
01:18:55,679 --> 01:19:00,840
 there's there's a lot of directions a

3872
01:18:57,290 --> 01:19:00,840
 

3873
01:18:57,300 --> 01:19:02,909
 barely really sharp increase whereas the

3874
01:19:00,830 --> 01:19:02,909
 

3875
01:19:00,840 --> 01:19:04,199
 lost surface of the robust model and the

3876
01:19:02,899 --> 01:19:04,199
 

3877
01:19:02,909 --> 01:19:05,699
 important point here is actually the

3878
01:19:04,189 --> 01:19:05,699
 

3879
01:19:04,199 --> 01:19:07,920
 scale on the right and you can see that

3880
01:19:05,689 --> 01:19:07,920
 

3881
01:19:05,699 --> 01:19:09,300
 but it's basically the bumpiest here is

3882
01:19:07,910 --> 01:19:09,300
 

3883
01:19:07,920 --> 01:19:10,530
 just sort of numerical things that

3884
01:19:09,290 --> 01:19:10,530
 

3885
01:19:09,300 --> 01:19:11,969
 really what's what's happening here is

3886
01:19:10,520 --> 01:19:11,969
 

3887
01:19:10,530 --> 01:19:15,179
 that this is essentially a flat surface

3888
01:19:11,959 --> 01:19:15,179
 

3889
01:19:11,969 --> 01:19:18,210
 so it seems like when we train these

3890
01:19:15,169 --> 01:19:18,210
 

3891
01:19:15,179 --> 01:19:20,340
 things with PGD we genuinely get lost

3892
01:19:18,200 --> 01:19:20,340
 

3893
01:19:18,210 --> 01:19:22,560
 surfaces that are quite smooth and flat

3894
01:19:20,330 --> 01:19:22,560
 

3895
01:19:20,340 --> 01:19:24,330
 they don't seem to have these big peaks

3896
01:19:22,550 --> 01:19:24,330
 

3897
01:19:22,560 --> 01:19:25,770
 and that of course means that they're

3898
01:19:24,320 --> 01:19:25,770
 

3899
01:19:24,330 --> 01:19:27,210
 you know they're much they're not going

3900
01:19:25,760 --> 01:19:27,210
 

3901
01:19:25,770 --> 01:19:29,639
 to be susceptible to these adversarial

3902
01:19:27,200 --> 01:19:29,639
 

3903
01:19:27,210 --> 01:19:31,530
 attacks now of course we can't verify

3904
01:19:29,629 --> 01:19:31,530
 

3905
01:19:29,639 --> 01:19:32,969
 that along every dimension right that's

3906
01:19:31,520 --> 01:19:32,969
 

3907
01:19:31,530 --> 01:19:35,280
 the whole point is that you know we

3908
01:19:32,959 --> 01:19:35,280
 

3909
01:19:32,969 --> 01:19:37,590
 can't check every possible corner of

3910
01:19:35,270 --> 01:19:37,590
 

3911
01:19:35,280 --> 01:19:39,690
 this this to the end corners of the of

3912
01:19:37,580 --> 01:19:39,690
 

3913
01:19:37,590 --> 01:19:40,860
 the norm ball but we can get some sense

3914
01:19:39,680 --> 01:19:40,860
 

3915
01:19:39,690 --> 01:19:45,599
 by looking at these kind of figures and

3916
01:19:40,850 --> 01:19:45,599
 

3917
01:19:40,860 --> 01:19:47,610
 looking at the loss in this way ok so

3918
01:19:45,589 --> 01:19:47,610
 

3919
01:19:45,599 --> 01:19:51,889
 this is the sort of in some sense the

3920
01:19:47,600 --> 01:19:51,889
 

3921
01:19:47,610 --> 01:19:53,490
 the best way we know how to train our

3922
01:19:51,879 --> 01:19:53,490
 

3923
01:19:51,889 --> 01:19:56,550
 empirically

3924
01:19:53,480 --> 01:19:56,550
 

3925
01:19:53,490 --> 01:19:58,950
 train models against attacks like this

3926
01:19:56,540 --> 01:19:58,950
 

3927
01:19:56,550 --> 01:20:00,630
 and while you know the jury is of course

3928
01:19:58,940 --> 01:20:00,630
 

3929
01:19:58,950 --> 01:20:02,730
 still out whenever you have a method

3930
01:20:00,620 --> 01:20:02,730
 

3931
01:20:00,630 --> 01:20:05,540
 that's only empirical they seem to hold

3932
01:20:02,720 --> 01:20:05,540
 

3933
01:20:02,730 --> 01:20:08,580
 up really well against possible attacks

3934
01:20:05,530 --> 01:20:08,580
 

3935
01:20:05,540 --> 01:20:11,180
 so the natural question is you know we

3936
01:20:08,570 --> 01:20:11,180
 

3937
01:20:08,580 --> 01:20:13,890
 have these seemingly robust models and

3938
01:20:11,170 --> 01:20:13,890
 

3939
01:20:11,180 --> 01:20:17,040
 in the last section I also describe to

3940
01:20:13,880 --> 01:20:17,040
 

3941
01:20:13,890 --> 01:20:19,800
 you some tractable convex ways of

3942
01:20:17,030 --> 01:20:19,800
 

3943
01:20:17,040 --> 01:20:22,680
 verifying whether they're classifiers

3944
01:20:19,790 --> 01:20:22,680
 

3945
01:20:19,800 --> 01:20:25,410
 robust or not let's see if we can take

3946
01:20:22,670 --> 01:20:25,410
 

3947
01:20:22,680 --> 01:20:31,560
 these robust models and actually verify

3948
01:20:25,400 --> 01:20:31,560
 

3949
01:20:25,410 --> 01:20:32,580
 them so let's use the convex balance in

3950
01:20:31,550 --> 01:20:32,580
 

3951
01:20:31,560 --> 01:20:34,080
 this case we're gonna use those

3952
01:20:32,570 --> 01:20:34,080
 

3953
01:20:32,580 --> 01:20:36,870
 interval-based bounces the simple one

3954
01:20:34,070 --> 01:20:36,870
 

3955
01:20:34,080 --> 01:20:39,750
 ascribe at the end to see what sort of

3956
01:20:36,860 --> 01:20:39,750
 

3957
01:20:36,870 --> 01:20:45,300
 level of adversarial performance we can

3958
01:20:39,740 --> 01:20:45,300
 

3959
01:20:39,750 --> 01:20:45,960
 guarantee for the robust model okay so

3960
01:20:45,290 --> 01:20:45,960
 

3961
01:20:45,300 --> 01:20:48,600
 here we go

3962
01:20:45,950 --> 01:20:48,600
 

3963
01:20:45,960 --> 01:20:50,430
 here's the big reveal here so clean

3964
01:20:48,590 --> 01:20:50,430
 

3965
01:20:48,600 --> 01:20:51,810
 error for both the confident and the

3966
01:20:50,420 --> 01:20:51,810
 

3967
01:20:50,430 --> 01:20:53,160
 robust training comm that is about the

3968
01:20:51,800 --> 01:20:53,160
 

3969
01:20:51,810 --> 01:20:55,500
 same

3970
01:20:53,150 --> 01:20:55,500
 

3971
01:20:53,160 --> 01:20:58,050
 of course F GSM attacks do much better

3972
01:20:55,490 --> 01:20:58,050
 

3973
01:20:55,500 --> 01:21:00,630
 on the robust are on the normal or are

3974
01:20:58,040 --> 01:21:00,630
 

3975
01:20:58,050 --> 01:21:03,810
 able to fool the the normal model much

3976
01:21:00,620 --> 01:21:03,810
 

3977
01:21:00,630 --> 01:21:07,170
 more than the robust model PGD also

3978
01:21:03,800 --> 01:21:07,170
 

3979
01:21:03,810 --> 01:21:08,580
 fools the normal model even more and the

3980
01:21:07,160 --> 01:21:08,580
 

3981
01:21:07,170 --> 01:21:09,990
 question of course is what's this robust

3982
01:21:08,570 --> 01:21:09,990
 

3983
01:21:08,580 --> 01:21:11,010
 bound gonna tell us you know maybe it

3984
01:21:09,980 --> 01:21:11,010
 

3985
01:21:09,990 --> 01:21:13,620
 probably can't tell us anything about

3986
01:21:11,000 --> 01:21:13,620
 

3987
01:21:11,010 --> 01:21:14,460
 there about the the normal comp net but

3988
01:21:13,610 --> 01:21:14,460
 

3989
01:21:13,620 --> 01:21:17,760
 maybe you can tell us something about

3990
01:21:14,450 --> 01:21:17,760
 

3991
01:21:14,460 --> 01:21:20,130
 our robust model be trained and

3992
01:21:17,750 --> 01:21:20,130
 

3993
01:21:17,760 --> 01:21:21,780
 unfortunately the actual robust balance

3994
01:21:20,120 --> 01:21:21,780
 

3995
01:21:20,130 --> 01:21:23,820
 you get if you run the convex procedure

3996
01:21:21,770 --> 01:21:23,820
 

3997
01:21:21,780 --> 01:21:26,220
 for both these things is completely

3998
01:21:23,810 --> 01:21:26,220
 

3999
01:21:23,820 --> 01:21:27,960
 vacuous and it's not just almost vacuous

4000
01:21:26,210 --> 01:21:27,960
 

4001
01:21:26,220 --> 01:21:29,430
 it's like really totally vacuous here

4002
01:21:27,950 --> 01:21:29,430
 

4003
01:21:27,960 --> 01:21:31,560
 like I think you have to get epsilon

4004
01:21:29,420 --> 01:21:31,560
 

4005
01:21:29,430 --> 01:21:33,060
 down so this is an epsilon of 0.1 I

4006
01:21:31,550 --> 01:21:33,060
 

4007
01:21:31,560 --> 01:21:35,670
 think to get a reasonable yet to go to

4008
01:21:33,050 --> 01:21:35,670
 

4009
01:21:33,060 --> 01:21:37,020
 Epsilon point zero zero zero one or a

4010
01:21:35,660 --> 01:21:37,020
 

4011
01:21:35,670 --> 01:21:39,480
 zero zero zero two or something like

4012
01:21:37,010 --> 01:21:39,480
 

4013
01:21:37,020 --> 01:21:42,210
 that it's you're not you're not anywhere

4014
01:21:39,470 --> 01:21:42,210
 

4015
01:21:39,480 --> 01:21:43,710
 close with these kind of things so

4016
01:21:42,200 --> 01:21:43,710
 

4017
01:21:42,210 --> 01:21:46,050
 what's happening here why you know we

4018
01:21:43,700 --> 01:21:46,050
 

4019
01:21:43,710 --> 01:21:48,480
 had this we had this great thing but but

4020
01:21:46,040 --> 01:21:48,480
 

4021
01:21:46,050 --> 01:21:50,340
 that we can prove about models but but

4022
01:21:48,470 --> 01:21:50,340
 

4023
01:21:48,480 --> 01:21:52,620
 it doesn't give us anything useful of

4024
01:21:50,330 --> 01:21:52,620
 

4025
01:21:50,340 --> 01:21:53,790
 course if we could solve the IP about

4026
01:21:52,610 --> 01:21:53,790
 

4027
01:21:52,620 --> 01:21:55,200
 these things and we might have more

4028
01:21:53,780 --> 01:21:55,200
 

4029
01:21:53,790 --> 01:21:57,240
 stuff but actually this model is too big

4030
01:21:55,190 --> 01:21:57,240
 

4031
01:21:55,200 --> 01:21:58,920
 to solve the integer program for that

4032
01:21:57,230 --> 01:21:58,920
 

4033
01:21:57,240 --> 01:21:59,940
 that would take I don't know about the

4034
01:21:58,910 --> 01:21:59,940
 

4035
01:21:58,920 --> 01:22:01,230
 heat death of the universe we would take

4036
01:21:59,930 --> 01:22:01,230
 

4037
01:21:59,940 --> 01:22:05,760
 a really long time at least in my

4038
01:22:01,220 --> 01:22:05,760
 

4039
01:22:01,230 --> 01:22:08,160
 implementation to solve this okay so

4040
01:22:05,750 --> 01:22:08,160
 

4041
01:22:05,760 --> 01:22:11,660
 so what's going on here and the key

4042
01:22:08,150 --> 01:22:11,660
 

4043
01:22:08,160 --> 01:22:14,280
 insight here is that models can be

4044
01:22:11,650 --> 01:22:14,280
 

4045
01:22:11,660 --> 01:22:17,730
 bottles that can be broke convex Li

4046
01:22:14,270 --> 01:22:17,730
 

4047
01:22:14,280 --> 01:22:20,100
 verified are a small subset of what

4048
01:22:17,720 --> 01:22:20,100
 

4049
01:22:17,730 --> 01:22:22,110
 seemed to be the actually robust models

4050
01:22:20,090 --> 01:22:22,110
 

4051
01:22:20,100 --> 01:22:23,760
 right and so if you think about sort of

4052
01:22:22,100 --> 01:22:23,760
 

4053
01:22:22,110 --> 01:22:25,140
 a Venn diagram here there's all models

4054
01:22:23,750 --> 01:22:25,140
 

4055
01:22:23,760 --> 01:22:27,060
 including non robust ones there's some

4056
01:22:25,130 --> 01:22:27,060
 

4057
01:22:25,140 --> 01:22:28,710
 space of robust models in that and then

4058
01:22:27,050 --> 01:22:28,710
 

4059
01:22:27,060 --> 01:22:31,710
 within that there's some space of convex

4060
01:22:28,700 --> 01:22:31,710
 

4061
01:22:28,710 --> 01:22:32,670
 lis verifiable models right maybe we

4062
01:22:31,700 --> 01:22:32,670
 

4063
01:22:31,710 --> 01:22:34,560
 haven't actually proven whether that's

4064
01:22:32,660 --> 01:22:34,560
 

4065
01:22:32,670 --> 01:22:35,940
 empty or not that could could be empty

4066
01:22:34,550 --> 01:22:35,940
 

4067
01:22:34,560 --> 01:22:38,520
 but stay tuned for that

4068
01:22:35,930 --> 01:22:38,520
 

4069
01:22:35,940 --> 01:22:40,830
 and it turns out that these convex

4070
01:22:38,510 --> 01:22:40,830
 

4071
01:22:38,520 --> 01:22:44,160
 balance sort of the the tractable

4072
01:22:40,820 --> 01:22:44,160
 

4073
01:22:40,830 --> 01:22:47,270
 provable balance that we have are very

4074
01:22:44,150 --> 01:22:47,270
 

4075
01:22:44,160 --> 01:22:50,130
 loose unless the model is built

4076
01:22:47,260 --> 01:22:50,130
 

4077
01:22:47,270 --> 01:22:52,080
 specifically with them in mind all right

4078
01:22:50,120 --> 01:22:52,080
 

4079
01:22:50,130 --> 01:22:54,090
 so it's great that we have these bounds

4080
01:22:52,070 --> 01:22:54,090
 

4081
01:22:52,080 --> 01:22:55,830
 but we're actually get them say anything

4082
01:22:54,080 --> 01:22:55,830
 

4083
01:22:54,090 --> 01:22:59,040
 non vacuous about classifiers

4084
01:22:55,820 --> 01:22:59,040
 

4085
01:22:55,830 --> 01:23:02,130
 we actually need to train models upon

4086
01:22:59,030 --> 01:23:02,130
 

4087
01:22:59,040 --> 01:23:03,510
 them so this is in fact bringing me

4088
01:23:02,120 --> 01:23:03,510
 

4089
01:23:02,130 --> 01:23:06,120
 towards the end of what I'm going to say

4090
01:23:03,500 --> 01:23:06,120
 

4091
01:23:03,510 --> 01:23:09,540
 here because it turns out this is

4092
01:23:06,110 --> 01:23:09,540
 

4093
01:23:06,120 --> 01:23:10,980
 possible so the convex bounds I describe

4094
01:23:09,530 --> 01:23:10,980
 

4095
01:23:09,540 --> 01:23:13,170
 select the interval balance those those

4096
01:23:10,970 --> 01:23:13,170
 

4097
01:23:10,980 --> 01:23:16,500
 notions are propagating a box through

4098
01:23:13,160 --> 01:23:16,500
 

4099
01:23:13,170 --> 01:23:19,020
 the network this just like a normal

4100
01:23:16,490 --> 01:23:19,020
 

4101
01:23:16,500 --> 01:23:21,930
 network is actually also a convex

4102
01:23:19,010 --> 01:23:21,930
 

4103
01:23:19,020 --> 01:23:23,730
 function of the network parameters so it

4104
01:23:21,920 --> 01:23:23,730
 

4105
01:23:21,930 --> 01:23:24,989
 you know it's a function of the weights

4106
01:23:23,720 --> 01:23:24,989
 

4107
01:23:23,730 --> 01:23:27,300
 and the bias these and all its kind of

4108
01:23:24,979 --> 01:23:27,300
 

4109
01:23:24,989 --> 01:23:28,410
 stuff and I don't you don't don't don't

4110
01:23:27,290 --> 01:23:28,410
 

4111
01:23:27,300 --> 01:23:29,970
 I won't go back to that but it's

4112
01:23:28,400 --> 01:23:29,970
 

4113
01:23:28,410 --> 01:23:31,380
 basically involves you know Max's of

4114
01:23:29,960 --> 01:23:31,380
 

4115
01:23:29,970 --> 01:23:34,050
 these things and zeros and the positive

4116
01:23:31,370 --> 01:23:34,050
 

4117
01:23:31,380 --> 01:23:35,970
 negative parts etc but it's still just a

4118
01:23:34,040 --> 01:23:35,970
 

4119
01:23:34,050 --> 01:23:37,950
 differentiable function of the network

4120
01:23:35,960 --> 01:23:37,950
 

4121
01:23:35,970 --> 01:23:40,739
 parameters and what that means is I can

4122
01:23:37,940 --> 01:23:40,739
 

4123
01:23:37,950 --> 01:23:42,660
 that my final bound that I have my final

4124
01:23:40,729 --> 01:23:42,660
 

4125
01:23:40,739 --> 01:23:45,720
 convex bound I have on these things is

4126
01:23:42,650 --> 01:23:45,720
 

4127
01:23:42,660 --> 01:23:48,030
 also a differentiable function of the

4128
01:23:45,710 --> 01:23:48,030
 

4129
01:23:45,720 --> 01:23:51,180
 model parameters so what can you guys

4130
01:23:48,020 --> 01:23:51,180
 

4131
01:23:48,030 --> 01:23:53,460
 these to actually minimize not my actual

4132
01:23:51,170 --> 01:23:53,460
 

4133
01:23:51,180 --> 01:23:55,230
 robust loss that's very hard that's sort

4134
01:23:53,450 --> 01:23:55,230
 

4135
01:23:53,460 --> 01:23:58,080
 of a comments real hard thing but I can

4136
01:23:55,220 --> 01:23:58,080
 

4137
01:23:55,230 --> 01:24:01,140
 use to minimize an upper bound a strict

4138
01:23:58,070 --> 01:24:01,140
 

4139
01:23:58,080 --> 01:24:04,880
 provable upper bound on the convex our

4140
01:24:01,130 --> 01:24:04,880
 

4141
01:24:01,140 --> 01:24:07,380
 sorry on the robust loss of a classifier

4142
01:24:04,870 --> 01:24:07,380
 

4143
01:24:04,880 --> 01:24:08,880
 of course the the actual outer opposite

4144
01:24:07,370 --> 01:24:08,880
 

4145
01:24:07,380 --> 01:24:11,970
 reviews still not so long convex but at

4146
01:24:08,870 --> 01:24:11,970
 

4147
01:24:08,880 --> 01:24:13,530
 least we have you known people bound and

4148
01:24:11,960 --> 01:24:13,530
 

4149
01:24:11,970 --> 01:24:16,440
 actually some reasonable work kind of

4150
01:24:13,520 --> 01:24:16,440
 

4151
01:24:13,530 --> 01:24:18,150
 surprisingly shows that interval battle

4152
01:24:16,430 --> 01:24:18,150
 

4153
01:24:16,440 --> 01:24:19,260
 interval bound propagation actually can

4154
01:24:18,140 --> 01:24:19,260
 

4155
01:24:18,150 --> 01:24:21,840
 sometimes work better

4156
01:24:19,250 --> 01:24:21,840
 

4157
01:24:19,260 --> 01:24:22,920
 for this then more complex approaches

4158
01:24:21,830 --> 01:24:22,920
 

4159
01:24:21,840 --> 01:24:24,840
 even though I think the jury is still

4160
01:24:22,910 --> 01:24:24,840
 

4161
01:24:22,920 --> 01:24:27,390
 out on exactly what level of complexity

4162
01:24:24,830 --> 01:24:27,390
 

4163
01:24:24,840 --> 01:24:31,260
 you want for your training versus for

4164
01:24:27,380 --> 01:24:31,260
 

4165
01:24:27,390 --> 01:24:33,060
 your for your verification okay so let's

4166
01:24:31,250 --> 01:24:33,060
 

4167
01:24:31,260 --> 01:24:34,830
 see the final the final thing here I'm

4168
01:24:33,050 --> 01:24:34,830
 

4169
01:24:33,060 --> 01:24:36,930
 going to show before we will pop much

4170
01:24:34,820 --> 01:24:36,930
 

4171
01:24:34,830 --> 01:24:38,970
 further out again and and talk at a

4172
01:24:36,920 --> 01:24:38,970
 

4173
01:24:36,930 --> 01:24:40,890
 higher level and there should be time

4174
01:24:38,960 --> 01:24:40,890
 

4175
01:24:38,970 --> 01:24:45,030
 for questions at the end so if I I think

4176
01:24:40,880 --> 01:24:45,030
 

4177
01:24:40,890 --> 01:24:47,160
 we'll finish before before 10:30 okay so

4178
01:24:45,020 --> 01:24:47,160
 

4179
01:24:45,030 --> 01:24:50,820
 here's our different settings here is

4180
01:24:47,150 --> 01:24:50,820
 

4181
01:24:47,160 --> 01:24:52,110
 again showing test error the the attacks

4182
01:24:50,810 --> 01:24:52,110
 

4183
01:24:50,820 --> 01:24:53,910
 of the different things as well as the

4184
01:24:52,100 --> 01:24:53,910
 

4185
01:24:52,110 --> 01:24:56,580
 provable bounds are confident you know

4186
01:24:53,900 --> 01:24:56,580
 

4187
01:24:53,910 --> 01:24:59,700
 gets bad in all regards except normal

4188
01:24:56,570 --> 01:24:59,700
 

4189
01:24:56,580 --> 01:25:02,610
 clean error our robust confident we

4190
01:24:59,690 --> 01:25:02,610
 

4191
01:24:59,700 --> 01:25:04,110
 train with PGD works well and all the

4192
01:25:02,600 --> 01:25:04,110
 

4193
01:25:02,610 --> 01:25:06,960
 empirical attacks but the bound itself

4194
01:25:04,100 --> 01:25:06,960
 

4195
01:25:04,110 --> 01:25:09,180
 is complete vacuous but finally if I

4196
01:25:06,950 --> 01:25:09,180
 

4197
01:25:06,960 --> 01:25:12,780
 actually train the network to minimize

4198
01:25:09,170 --> 01:25:12,780
 

4199
01:25:09,180 --> 01:25:14,640
 this bound we get the following so this

4200
01:25:12,770 --> 01:25:14,640
 

4201
01:25:12,780 --> 01:25:16,080
 is just a quick one that we have again

4202
01:25:14,630 --> 01:25:16,080
 

4203
01:25:14,640 --> 01:25:17,460
 in the notes you can do much better than

4204
01:25:16,070 --> 01:25:17,460
 

4205
01:25:16,080 --> 01:25:18,840
 this you can get this down at least on

4206
01:25:17,450 --> 01:25:18,840
 

4207
01:25:17,460 --> 01:25:19,860
 the end this quite low but I don't want

4208
01:25:18,830 --> 01:25:19,860
 

4209
01:25:18,840 --> 01:25:20,940
 actually make it too low because that

4210
01:25:19,850 --> 01:25:20,940
 

4211
01:25:19,860 --> 01:25:22,620
 will give a false impression you can do

4212
01:25:20,930 --> 01:25:22,620
 

4213
01:25:20,940 --> 01:25:24,090
 that any dataset and other ones it's

4214
01:25:22,610 --> 01:25:24,090
 

4215
01:25:22,620 --> 01:25:26,010
 much harder but leaves on em this you

4216
01:25:24,080 --> 01:25:26,010
 

4217
01:25:24,090 --> 01:25:28,200
 can get these down pretty low and so

4218
01:25:26,000 --> 01:25:28,200
 

4219
01:25:26,010 --> 01:25:30,690
 what we have here it's not gonna win the

4220
01:25:28,190 --> 01:25:30,690
 

4221
01:25:28,200 --> 01:25:35,190
 awards by any means what we have is we

4222
01:25:30,680 --> 01:25:35,190
 

4223
01:25:30,690 --> 01:25:38,100
 have an amnesty we're on the test set I

4224
01:25:35,180 --> 01:25:38,100
 

4225
01:25:35,190 --> 01:25:39,390
 know that no matter what attack I have

4226
01:25:38,090 --> 01:25:39,390
 

4227
01:25:38,100 --> 01:25:40,830
 no matter how many more papers are

4228
01:25:39,380 --> 01:25:40,830
 

4229
01:25:39,390 --> 01:25:44,280
 written about attacks no matter anything

4230
01:25:40,820 --> 01:25:44,280
 

4231
01:25:40,830 --> 01:25:47,180
 no one's gonna have higher error higher

4232
01:25:44,270 --> 01:25:47,180
 

4233
01:25:44,280 --> 01:25:49,380
 robust you know adversarial error with

4234
01:25:47,170 --> 01:25:49,380
 

4235
01:25:47,180 --> 01:25:51,630
 Ellen a lot of qualifications here right

4236
01:25:49,370 --> 01:25:51,630
 

4237
01:25:49,380 --> 01:25:54,360
 with L infinity bad perturbations under

4238
01:25:51,620 --> 01:25:54,360
 

4239
01:25:51,630 --> 01:25:57,510
 epsilon of 0.1 no one's gonna ever

4240
01:25:54,350 --> 01:25:57,510
 

4241
01:25:54,360 --> 01:25:59,970
 reveal a higher error than then 9.7 on

4242
01:25:57,500 --> 01:25:59,970
 

4243
01:25:57,510 --> 01:26:01,470
 this classifier so that's that's that's

4244
01:25:59,960 --> 01:26:01,470
 

4245
01:25:59,970 --> 01:26:03,570
 nice it's something we couldn't do I

4246
01:26:01,460 --> 01:26:03,570
 

4247
01:26:01,470 --> 01:26:05,940
 didn't know how to do even a little bit

4248
01:26:03,560 --> 01:26:05,940
 

4249
01:26:03,570 --> 01:26:07,980
 more than a year ago and these

4250
01:26:05,930 --> 01:26:07,980
 

4251
01:26:05,940 --> 01:26:11,100
 techniques have now really been sort of

4252
01:26:07,970 --> 01:26:11,100
 

4253
01:26:07,980 --> 01:26:12,600
 been been growing a lot within the

4254
01:26:11,090 --> 01:26:12,600
 

4255
01:26:11,100 --> 01:26:13,860
 machine learning literature and so we're

4256
01:26:12,590 --> 01:26:13,860
 

4257
01:26:12,600 --> 01:26:15,510
 coming with a lot more techniques for

4258
01:26:13,850 --> 01:26:15,510
 

4259
01:26:13,860 --> 01:26:17,040
 verifying them things as well as trained

4260
01:26:15,500 --> 01:26:17,040
 

4261
01:26:15,510 --> 01:26:21,000
 as little as well as training these

4262
01:26:17,030 --> 01:26:21,000
 

4263
01:26:17,040 --> 01:26:23,210
 verified models okay so one last note

4264
01:26:20,990 --> 01:26:23,210
 

4265
01:26:21,000 --> 01:26:26,910
 for me before I throw it back to to Alex

4266
01:26:23,200 --> 01:26:26,910
 

4267
01:26:23,210 --> 01:26:30,510
 and that is these results seem good

4268
01:26:26,900 --> 01:26:30,510
 

4269
01:26:26,910 --> 01:26:32,250
 right it seems promising here I had you

4270
01:26:30,500 --> 01:26:32,250
 

4271
01:26:30,510 --> 01:26:32,850
 know a bad normal model I trained a

4272
01:26:32,240 --> 01:26:32,850
 

4273
01:26:32,250 --> 01:26:36,510
 robust mom

4274
01:26:32,840 --> 01:26:36,510
 

4275
01:26:32,850 --> 01:26:37,890
 everything looked good I could even

4276
01:26:36,500 --> 01:26:37,890
 

4277
01:26:36,510 --> 01:26:39,180
 train a provably robust model to get

4278
01:26:37,880 --> 01:26:39,180
 

4279
01:26:37,890 --> 01:26:40,980
 maybe a little say worse accuracy but

4280
01:26:39,170 --> 01:26:40,980
 

4281
01:26:39,180 --> 01:26:42,240
 Prius a pretty good accuracy and things

4282
01:26:40,970 --> 01:26:42,240
 

4283
01:26:40,980 --> 01:26:44,760
 seemed really good

4284
01:26:42,230 --> 01:26:44,760
 

4285
01:26:42,240 --> 01:26:47,280
 however one thing I should emphasize is

4286
01:26:44,750 --> 01:26:47,280
 

4287
01:26:44,760 --> 01:26:49,560
 that these sort of promising results at

4288
01:26:47,270 --> 01:26:49,560
 

4289
01:26:47,280 --> 01:26:51,750
 least currently are to a large extent

4290
01:26:49,550 --> 01:26:51,750
 

4291
01:26:49,560 --> 01:26:54,600
 actually more a function of M inist than

4292
01:26:51,740 --> 01:26:54,600
 

4293
01:26:51,750 --> 01:26:56,520
 a function of our ability to scale these

4294
01:26:54,590 --> 01:26:56,520
 

4295
01:26:54,600 --> 01:26:58,770
 things to really big problems all right

4296
01:26:56,510 --> 01:26:58,770
 

4297
01:26:56,520 --> 01:27:01,440
 so so M this is is also actually quite

4298
01:26:58,760 --> 01:27:01,440
 

4299
01:26:58,770 --> 01:27:02,640
 easy against to prevent to secure us

4300
01:27:01,430 --> 01:27:02,640
 

4301
01:27:01,440 --> 01:27:04,440
 attacks because it's kind of a binary

4302
01:27:02,630 --> 01:27:04,440
 

4303
01:27:02,640 --> 01:27:06,240
 problem right if there's there's pixels

4304
01:27:04,430 --> 01:27:06,240
 

4305
01:27:04,440 --> 01:27:07,350
 that are on or off and you know adding a

4306
01:27:06,230 --> 01:27:07,350
 

4307
01:27:06,240 --> 01:27:09,840
 little bit noise here and there doesn't

4308
01:27:07,340 --> 01:27:09,840
 

4309
01:27:07,350 --> 01:27:13,730
 really make things that much harder

4310
01:27:09,830 --> 01:27:13,730
 

4311
01:27:09,840 --> 01:27:16,860
 intuitively but for example like see far

4312
01:27:13,720 --> 01:27:16,860
 

4313
01:27:13,730 --> 01:27:19,680
 the best bounds that we know of the best

4314
01:27:16,850 --> 01:27:19,680
 

4315
01:27:16,860 --> 01:27:21,090
 empirical balance that we know of which

4316
01:27:19,670 --> 01:27:21,090
 

4317
01:27:19,680 --> 01:27:22,500
 you know see if we resolve to like three

4318
01:27:21,080 --> 01:27:22,500
 

4319
01:27:21,090 --> 01:27:26,160
 percent error currently maybe even lower

4320
01:27:22,490 --> 01:27:26,160
 

4321
01:27:22,500 --> 01:27:28,590
 now see about 10 this is I'll see var 10

4322
01:27:26,150 --> 01:27:28,590
 

4323
01:27:26,160 --> 01:27:31,980
 the best empirical bounds we know of say

4324
01:27:28,580 --> 01:27:31,980
 

4325
01:27:28,590 --> 01:27:33,900
 that the error is we can't find a TAC

4326
01:27:31,970 --> 01:27:33,900
 

4327
01:27:31,980 --> 01:27:35,730
 that gives what that you're pretty small

4328
01:27:33,890 --> 01:27:35,730
 

4329
01:27:33,900 --> 01:27:38,850
 perturbation about smaller than the one

4330
01:27:35,720 --> 01:27:38,850
 

4331
01:27:35,730 --> 01:27:43,410
 we showed for M this there we have a

4332
01:27:38,840 --> 01:27:43,410
 

4333
01:27:38,850 --> 01:27:45,420
 guaranteed bound of 50 we can achieve 53

4334
01:27:43,400 --> 01:27:45,420
 

4335
01:27:43,410 --> 01:27:47,130
 percent error with the best methods that

4336
01:27:45,410 --> 01:27:47,130
 

4337
01:27:45,420 --> 01:27:48,330
 we know how to do and the provable

4338
01:27:47,120 --> 01:27:48,330
 

4339
01:27:47,130 --> 01:27:50,400
 balance does we can do is say there's

4340
01:27:48,320 --> 01:27:50,400
 

4341
01:27:48,330 --> 01:27:51,810
 about us you know we know we can form a

4342
01:27:50,390 --> 01:27:51,810
 

4343
01:27:50,400 --> 01:27:54,690
 model that has less than 70 percent

4344
01:27:51,800 --> 01:27:54,690
 

4345
01:27:51,810 --> 01:27:57,890
 error on C far worse again the state of

4346
01:27:54,680 --> 01:27:57,890
 

4347
01:27:54,690 --> 01:28:01,100
 the art now is around 3% so for larger

4348
01:27:57,880 --> 01:28:01,100
 

4349
01:27:57,890 --> 01:28:03,330
 problems scaling these things up and

4350
01:28:01,090 --> 01:28:03,330
 

4351
01:28:01,100 --> 01:28:05,850
 finding the architectures the both the

4352
01:28:03,320 --> 01:28:05,850
 

4353
01:28:03,330 --> 01:28:07,830
 architectures the bounds and the

4354
01:28:05,840 --> 01:28:07,830
 

4355
01:28:05,850 --> 01:28:10,380
 optimization procedures they will make

4356
01:28:07,820 --> 01:28:10,380
 

4357
01:28:07,830 --> 01:28:13,530
 these things work is still very much an

4358
01:28:10,370 --> 01:28:13,530
 

4359
01:28:10,380 --> 01:28:16,110
 open question and it's the topic of

4360
01:28:13,520 --> 01:28:16,110
 

4361
01:28:13,530 --> 01:28:18,060
 current and ongoing research both in the

4362
01:28:16,100 --> 01:28:18,060
 

4363
01:28:16,110 --> 01:28:20,910
 empirical attack side and defense side

4364
01:28:18,050 --> 01:28:20,910
 

4365
01:28:18,060 --> 01:28:23,490
 and in the provable attack in the fence

4366
01:28:20,900 --> 01:28:23,490
 

4367
01:28:20,910 --> 01:28:24,630
 side so next up Alex doesn't talk a

4368
01:28:23,480 --> 01:28:24,630
 

4369
01:28:23,490 --> 01:28:27,510
 little bit more about this as well as a

4370
01:28:24,620 --> 01:28:27,510
 

4371
01:28:24,630 --> 01:28:31,100
 higher level of issues that arise from

4372
01:28:27,500 --> 01:28:31,100
 

4373
01:28:27,510 --> 01:28:31,100
 these adversarial examples

4374
01:28:32,050 --> 01:28:32,050
 

4375
01:28:32,060 --> 01:28:39,999
[Applause]

4376
01:28:47,920 --> 01:28:47,920
 

4377
01:28:47,930 --> 01:28:54,890
 okay so welcome back thanks it was

4378
01:28:50,770 --> 01:28:54,890
 

4379
01:28:50,780 --> 01:28:57,650
 pretty nice even I learned something so

4380
01:28:54,880 --> 01:28:57,650
 

4381
01:28:54,890 --> 01:28:59,900
 yeah so so far is eco like this like

4382
01:28:57,640 --> 01:28:59,900
 

4383
01:28:57,650 --> 01:29:02,510
 provided this excellent view into kind

4384
01:28:59,890 --> 01:29:02,510
 

4385
01:28:59,900 --> 01:29:05,630
 of you know the not and nuts and bolts

4386
01:29:02,500 --> 01:29:05,630
 

4387
01:29:02,510 --> 01:29:07,280
 of like how do you diagnose robustness

4388
01:29:05,620 --> 01:29:07,280
 

4389
01:29:05,630 --> 01:29:10,520
 how do you ensure robustness and where

4390
01:29:07,270 --> 01:29:10,520
 

4391
01:29:07,280 --> 01:29:12,380
 we are but somehow I think we both feel

4392
01:29:10,510 --> 01:29:12,380
 

4393
01:29:10,520 --> 01:29:13,910
 is very important here is not to miss

4394
01:29:12,370 --> 01:29:13,910
 

4395
01:29:12,380 --> 01:29:16,130
 the big picture here that essentially

4396
01:29:13,900 --> 01:29:16,130
 

4397
01:29:13,910 --> 01:29:17,780
 against security and ensuring the

4398
01:29:16,120 --> 01:29:17,780
 

4399
01:29:16,130 --> 01:29:20,150
 security is very important but there

4400
01:29:17,770 --> 01:29:20,150
 

4401
01:29:17,780 --> 01:29:20,900
 actually is something even kind of a bit

4402
01:29:20,140 --> 01:29:20,900
 

4403
01:29:20,150 --> 01:29:22,370
 more high-level

4404
01:29:20,890 --> 01:29:22,370
 

4405
01:29:20,900 --> 01:29:24,050
 that is going on here so sort of like

4406
01:29:22,360 --> 01:29:24,050
 

4407
01:29:22,370 --> 01:29:26,000
 that the other side robustness might be

4408
01:29:24,040 --> 01:29:26,000
 

4409
01:29:24,050 --> 01:29:27,950
 it's an interesting notion by itself

4410
01:29:25,990 --> 01:29:27,950
 

4411
01:29:26,000 --> 01:29:30,680
 even if you take it outside of the

4412
01:29:27,940 --> 01:29:30,680
 

4413
01:29:27,950 --> 01:29:33,140
 context of security okay so just to

4414
01:29:30,670 --> 01:29:33,140
 

4415
01:29:30,680 --> 01:29:34,880
 remind so this is like in some ways this

4416
01:29:33,130 --> 01:29:34,880
 

4417
01:29:33,140 --> 01:29:37,970
 conceptual picture that emerges here is

4418
01:29:34,870 --> 01:29:37,970
 

4419
01:29:34,880 --> 01:29:39,860
 that kind of we can try to not only

4420
01:29:37,960 --> 01:29:39,860
 

4421
01:29:37,970 --> 01:29:41,870
 focus on the applications of ml that

4422
01:29:39,850 --> 01:29:41,870
 

4423
01:29:39,860 --> 01:29:43,550
 require security but actually like once

4424
01:29:41,860 --> 01:29:43,550
 

4425
01:29:41,870 --> 01:29:44,660
 we know that there are applications

4426
01:29:43,540 --> 01:29:44,660
 

4427
01:29:43,550 --> 01:29:47,030
 where we care about this kind of

4428
01:29:44,650 --> 01:29:47,030
 

4429
01:29:44,660 --> 01:29:48,980
 security aspects of ml we can take a

4430
01:29:47,020 --> 01:29:48,980
 

4431
01:29:47,030 --> 01:29:51,050
 step back and look at machine learning

4432
01:29:48,970 --> 01:29:51,050
 

4433
01:29:48,980 --> 01:29:53,240
 and see how does machine learning look

4434
01:29:51,040 --> 01:29:53,240
 

4435
01:29:51,050 --> 01:29:55,970
 like to this lens of robotics okay so

4436
01:29:53,230 --> 01:29:55,970
 

4437
01:29:53,240 --> 01:29:58,040
 specifically you know if I on one hand

4438
01:29:55,960 --> 01:29:58,040
 

4439
01:29:55,970 --> 01:29:59,480
 take this standard machine learning that

4440
01:29:58,030 --> 01:29:59,480
 

4441
01:29:58,040 --> 01:30:01,100
 we are doing now which corresponds to

4442
01:29:59,470 --> 01:30:01,100
 

4443
01:29:59,480 --> 01:30:03,200
 standard generalization you know how

4444
01:30:01,090 --> 01:30:03,200
 

4445
01:30:01,100 --> 01:30:04,880
 does differ from this kind of robust

4446
01:30:03,190 --> 01:30:04,880
 

4447
01:30:03,200 --> 01:30:06,500
 machine learning that am I trying to

4448
01:30:04,870 --> 01:30:06,500
 

4449
01:30:04,880 --> 01:30:08,270
 build here so she's like on the very

4450
01:30:06,490 --> 01:30:08,270
 

4451
01:30:06,500 --> 01:30:10,640
 mathematical level all that we are

4452
01:30:08,260 --> 01:30:10,640
 

4453
01:30:08,270 --> 01:30:13,340
 trying to compare is this two fields one

4454
01:30:10,630 --> 01:30:13,340
 

4455
01:30:10,640 --> 01:30:16,640
 that tries to maximize like 12 12 to

4456
01:30:13,330 --> 01:30:16,640
 

4457
01:30:13,340 --> 01:30:17,900
 achieve the first goal and the other one

4458
01:30:16,630 --> 01:30:17,900
 

4459
01:30:16,640 --> 01:30:19,670
 that tries to achieve the second goal

4460
01:30:17,890 --> 01:30:19,670
 

4461
01:30:17,900 --> 01:30:21,080
 and one thing that I really want to

4462
01:30:19,660 --> 01:30:21,080
 

4463
01:30:19,670 --> 01:30:23,000
 emphasize here the work should be really

4464
01:30:21,070 --> 01:30:23,000
 

4465
01:30:21,080 --> 01:30:25,910
 clear from what zico's dog that really

4466
01:30:22,990 --> 01:30:25,910
 

4467
01:30:23,000 --> 01:30:28,910
 even though we sort of discovered you

4468
01:30:25,900 --> 01:30:28,910
 

4469
01:30:25,910 --> 01:30:30,110
 know discovered in quotes the other cell

4470
01:30:28,900 --> 01:30:30,110
 

4471
01:30:28,910 --> 01:30:32,570
 examples in the context of deep learning

4472
01:30:30,100 --> 01:30:32,570
 

4473
01:30:30,110 --> 01:30:34,970
 it's really not only a deep learning

4474
01:30:32,560 --> 01:30:34,970
 

4475
01:30:32,570 --> 01:30:36,950
 problem by far yes in deep learning it's

4476
01:30:34,960 --> 01:30:36,950
 

4477
01:30:34,970 --> 01:30:39,050
 easier to find through examples but

4478
01:30:36,940 --> 01:30:39,050
 

4479
01:30:36,950 --> 01:30:41,390
 every type of classifiers that we know

4480
01:30:39,040 --> 01:30:41,390
 

4481
01:30:39,050 --> 01:30:43,250
 of has them why does it have them

4482
01:30:41,380 --> 01:30:43,250
 

4483
01:30:41,390 --> 01:30:44,810
 because again it was trying to achieve

4484
01:30:43,240 --> 01:30:44,810
 

4485
01:30:43,250 --> 01:30:46,700
 some organization it never cared about

4486
01:30:44,800 --> 01:30:46,700
 

4487
01:30:44,810 --> 01:30:48,680
 robust generalization so you know if we

4488
01:30:46,690 --> 01:30:48,680
 

4489
01:30:46,700 --> 01:30:49,610
 never design for it there is no reason

4490
01:30:48,670 --> 01:30:49,610
 

4491
01:30:48,680 --> 01:30:51,950
 for us to expect

4492
01:30:49,600 --> 01:30:51,950
 

4493
01:30:49,610 --> 01:30:53,870
 magically things happen okay so that's

4494
01:30:51,940 --> 01:30:53,870
 

4495
01:30:51,950 --> 01:30:55,010
 just some point in to keep in mind but

4496
01:30:53,860 --> 01:30:55,010
 

4497
01:30:53,870 --> 01:30:56,390
 yeah but this is the question now can

4498
01:30:55,000 --> 01:30:56,390
 

4499
01:30:55,010 --> 01:30:56,929
 saying you know we have this two

4500
01:30:56,380 --> 01:30:56,929
 

4501
01:30:56,390 --> 01:30:59,119
 different

4502
01:30:56,919 --> 01:30:59,119
 

4503
01:30:56,929 --> 01:31:00,949
 notion of machine learning or succeeding

4504
01:30:59,109 --> 01:31:00,949
 

4505
01:30:59,119 --> 01:31:03,050
 in machine learning what does change

4506
01:31:00,939 --> 01:31:03,050
 

4507
01:31:00,949 --> 01:31:04,510
 when we move from one to the other

4508
01:31:03,040 --> 01:31:04,510
 

4509
01:31:03,050 --> 01:31:07,820
 okay so I would just give you some

4510
01:31:04,500 --> 01:31:07,820
 

4511
01:31:04,510 --> 01:31:09,920
 vinaigrette so the first one is just

4512
01:31:07,810 --> 01:31:09,920
 

4513
01:31:07,820 --> 01:31:12,469
 about like overfitting of robust

4514
01:31:09,910 --> 01:31:12,469
 

4515
01:31:09,920 --> 01:31:13,849
 developer okay so we all know the story

4516
01:31:12,459 --> 01:31:13,849
 

4517
01:31:12,469 --> 01:31:15,679
 especially for deep learning and

4518
01:31:13,839 --> 01:31:15,679
 

4519
01:31:13,849 --> 01:31:17,959
 internal classic optimization of

4520
01:31:15,669 --> 01:31:17,959
 

4521
01:31:15,679 --> 01:31:20,719
 overfitting so you know over here you

4522
01:31:17,949 --> 01:31:20,719
 

4523
01:31:17,959 --> 01:31:22,939
 can train some classifier and yes like

4524
01:31:20,709 --> 01:31:22,939
 

4525
01:31:20,719 --> 01:31:25,039
 this is the training accuracy so after

4526
01:31:22,929 --> 01:31:25,039
 

4527
01:31:22,939 --> 01:31:27,469
 pushing it for long enough we get 100%

4528
01:31:25,029 --> 01:31:27,469
 

4529
01:31:25,039 --> 01:31:29,179
 training accuracy and of course you know

4530
01:31:27,459 --> 01:31:29,179
 

4531
01:31:27,469 --> 01:31:31,579
 so that's what we do in our tools but of

4532
01:31:29,169 --> 01:31:31,579
 

4533
01:31:29,179 --> 01:31:33,949
 course the question is okay how you know

4534
01:31:31,569 --> 01:31:33,949
 

4535
01:31:31,579 --> 01:31:36,260
 what like what will happen if you

4536
01:31:33,939 --> 01:31:36,260
 

4537
01:31:33,949 --> 01:31:39,139
 actually test the solution on the you

4538
01:31:36,250 --> 01:31:39,139
 

4539
01:31:36,260 --> 01:31:41,090
 know on the unseen test set and this is

4540
01:31:39,129 --> 01:31:41,090
 

4541
01:31:39,139 --> 01:31:42,559
 the usual performance view observe and

4542
01:31:41,080 --> 01:31:42,559
 

4543
01:31:41,090 --> 01:31:45,110
 what on what is stuff amazing especially

4544
01:31:42,549 --> 01:31:45,110
 

4545
01:31:42,559 --> 01:31:47,929
 for the pet works that actually the gap

4546
01:31:45,100 --> 01:31:47,929
 

4547
01:31:45,110 --> 01:31:50,239
 between what we can ensure by training

4548
01:31:47,919 --> 01:31:50,239
 

4549
01:31:47,929 --> 01:31:52,489
 and what we actually also get on unseen

4550
01:31:50,229 --> 01:31:52,489
 

4551
01:31:50,239 --> 01:31:55,010
 samples legitimization we got tends to

4552
01:31:52,479 --> 01:31:55,010
 

4553
01:31:52,489 --> 01:31:56,719
 be really small okay so that's great in

4554
01:31:55,000 --> 01:31:56,719
 

4555
01:31:55,010 --> 01:31:58,909
 the standard machine learning but how

4556
01:31:56,709 --> 01:31:58,909
 

4557
01:31:56,719 --> 01:32:01,159
 does it look like in robust set okay so

4558
01:31:58,899 --> 01:32:01,159
 

4559
01:31:58,909 --> 01:32:02,479
 in robots I think we also well it's it's

4560
01:32:01,149 --> 01:32:02,479
 

4561
01:32:01,159 --> 01:32:04,670
 much much harder as will be Zuko

4562
01:32:02,469 --> 01:32:04,670
 

4563
01:32:02,479 --> 01:32:06,769
 explained to actually get to this like

4564
01:32:04,660 --> 01:32:06,769
 

4565
01:32:04,670 --> 01:32:08,840
 100 percent robust training error

4566
01:32:06,759 --> 01:32:08,840
 

4567
01:32:06,769 --> 01:32:11,090
 sometimes even impossible because of of

4568
01:32:08,830 --> 01:32:11,090
 

4569
01:32:08,840 --> 01:32:13,639
 data being not of perfectly separable

4570
01:32:11,080 --> 01:32:13,639
 

4571
01:32:11,090 --> 01:32:15,439
 but here we can get there and now the

4572
01:32:13,629 --> 01:32:15,439
 

4573
01:32:13,639 --> 01:32:17,179
 basic particular this is keep true that

4574
01:32:15,429 --> 01:32:17,179
 

4575
01:32:15,439 --> 01:32:20,539
 we get for C far so that was exactly

4576
01:32:17,169 --> 01:32:20,539
 

4577
01:32:17,179 --> 01:32:23,630
 what Zico mention at the end this is if

4578
01:32:20,529 --> 01:32:23,630
 

4579
01:32:20,539 --> 01:32:25,579
 our so we can train a classifier that

4580
01:32:23,620 --> 01:32:25,579
 

4581
01:32:23,630 --> 01:32:27,590
 gets hundred percent robust training

4582
01:32:25,569 --> 01:32:27,590
 

4583
01:32:25,579 --> 01:32:30,409
 accuracy so there exists a classifier

4584
01:32:27,580 --> 01:32:30,409
 

4585
01:32:27,590 --> 01:32:33,229
 that is robust however if we look what

4586
01:32:30,399 --> 01:32:33,229
 

4587
01:32:30,409 --> 01:32:35,059
 happens on unseen examples that's the

4588
01:32:33,219 --> 01:32:35,059
 

4589
01:32:33,229 --> 01:32:37,789
 performance we observe so we have this

4590
01:32:35,049 --> 01:32:37,789
 

4591
01:32:35,059 --> 01:32:39,619
 really huge generalization gun okay so

4592
01:32:37,779 --> 01:32:39,619
 

4593
01:32:37,789 --> 01:32:41,689
 essentially they think we get is that we

4594
01:32:39,609 --> 01:32:41,689
 

4595
01:32:39,619 --> 01:32:42,979
 really get under 50 percent robust

4596
01:32:41,679 --> 01:32:42,979
 

4597
01:32:41,689 --> 01:32:46,099
 performance even though the training

4598
01:32:42,969 --> 01:32:46,099
 

4599
01:32:42,979 --> 01:32:49,969
 performance is 100 or close to it okay

4600
01:32:46,089 --> 01:32:49,969
 

4601
01:32:46,099 --> 01:32:51,349
 so well what can we do the obvious idea

4602
01:32:49,959 --> 01:32:51,349
 

4603
01:32:49,969 --> 01:32:53,689
 that we know from some person learning

4604
01:32:51,339 --> 01:32:53,689
 

4605
01:32:51,349 --> 01:32:56,510
 is just to use regularization and maybe

4606
01:32:53,679 --> 01:32:56,510
 

4607
01:32:53,689 --> 01:32:58,670
 this idea does work so far we tried and

4608
01:32:56,500 --> 01:32:58,670
 

4609
01:32:56,510 --> 01:33:01,309
 unfortunately even if they're not it

4610
01:32:58,660 --> 01:33:01,309
 

4611
01:32:58,670 --> 01:33:03,110
 seemed that it might work it doesn't so

4612
01:33:01,299 --> 01:33:03,110
 

4613
01:33:01,309 --> 01:33:04,939
 this is actually quite puzzling for us

4614
01:33:03,100 --> 01:33:04,939
 

4615
01:33:03,110 --> 01:33:07,699
 especially because like we try to push

4616
01:33:04,929 --> 01:33:07,699
 

4617
01:33:04,939 --> 01:33:08,910
 the C far as a you know in our lab like

4618
01:33:07,689 --> 01:33:08,910
 

4619
01:33:07,699 --> 01:33:10,920
 quite a lot and

4620
01:33:08,900 --> 01:33:10,920
 

4621
01:33:08,910 --> 01:33:13,260
 to wonder okay maybe there is some

4622
01:33:10,910 --> 01:33:13,260
 

4623
01:33:10,920 --> 01:33:15,840
 inherent reason why getting better

4624
01:33:13,250 --> 01:33:15,840
 

4625
01:33:13,260 --> 01:33:18,480
 accuracy and avoiding avoiding

4626
01:33:15,830 --> 01:33:18,480
 

4627
01:33:15,840 --> 01:33:20,520
 overfitting is a problem here and indeed

4628
01:33:18,470 --> 01:33:20,520
 

4629
01:33:18,480 --> 01:33:22,770
 there is something there is some

4630
01:33:20,510 --> 01:33:22,770
 

4631
01:33:20,520 --> 01:33:23,940
 phenomenon that we discovered and you

4632
01:33:22,760 --> 01:33:23,940
 

4633
01:33:22,770 --> 01:33:26,430
 know the fellowman that we discover is

4634
01:33:23,930 --> 01:33:26,430
 

4635
01:33:23,940 --> 01:33:28,710
 it actually turns out that you know if

4636
01:33:26,420 --> 01:33:28,710
 

4637
01:33:26,430 --> 01:33:30,600
 we think about aiming for adversely

4638
01:33:28,700 --> 01:33:30,600
 

4639
01:33:28,710 --> 01:33:32,610
 dramatisation as opposed to

4640
01:33:30,590 --> 01:33:32,610
 

4641
01:33:30,600 --> 01:33:34,410
 standardization then actually it's not

4642
01:33:32,600 --> 01:33:34,410
 

4643
01:33:32,610 --> 01:33:35,700
 only a matter of the optimization

4644
01:33:34,400 --> 01:33:35,700
 

4645
01:33:34,410 --> 01:33:38,280
 problem corresponding to training become

4646
01:33:35,690 --> 01:33:38,280
 

4647
01:33:35,700 --> 01:33:40,530
 ring more difficult it's also the kind

4648
01:33:38,270 --> 01:33:40,530
 

4649
01:33:38,280 --> 01:33:43,500
 of sample complexity of this problem the

4650
01:33:40,520 --> 01:33:43,500
 

4651
01:33:40,530 --> 01:33:45,540
 you know becomes worse so in other terms

4652
01:33:43,490 --> 01:33:45,540
 

4653
01:33:43,500 --> 01:33:48,420
 essentially with attempts to read more

4654
01:33:45,530 --> 01:33:48,420
 

4655
01:33:45,540 --> 01:33:49,950
 data to even be able to get a robust

4656
01:33:48,410 --> 01:33:49,950
 

4657
01:33:48,420 --> 01:33:52,380
 classifier so a classifier that

4658
01:33:49,940 --> 01:33:52,380
 

4659
01:33:49,950 --> 01:33:53,970
 terrorized in a robust way so here is

4660
01:33:52,370 --> 01:33:53,970
 

4661
01:33:52,380 --> 01:33:55,380
 just the kind of theorem that you can

4662
01:33:53,960 --> 01:33:55,380
 

4663
01:33:53,970 --> 01:33:56,790
 actually prove you can essentially prove

4664
01:33:55,370 --> 01:33:56,790
 

4665
01:33:55,380 --> 01:33:58,340
 that there exists you know in the

4666
01:33:56,780 --> 01:33:58,340
 

4667
01:33:56,790 --> 01:34:00,360
 dimension some even very simple

4668
01:33:58,330 --> 01:34:00,360
 

4669
01:33:58,340 --> 01:34:03,030
 distributions extremism of distributions

4670
01:34:00,350 --> 01:34:03,030
 

4671
01:34:00,360 --> 01:34:05,100
 that already exhibit this effect of you

4672
01:34:03,020 --> 01:34:05,100
 

4673
01:34:03,030 --> 01:34:05,970
 know I I just have one sample

4674
01:34:05,090 --> 01:34:05,970
 

4675
01:34:05,100 --> 01:34:08,070
 distribution

4676
01:34:05,960 --> 01:34:08,070
 

4677
01:34:05,970 --> 01:34:10,620
 I am already able to get very good

4678
01:34:08,060 --> 01:34:10,620
 

4679
01:34:08,070 --> 01:34:12,240
 classifier that performs extremely well

4680
01:34:10,610 --> 01:34:12,240
 

4681
01:34:10,620 --> 01:34:15,170
 on average sense in an average sense

4682
01:34:12,230 --> 01:34:15,170
 

4683
01:34:12,240 --> 01:34:18,180
 however in order to have any hope of

4684
01:34:15,160 --> 01:34:18,180
 

4685
01:34:15,170 --> 01:34:20,820
 building a robust classifier I need to

4686
01:34:18,170 --> 01:34:20,820
 

4687
01:34:18,180 --> 01:34:22,050
 see many many many more samples okay and

4688
01:34:20,810 --> 01:34:22,050
 

4689
01:34:20,820 --> 01:34:24,120
 the key here you think that this is like

4690
01:34:22,040 --> 01:34:24,120
 

4691
01:34:22,050 --> 01:34:25,350
 information theoretic bound so it

4692
01:34:24,110 --> 01:34:25,350
 

4693
01:34:24,120 --> 01:34:26,970
 doesn't matter what you do you can do

4694
01:34:25,340 --> 01:34:26,970
 

4695
01:34:25,350 --> 01:34:29,370
 data documentation whatever essentially

4696
01:34:26,960 --> 01:34:29,370
 

4697
01:34:26,970 --> 01:34:31,050
 you will be stuck until you have seen

4698
01:34:29,360 --> 01:34:31,050
 

4699
01:34:29,370 --> 01:34:33,450
 enough samples and you will be not able

4700
01:34:31,040 --> 01:34:33,450
 

4701
01:34:31,050 --> 01:34:35,670
 to get any meaningful robust classifier

4702
01:34:33,440 --> 01:34:35,670
 

4703
01:34:33,450 --> 01:34:39,000
 okay so say this rules are very simple

4704
01:34:35,660 --> 01:34:39,000
 

4705
01:34:35,670 --> 01:34:40,980
 so one of them is just like a simple

4706
01:34:38,990 --> 01:34:40,980
 

4707
01:34:39,000 --> 01:34:43,530
 like know hypercube perform like you

4708
01:34:40,970 --> 01:34:43,530
 

4709
01:34:40,980 --> 01:34:45,360
 know perturbed perturbed distribution

4710
01:34:43,520 --> 01:34:45,360
 

4711
01:34:43,530 --> 01:34:46,830
 it's essentially kind of models what's

4712
01:34:45,350 --> 01:34:46,830
 

4713
01:34:45,360 --> 01:34:49,680
 happening called M needs were linear

4714
01:34:46,820 --> 01:34:49,680
 

4715
01:34:46,830 --> 01:34:50,940
 classifiers for robust like for a robust

4716
01:34:49,670 --> 01:34:50,940
 

4717
01:34:49,680 --> 01:34:54,060
 case they should require a lot of data

4718
01:34:50,930 --> 01:34:54,060
 

4719
01:34:50,940 --> 01:34:56,280
 but you know but essentially if you are

4720
01:34:54,050 --> 01:34:56,280
 

4721
01:34:54,060 --> 01:34:58,110
 able to use a new linear classifier as

4722
01:34:56,270 --> 01:34:58,110
 

4723
01:34:56,280 --> 01:34:59,790
 something called stress holding if you

4724
01:34:58,100 --> 01:34:59,790
 

4725
01:34:58,110 --> 01:35:01,440
 think about how an this works you can

4726
01:34:59,780 --> 01:35:01,440
 

4727
01:34:59,790 --> 01:35:03,270
 you know you can very easily get robust

4728
01:35:01,430 --> 01:35:03,270
 

4729
01:35:01,440 --> 01:35:04,710
 classifier but then there are also are

4730
01:35:03,260 --> 01:35:04,710
 

4731
01:35:03,270 --> 01:35:07,110
 distribution so the first exhibition was

4732
01:35:04,700 --> 01:35:07,110
 

4733
01:35:04,710 --> 01:35:08,730
 hard for linear classifiers but easy for

4734
01:35:07,100 --> 01:35:08,730
 

4735
01:35:07,110 --> 01:35:11,130
 nonlinear classifiers but you can also

4736
01:35:08,720 --> 01:35:11,130
 

4737
01:35:08,730 --> 01:35:13,290
 connect you know distributions that are

4738
01:35:11,120 --> 01:35:13,290
 

4739
01:35:11,130 --> 01:35:15,210
 hard for any classifier so sorry no

4740
01:35:13,280 --> 01:35:15,210
 

4741
01:35:13,290 --> 01:35:16,860
 matter what has fair use unless you have

4742
01:35:15,200 --> 01:35:16,860
 

4743
01:35:15,210 --> 01:35:18,630
 seen enough samples you will not be able

4744
01:35:16,850 --> 01:35:18,630
 

4745
01:35:16,860 --> 01:35:21,489
 to get robust as effective classifier

4746
01:35:18,620 --> 01:35:21,489
 

4747
01:35:18,630 --> 01:35:22,599
 even though you know average case

4748
01:35:21,479 --> 01:35:22,599
 

4749
01:35:21,489 --> 01:35:24,880
 the standard translation is very easy

4750
01:35:22,589 --> 01:35:24,880
 

4751
01:35:22,599 --> 01:35:26,679
 even for one sample okay so that's all I

4752
01:35:24,870 --> 01:35:26,679
 

4753
01:35:24,880 --> 01:35:28,389
 will say about this there is actually a

4754
01:35:26,669 --> 01:35:28,389
 

4755
01:35:26,679 --> 01:35:31,360
 spotlight and posted about this in

4756
01:35:28,379 --> 01:35:31,360
 

4757
01:35:28,389 --> 01:35:33,340
 Tuesday but here so that's one effect in

4758
01:35:31,350 --> 01:35:33,340
 

4759
01:35:31,360 --> 01:35:35,800
 which kind of the sample complexity of

4760
01:35:33,330 --> 01:35:35,800
 

4761
01:35:33,340 --> 01:35:38,800
 the problem changes often quite

4762
01:35:35,790 --> 01:35:38,800
 

4763
01:35:35,800 --> 01:35:40,690
 dramatically but there is also another

4764
01:35:38,790 --> 01:35:40,690
 

4765
01:35:38,800 --> 01:35:44,409
 issue I wanted to highlight it's just of

4766
01:35:40,680 --> 01:35:44,409
 

4767
01:35:40,690 --> 01:35:47,710
 the question of you know how kind of how

4768
01:35:44,399 --> 01:35:47,710
 

4769
01:35:44,409 --> 01:35:50,739
 does being robust affect our standard

4770
01:35:47,700 --> 01:35:50,739
 

4771
01:35:47,710 --> 01:35:52,570
 realization okay so somehow my maybe

4772
01:35:50,729 --> 01:35:52,570
 

4773
01:35:50,739 --> 01:35:54,880
 like where I'm coming from so one may

4774
01:35:52,560 --> 01:35:54,880
 

4775
01:35:52,570 --> 01:35:56,949
 believe coming into working with this

4776
01:35:54,870 --> 01:35:56,949
 

4777
01:35:54,880 --> 01:35:59,199
 was that somehow once you really do all

4778
01:35:56,939 --> 01:35:59,199
 

4779
01:35:56,949 --> 01:36:02,079
 this work and put all this work to get a

4780
01:35:59,189 --> 01:36:02,079
 

4781
01:35:59,199 --> 01:36:04,840
 robust classifier then it should be kind

4782
01:36:02,069 --> 01:36:04,840
 

4783
01:36:02,079 --> 01:36:07,239
 of superior to a standard standard

4784
01:36:04,830 --> 01:36:07,239
 

4785
01:36:04,840 --> 01:36:08,889
 classifier in all aspects okay so in

4786
01:36:07,229 --> 01:36:08,889
 

4787
01:36:07,239 --> 01:36:10,690
 particular you know we know that one of

4788
01:36:08,879 --> 01:36:10,690
 

4789
01:36:08,889 --> 01:36:12,849
 the effective techniques instead like to

4790
01:36:10,680 --> 01:36:12,849
 

4791
01:36:10,690 --> 01:36:14,289
 get a better standardization is de

4792
01:36:12,839 --> 01:36:14,289
 

4793
01:36:12,849 --> 01:36:15,369
 documentation is essentially like adding

4794
01:36:14,279 --> 01:36:15,369
 

4795
01:36:14,289 --> 01:36:17,380
 some transformation to your training

4796
01:36:15,359 --> 01:36:17,380
 

4797
01:36:15,369 --> 01:36:20,289
 data during training to essentially kind

4798
01:36:17,370 --> 01:36:20,289
 

4799
01:36:17,380 --> 01:36:22,480
 of you try to like impose a stronger

4800
01:36:20,279 --> 01:36:22,480
 

4801
01:36:20,289 --> 01:36:24,460
 prior and indeed works very very well

4802
01:36:22,470 --> 01:36:24,460
 

4803
01:36:22,480 --> 01:36:26,679
 and in some ways if you look at adverse

4804
01:36:24,450 --> 01:36:26,679
 

4805
01:36:24,460 --> 01:36:28,030
 trader training which is the current

4806
01:36:26,669 --> 01:36:28,030
 

4807
01:36:26,679 --> 01:36:29,710
 leading technique to get robustness

4808
01:36:28,020 --> 01:36:29,710
 

4809
01:36:28,030 --> 01:36:31,030
 you can view it as an ultimate version

4810
01:36:29,700 --> 01:36:31,030
 

4811
01:36:29,710 --> 01:36:32,230
 of the documentation because essentially

4812
01:36:31,020 --> 01:36:32,230
 

4813
01:36:31,030 --> 01:36:33,849
 what you are doing you are always

4814
01:36:32,220 --> 01:36:33,849
 

4815
01:36:32,230 --> 01:36:35,769
 training on the advertiser perturbation

4816
01:36:33,839 --> 01:36:35,769
 

4817
01:36:33,849 --> 01:36:37,179
 of the training data so in some ways you

4818
01:36:35,759 --> 01:36:37,179
 

4819
01:36:35,769 --> 01:36:40,239
 are training on the most confusing

4820
01:36:37,169 --> 01:36:40,239
 

4821
01:36:37,179 --> 01:36:42,010
 version of the training set okay so

4822
01:36:40,229 --> 01:36:42,010
 

4823
01:36:40,239 --> 01:36:44,199
 clearly you would expect that you know

4824
01:36:42,000 --> 01:36:44,199
 

4825
01:36:42,010 --> 01:36:46,780
 essentially this is only a good thing

4826
01:36:44,189 --> 01:36:46,780
 

4827
01:36:44,199 --> 01:36:49,239
 and in particular that being robust can

4828
01:36:46,770 --> 01:36:49,239
 

4829
01:36:46,780 --> 01:36:50,650
 only make your standardization even

4830
01:36:49,229 --> 01:36:50,650
 

4831
01:36:49,239 --> 01:36:52,809
 better because you are using this kind

4832
01:36:50,640 --> 01:36:52,809
 

4833
01:36:50,650 --> 01:36:55,780
 of implicitly this you know ultimate way

4834
01:36:52,799 --> 01:36:55,780
 

4835
01:36:52,809 --> 01:36:58,090
 of doing data alimentation and well

4836
01:36:55,770 --> 01:36:58,090
 

4837
01:36:55,780 --> 01:36:59,650
 let's look at the data so yeah over here

4838
01:36:58,080 --> 01:36:59,650
 

4839
01:36:58,090 --> 01:37:01,269
 we have just the you know the standard

4840
01:36:59,640 --> 01:37:01,269
 

4841
01:36:59,650 --> 01:37:03,639
 test accuracy of a standard model

4842
01:37:01,259 --> 01:37:03,639
 

4843
01:37:01,269 --> 01:37:06,309
 trained in the standard way so this is

4844
01:37:03,629 --> 01:37:06,309
 

4845
01:37:03,639 --> 01:37:08,530
 just a reference point however if we

4846
01:37:06,299 --> 01:37:08,530
 

4847
01:37:06,309 --> 01:37:10,840
 take a look at what happens if I just

4848
01:37:08,520 --> 01:37:10,840
 

4849
01:37:08,530 --> 01:37:13,360
 look at the standard accuracy of a

4850
01:37:10,830 --> 01:37:13,360
 

4851
01:37:10,840 --> 01:37:16,449
 robust model then we see that there

4852
01:37:13,350 --> 01:37:16,449
 

4853
01:37:13,360 --> 01:37:18,070
 actually is a gun it's not a big gap but

4854
01:37:16,439 --> 01:37:18,070
 

4855
01:37:16,449 --> 01:37:21,099
 it is a gap it's actually a consistent

4856
01:37:18,060 --> 01:37:21,099
 

4857
01:37:18,070 --> 01:37:23,829
 gap you know and yeah we tried it in a

4858
01:37:21,089 --> 01:37:23,829
 

4859
01:37:21,099 --> 01:37:27,039
 different setup a normally by the way

4860
01:37:23,819 --> 01:37:27,039
 

4861
01:37:23,829 --> 01:37:28,690
 there is a regime like a very like at

4862
01:37:27,029 --> 01:37:28,690
 

4863
01:37:27,039 --> 01:37:30,820
 the very beginning data argumentation

4864
01:37:28,680 --> 01:37:30,820
 

4865
01:37:28,690 --> 01:37:32,800
 like sorry robust training sometimes

4866
01:37:30,810 --> 01:37:32,800
 

4867
01:37:30,820 --> 01:37:33,330
 does held a little bit but in the long

4868
01:37:32,790 --> 01:37:33,330
 

4869
01:37:32,800 --> 01:37:35,250
 term

4870
01:37:33,320 --> 01:37:35,250
 

4871
01:37:33,330 --> 01:37:37,620
 at the regime were actually we end up

4872
01:37:35,240 --> 01:37:37,620
 

4873
01:37:35,250 --> 01:37:40,320
 training it's always consistently lower

4874
01:37:37,610 --> 01:37:40,320
 

4875
01:37:37,620 --> 01:37:42,810
 okay so what's going on so where is this

4876
01:37:40,310 --> 01:37:42,810
 

4877
01:37:40,320 --> 01:37:44,490
 consistent gap coming from why you know

4878
01:37:42,800 --> 01:37:44,490
 

4879
01:37:42,810 --> 01:37:46,470
 why we seem to be inferior in this way

4880
01:37:44,480 --> 01:37:46,470
 

4881
01:37:44,490 --> 01:37:48,450
 and in a sense as you know as many

4882
01:37:46,460 --> 01:37:48,450
 

4883
01:37:46,470 --> 01:37:50,730
 things in the retrospect it's clear

4884
01:37:48,440 --> 01:37:50,730
 

4885
01:37:48,450 --> 01:37:52,440
 what's going on so first of all there is

4886
01:37:50,720 --> 01:37:52,440
 

4887
01:37:50,730 --> 01:37:54,270
 this phenomenon that kind of you know if

4888
01:37:52,430 --> 01:37:54,270
 

4889
01:37:52,440 --> 01:37:56,610
 I'm trying to train a classifier I

4890
01:37:54,260 --> 01:37:56,610
 

4891
01:37:54,270 --> 01:37:58,740
 somehow have to choose if I want to

4892
01:37:56,600 --> 01:37:58,740
 

4893
01:37:56,610 --> 01:38:01,050
 maximize this standardization

4894
01:37:58,730 --> 01:38:01,050
 

4895
01:37:58,740 --> 01:38:02,490
 performance or do I want the classifier

4896
01:38:01,040 --> 01:38:02,490
 

4897
01:38:01,050 --> 01:38:04,050
 be robust and there is actually an

4898
01:38:02,480 --> 01:38:04,050
 

4899
01:38:02,490 --> 01:38:06,000
 inherent trade-off between this and

4900
01:38:04,040 --> 01:38:06,000
 

4901
01:38:04,050 --> 01:38:08,460
 again the trade-off actually in the end

4902
01:38:05,990 --> 01:38:08,460
 

4903
01:38:06,000 --> 01:38:10,620
 is kind of pretty clear what is the key

4904
01:38:08,450 --> 01:38:10,620
 

4905
01:38:08,460 --> 01:38:12,240
 idea here is sort of if you actually if

4906
01:38:10,610 --> 01:38:12,240
 

4907
01:38:10,620 --> 01:38:13,830
 you look back at standard training and

4908
01:38:12,230 --> 01:38:13,830
 

4909
01:38:12,240 --> 01:38:16,770
 just when your goal is just on a

4910
01:38:13,820 --> 01:38:16,770
 

4911
01:38:13,830 --> 01:38:19,530
 transition then to you essentially any

4912
01:38:16,760 --> 01:38:19,530
 

4913
01:38:16,770 --> 01:38:21,690
 feature that has any correlation with

4914
01:38:19,520 --> 01:38:21,690
 

4915
01:38:19,530 --> 01:38:23,790
 the correct label is useful to you okay

4916
01:38:21,680 --> 01:38:23,790
 

4917
01:38:21,690 --> 01:38:26,040
 so you can always milk it a bit to get

4918
01:38:23,780 --> 01:38:26,040
 

4919
01:38:23,790 --> 01:38:28,200
 even better standard performance however

4920
01:38:26,030 --> 01:38:28,200
 

4921
01:38:26,040 --> 01:38:30,270
 in the robot setting you know you can't

4922
01:38:28,190 --> 01:38:30,270
 

4923
01:38:28,200 --> 01:38:31,800
 just if there is some feature that is

4924
01:38:30,260 --> 01:38:31,800
 

4925
01:38:30,270 --> 01:38:34,320
 maybe very weakly correlated with the

4926
01:38:31,790 --> 01:38:34,320
 

4927
01:38:31,800 --> 01:38:36,420
 day with the label but kind of is easy

4928
01:38:34,310 --> 01:38:36,420
 

4929
01:38:34,320 --> 01:38:38,070
 for the classifier to perturb well then

4930
01:38:36,410 --> 01:38:38,070
 

4931
01:38:36,420 --> 01:38:39,360
 you have to actually make a call if you

4932
01:38:38,060 --> 01:38:39,360
 

4933
01:38:38,070 --> 01:38:42,420
 actually want to take advantage of this

4934
01:38:39,350 --> 01:38:42,420
 

4935
01:38:39,360 --> 01:38:44,250
 and improve your accuracy or not okay

4936
01:38:42,410 --> 01:38:44,250
 

4937
01:38:42,420 --> 01:38:46,680
 and this is the basic kind of you know

4938
01:38:44,240 --> 01:38:46,680
 

4939
01:38:44,250 --> 01:38:48,600
 trade-off at play here that kind of

4940
01:38:46,670 --> 01:38:48,600
 

4941
01:38:46,680 --> 01:38:50,070
 manifests itself and you can imagine

4942
01:38:48,590 --> 01:38:50,070
 

4943
01:38:48,600 --> 01:38:51,690
 imagine this just like a simple way to

4944
01:38:50,060 --> 01:38:51,690
 

4945
01:38:50,070 --> 01:38:53,610
 think about it that yeah I have a data

4946
01:38:51,680 --> 01:38:53,610
 

4947
01:38:51,690 --> 01:38:55,890
 set in which like the first coordinate

4948
01:38:53,600 --> 01:38:55,890
 

4949
01:38:53,610 --> 01:38:58,440
 is strongly correlated with the correct

4950
01:38:55,880 --> 01:38:58,440
 

4951
01:38:55,890 --> 01:39:00,260
 label but it's not perfect and then I

4952
01:38:58,430 --> 01:39:00,260
 

4953
01:38:58,440 --> 01:39:03,300
 have a bunch of very really independent

4954
01:39:00,250 --> 01:39:03,300
 

4955
01:39:00,260 --> 01:39:05,430
 like you know correlated labels oh sorry

4956
01:39:03,290 --> 01:39:05,430
 

4957
01:39:03,300 --> 01:39:07,530
 features that you know that are at the

4958
01:39:05,420 --> 01:39:07,530
 

4959
01:39:05,430 --> 01:39:09,900
 rest of my the that are in the rest of

4960
01:39:07,520 --> 01:39:09,900
 

4961
01:39:07,530 --> 01:39:12,000
 my dataset and somehow what will happen

4962
01:39:09,890 --> 01:39:12,000
 

4963
01:39:09,900 --> 01:39:13,980
 is that this weekly corrected features

4964
01:39:11,990 --> 01:39:13,980
 

4965
01:39:12,000 --> 01:39:16,260
 of all of them if I allocate them they

4966
01:39:13,970 --> 01:39:16,260
 

4967
01:39:13,980 --> 01:39:18,690
 aggregate to a very very meaningful and

4968
01:39:16,250 --> 01:39:18,690
 

4969
01:39:16,260 --> 01:39:20,070
 predictive they know meta feature but

4970
01:39:18,680 --> 01:39:20,070
 

4971
01:39:18,690 --> 01:39:21,180
 the problem is that in standard training

4972
01:39:20,060 --> 01:39:21,180
 

4973
01:39:20,070 --> 01:39:23,220
 you know what you will do you will just

4974
01:39:21,170 --> 01:39:23,220
 

4975
01:39:21,180 --> 01:39:25,830
 use this meta feature to get essentially

4976
01:39:23,210 --> 01:39:25,830
 

4977
01:39:23,220 --> 01:39:28,170
 perfect classification however in the

4978
01:39:25,820 --> 01:39:28,170
 

4979
01:39:25,830 --> 01:39:31,140
 robot setting you are not even Allegra

4980
01:39:28,160 --> 01:39:31,140
 

4981
01:39:28,170 --> 01:39:32,100
 lee able to kind of to you know to take

4982
01:39:31,130 --> 01:39:32,100
 

4983
01:39:31,140 --> 01:39:33,570
 advantage of all of these features

4984
01:39:32,090 --> 01:39:33,570
 

4985
01:39:32,100 --> 01:39:36,060
 because even though they are very

4986
01:39:33,560 --> 01:39:36,060
 

4987
01:39:33,570 --> 01:39:37,620
 accurate on average there are very easy

4988
01:39:36,050 --> 01:39:37,620
 

4989
01:39:36,060 --> 01:39:39,750
 to be manipulated by the adversary

4990
01:39:37,610 --> 01:39:39,750
 

4991
01:39:37,620 --> 01:39:41,100
 because the correlation is only like

4992
01:39:39,740 --> 01:39:41,100
 

4993
01:39:39,750 --> 01:39:42,750
 each one of them is only weak

4994
01:39:41,090 --> 01:39:42,750
 

4995
01:39:41,100 --> 01:39:44,790
 like that with the with the correct

4996
01:39:42,740 --> 01:39:44,790
 

4997
01:39:42,750 --> 01:39:46,800
 labor okay and this is essentially the

4998
01:39:44,780 --> 01:39:46,800
 

4999
01:39:44,790 --> 01:39:51,030
 this is essentially the you know the

5000
01:39:46,790 --> 01:39:51,030
 

5001
01:39:46,800 --> 01:39:52,590
 explanation okay so okay so let's just

5002
01:39:51,020 --> 01:39:52,590
 

5003
01:39:51,030 --> 01:39:53,970
 try to summarize a little bit you know

5004
01:39:52,580 --> 01:39:53,970
 

5005
01:39:52,590 --> 01:39:56,340
 where we are where we think about this

5006
01:39:53,960 --> 01:39:56,340
 

5007
01:39:53,970 --> 01:39:57,930
 difference between robots machine

5008
01:39:56,330 --> 01:39:57,930
 

5009
01:39:56,340 --> 01:40:00,150
 learning and it's not machine learning

5010
01:39:57,920 --> 01:40:00,150
 

5011
01:39:57,930 --> 01:40:01,650
 so it's very clear to everyone and

5012
01:40:00,140 --> 01:40:01,650
 

5013
01:40:00,150 --> 01:40:04,890
 that's what is expected that there

5014
01:40:01,640 --> 01:40:04,890
 

5015
01:40:01,650 --> 01:40:06,960
 actually is a price to be robust okay so

5016
01:40:04,880 --> 01:40:06,960
 

5017
01:40:04,890 --> 01:40:08,520
 in particular as we already said as you

5018
01:40:06,950 --> 01:40:08,520
 

5019
01:40:06,960 --> 01:40:10,830
 go said first of all you know

5020
01:40:08,510 --> 01:40:10,830
 

5021
01:40:08,520 --> 01:40:11,970
 optimization doing that we need to like

5022
01:40:10,820 --> 01:40:11,970
 

5023
01:40:10,830 --> 01:40:14,190
 the initial problems we need to solve

5024
01:40:11,960 --> 01:40:14,190
 

5025
01:40:11,970 --> 01:40:16,290
 during training is way more difficult

5026
01:40:14,180 --> 01:40:16,290
 

5027
01:40:14,190 --> 01:40:18,240
 and also like the one other thing that

5028
01:40:16,280 --> 01:40:18,240
 

5029
01:40:16,290 --> 01:40:20,850
 we discovered is that the models have to

5030
01:40:18,230 --> 01:40:20,850
 

5031
01:40:18,240 --> 01:40:23,700
 be larger so there is this is clearly an

5032
01:40:20,840 --> 01:40:23,700
 

5033
01:40:20,850 --> 01:40:25,020
 undeniably a bad thing you know we also

5034
01:40:23,690 --> 01:40:25,020
 

5035
01:40:23,700 --> 01:40:26,310
 just mentioned that actually you might

5036
01:40:25,010 --> 01:40:26,310
 

5037
01:40:25,020 --> 01:40:28,500
 also need more data so it's not only

5038
01:40:26,300 --> 01:40:28,500
 

5039
01:40:26,310 --> 01:40:28,980
 about training time or like our size of

5040
01:40:28,490 --> 01:40:28,980
 

5041
01:40:28,500 --> 01:40:31,020
 the model

5042
01:40:28,970 --> 01:40:31,020
 

5043
01:40:28,980 --> 01:40:34,020
 also you might need more data to train

5044
01:40:31,010 --> 01:40:34,020
 

5045
01:40:31,020 --> 01:40:36,750
 and and also as we said is that actually

5046
01:40:34,010 --> 01:40:36,750
 

5047
01:40:34,020 --> 01:40:39,030
 you might also need to kind of give up a

5048
01:40:36,740 --> 01:40:39,030
 

5049
01:40:36,750 --> 01:40:40,230
 bit on standard accuracy okay so this is

5050
01:40:39,020 --> 01:40:40,230
 

5051
01:40:39,030 --> 01:40:41,820
 something again so what we observe and

5052
01:40:40,220 --> 01:40:41,820
 

5053
01:40:40,230 --> 01:40:43,740
 also there is a more recent work by uber

5054
01:40:41,810 --> 01:40:43,740
 

5055
01:40:41,820 --> 01:40:45,930
 get all that kind of tries to make this

5056
01:40:43,730 --> 01:40:45,930
 

5057
01:40:43,740 --> 01:40:47,730
 point even more broadly so you know so

5058
01:40:45,920 --> 01:40:47,730
 

5059
01:40:45,930 --> 01:40:49,620
 there are all this costs and you know

5060
01:40:47,720 --> 01:40:49,620
 

5061
01:40:47,730 --> 01:40:51,360
 that's not to be expected you know we it

5062
01:40:49,610 --> 01:40:51,360
 

5063
01:40:49,620 --> 01:40:54,030
 seems we are trying to get something

5064
01:40:51,350 --> 01:40:54,030
 

5065
01:40:51,360 --> 01:40:55,080
 stronger so we have to pay for that but

5066
01:40:54,020 --> 01:40:55,080
 

5067
01:40:54,030 --> 01:40:56,970
 it turns out that there are also

5068
01:40:55,070 --> 01:40:56,970
 

5069
01:40:55,080 --> 01:40:59,190
 somewhat unexpected benefits like

5070
01:40:56,960 --> 01:40:59,190
 

5071
01:40:56,970 --> 01:41:01,980
 essentially like beyond just being

5072
01:40:59,180 --> 01:41:01,980
 

5073
01:40:59,190 --> 01:41:03,990
 robust it turns out that robust models

5074
01:41:01,970 --> 01:41:03,990
 

5075
01:41:01,980 --> 01:41:06,270
 kind of have additional features that

5076
01:41:03,980 --> 01:41:06,270
 

5077
01:41:03,990 --> 01:41:07,740
 might be durable okay so one of the

5078
01:41:06,260 --> 01:41:07,740
 

5079
01:41:06,270 --> 01:41:09,690
 things I wanted to highlight is in some

5080
01:41:07,730 --> 01:41:09,690
 

5081
01:41:07,740 --> 01:41:12,420
 ways you know the model the robust

5082
01:41:09,680 --> 01:41:12,420
 

5083
01:41:09,690 --> 01:41:14,850
 models tend to be more semantically

5084
01:41:12,410 --> 01:41:14,850
 

5085
01:41:12,420 --> 01:41:15,990
 meaningful okay so what does it mean I

5086
01:41:14,840 --> 01:41:15,990
 

5087
01:41:14,850 --> 01:41:17,340
 will just give you an example because

5088
01:41:15,980 --> 01:41:17,340
 

5089
01:41:15,990 --> 01:41:19,500
 honestly we still don't really

5090
01:41:17,330 --> 01:41:19,500
 

5091
01:41:17,340 --> 01:41:21,870
 understand what's going on there so you

5092
01:41:19,490 --> 01:41:21,870
 

5093
01:41:19,500 --> 01:41:23,730
 know one kind of so so what is the going

5094
01:41:21,860 --> 01:41:23,730
 

5095
01:41:21,870 --> 01:41:25,410
 back to yes like it's going back to this

5096
01:41:23,720 --> 01:41:25,410
 

5097
01:41:23,730 --> 01:41:28,320
 fact that all of you are probably aware

5098
01:41:25,400 --> 01:41:28,320
 

5099
01:41:25,410 --> 01:41:30,630
 of is that you know as amazing as no

5100
01:41:28,310 --> 01:41:30,630
 

5101
01:41:28,320 --> 01:41:32,520
 technology like deep learning is you

5102
01:41:30,620 --> 01:41:32,520
 

5103
01:41:30,630 --> 01:41:34,200
 know it's sort of very black box and

5104
01:41:32,510 --> 01:41:34,200
 

5105
01:41:32,520 --> 01:41:36,150
 that's a big problem in since like you

5106
01:41:34,190 --> 01:41:36,150
 

5107
01:41:34,200 --> 01:41:37,650
 know when I have a classifier if I plug

5108
01:41:36,140 --> 01:41:37,650
 

5109
01:41:36,150 --> 01:41:39,630
 in the input I will get an output and

5110
01:41:37,640 --> 01:41:39,630
 

5111
01:41:37,650 --> 01:41:42,600
 this output will be mostly correct but

5112
01:41:39,620 --> 01:41:42,600
 

5113
01:41:39,630 --> 01:41:45,360
 it's very hard for us to make sense why

5114
01:41:42,590 --> 01:41:45,360
 

5115
01:41:42,600 --> 01:41:46,740
 this output was made on this input okay

5116
01:41:45,350 --> 01:41:46,740
 

5117
01:41:45,360 --> 01:41:48,450
 and that's in kind of there is a whole

5118
01:41:46,730 --> 01:41:48,450
 

5119
01:41:46,740 --> 01:41:51,150
 field of machine learning currently

5120
01:41:48,440 --> 01:41:51,150
 

5121
01:41:48,450 --> 01:41:51,640
 trying to you know kind of help us in

5122
01:41:51,140 --> 01:41:51,640
 

5123
01:41:51,150 --> 01:41:53,680
 the

5124
01:41:51,630 --> 01:41:53,680
 

5125
01:41:51,640 --> 01:41:56,410
 this problem in particular one of the

5126
01:41:53,670 --> 01:41:56,410
 

5127
01:41:53,680 --> 01:41:58,240
 like most basic ways of trying to make

5128
01:41:56,400 --> 01:41:58,240
 

5129
01:41:56,410 --> 01:42:00,220
 sense of what let's say deep learning

5130
01:41:58,230 --> 01:42:00,220
 

5131
01:41:58,240 --> 01:42:02,050
 classifier like whether why it made the

5132
01:42:00,210 --> 01:42:02,050
 

5133
01:42:00,220 --> 01:42:04,240
 particular decision on a given input is

5134
01:42:02,040 --> 01:42:04,240
 

5135
01:42:02,050 --> 01:42:05,680
 something called saliency maps so

5136
01:42:04,230 --> 01:42:05,680
 

5137
01:42:04,240 --> 01:42:08,530
 essentially what you do is that whenever

5138
01:42:05,670 --> 01:42:08,530
 

5139
01:42:05,680 --> 01:42:11,050
 I see an input what I look at I look at

5140
01:42:08,520 --> 01:42:11,050
 

5141
01:42:08,530 --> 01:42:14,950
 each pixel and I see what is there how

5142
01:42:11,040 --> 01:42:14,950
 

5143
01:42:11,050 --> 01:42:17,320
 sensitive the prediction is on like to

5144
01:42:14,940 --> 01:42:17,320
 

5145
01:42:14,950 --> 01:42:18,850
 changing just this pixel around okay and

5146
01:42:17,310 --> 01:42:18,850
 

5147
01:42:17,320 --> 01:42:21,070
 then what I do is I just essentially

5148
01:42:18,840 --> 01:42:21,070
 

5149
01:42:18,850 --> 01:42:23,530
 construct this heat map that the color

5150
01:42:21,060 --> 01:42:23,530
 

5151
01:42:21,070 --> 01:42:26,110
 of a pixel is like more intense the more

5152
01:42:23,520 --> 01:42:26,110
 

5153
01:42:23,530 --> 01:42:29,020
 influential it is and you know that's a

5154
01:42:26,100 --> 01:42:29,020
 

5155
01:42:26,110 --> 01:42:31,540
 great idea and now however let me do it

5156
01:42:29,010 --> 01:42:31,540
 

5157
01:42:29,020 --> 01:42:33,880
 just to a standard model like right away

5158
01:42:31,530 --> 01:42:33,880
 

5159
01:42:31,540 --> 01:42:36,460
 you will get in like pictures like this

5160
01:42:33,870 --> 01:42:36,460
 

5161
01:42:33,880 --> 01:42:38,860
 which are so much infirmity but also

5162
01:42:36,450 --> 01:42:38,860
 

5163
01:42:36,460 --> 01:42:40,960
 show that kind of this model is not

5164
01:42:38,850 --> 01:42:40,960
 

5165
01:42:38,860 --> 01:42:42,100
 exactly doing maybe what you are kind of

5166
01:42:40,950 --> 01:42:42,100
 

5167
01:42:40,960 --> 01:42:44,290
 you know thinking like that you would

5168
01:42:42,090 --> 01:42:44,290
 

5169
01:42:42,100 --> 01:42:45,670
 expect in particular prediction seems to

5170
01:42:44,280 --> 01:42:45,670
 

5171
01:42:44,290 --> 01:42:47,290
 be also influenced by things that are

5172
01:42:45,660 --> 01:42:47,290
 

5173
01:42:45,670 --> 01:42:49,480
 just artifacts and not something that

5174
01:42:47,280 --> 01:42:49,480
 

5175
01:42:47,290 --> 01:42:51,700
 will be actually you know cut like you

5176
01:42:49,470 --> 01:42:51,700
 

5177
01:42:49,480 --> 01:42:53,440
 know that you actually tie to the

5178
01:42:51,690 --> 01:42:53,440
 

5179
01:42:51,700 --> 01:42:55,600
 correct prediction and of course know

5180
01:42:53,430 --> 01:42:55,600
 

5181
01:42:53,440 --> 01:42:57,310
 there is a whole industry of like very

5182
01:42:55,590 --> 01:42:57,310
 

5183
01:42:55,600 --> 01:42:59,140
 interesting tools to make the saliency

5184
01:42:57,300 --> 01:42:59,140
 

5185
01:42:57,310 --> 01:43:00,670
 maps even better like take them from

5186
01:42:59,130 --> 01:43:00,670
 

5187
01:42:59,140 --> 01:43:03,610
 this kind of serene see maps to make

5188
01:43:00,660 --> 01:43:03,610
 

5189
01:43:00,670 --> 01:43:06,100
 them much more you know nice but what we

5190
01:43:03,600 --> 01:43:06,100
 

5191
01:43:03,610 --> 01:43:09,100
 discovered is that if you just do the

5192
01:43:06,090 --> 01:43:09,100
 

5193
01:43:06,100 --> 01:43:11,260
 same experiment just to robust the

5194
01:43:09,090 --> 01:43:11,260
 

5195
01:43:09,100 --> 01:43:13,510
 robust model alone okay so you just like

5196
01:43:11,250 --> 01:43:13,510
 

5197
01:43:11,260 --> 01:43:15,580
 impose L infinity perturbation so you

5198
01:43:13,500 --> 01:43:15,580
 

5199
01:43:13,510 --> 01:43:17,860
 just say that the image specification

5200
01:43:15,570 --> 01:43:17,860
 

5201
01:43:15,580 --> 01:43:19,990
 should not move if I just you know

5202
01:43:17,850 --> 01:43:19,990
 

5203
01:43:17,860 --> 01:43:22,600
 change each pixel by just tiny amount

5204
01:43:19,980 --> 01:43:22,600
 

5205
01:43:19,990 --> 01:43:24,100
 then suddenly you are getting this kind

5206
01:43:22,590 --> 01:43:24,100
 

5207
01:43:22,600 --> 01:43:25,870
 of saliency maps right away like with

5208
01:43:24,090 --> 01:43:25,870
 

5209
01:43:24,100 --> 01:43:28,780
 like three lines of code you just get

5210
01:43:25,860 --> 01:43:28,780
 

5211
01:43:25,870 --> 01:43:31,210
 this okay and this clearly looks much

5212
01:43:28,770 --> 01:43:31,210
 

5213
01:43:28,780 --> 01:43:33,970
 more much more closely to what we as

5214
01:43:31,200 --> 01:43:33,970
 

5215
01:43:31,210 --> 01:43:36,040
 humans would expect to happen and this

5216
01:43:33,960 --> 01:43:36,040
 

5217
01:43:33,970 --> 01:43:38,770
 actually gets even more fun so in some

5218
01:43:36,030 --> 01:43:38,770
 

5219
01:43:36,040 --> 01:43:41,680
 way what robustness does it aligns kind

5220
01:43:38,760 --> 01:43:41,680
 

5221
01:43:38,770 --> 01:43:44,350
 of the lost landscape of of the model

5222
01:43:41,670 --> 01:43:44,350
 

5223
01:43:41,680 --> 01:43:46,540
 like again more like Alliance it more

5224
01:43:44,340 --> 01:43:46,540
 

5225
01:43:44,350 --> 01:43:48,520
 with our semantic kind of understanding

5226
01:43:46,530 --> 01:43:48,520
 

5227
01:43:46,540 --> 01:43:51,430
 of the problem so let's do another

5228
01:43:48,510 --> 01:43:51,430
 

5229
01:43:48,520 --> 01:43:53,470
 experiment so what I have here is that I

5230
01:43:51,420 --> 01:43:53,470
 

5231
01:43:51,430 --> 01:43:55,870
 have here a picture of an ape which

5232
01:43:53,460 --> 01:43:55,870
 

5233
01:43:53,470 --> 01:43:57,910
 classifies as a primate in imagenet and

5234
01:43:55,860 --> 01:43:57,910
 

5235
01:43:55,870 --> 01:44:00,430
 what I will do now is I will essentially

5236
01:43:57,900 --> 01:44:00,430
 

5237
01:43:57,910 --> 01:44:03,560
 find the like I will use I will just

5238
01:44:00,420 --> 01:44:03,560
 

5239
01:44:00,430 --> 01:44:06,020
 like follow the gradient to find the

5240
01:44:03,550 --> 01:44:06,020
 

5241
01:44:03,560 --> 01:44:08,660
 kind of the closest the closest image

5242
01:44:06,010 --> 01:44:08,660
 

5243
01:44:06,020 --> 01:44:10,760
 such that it will make the model

5244
01:44:08,650 --> 01:44:10,760
 

5245
01:44:08,660 --> 01:44:12,800
 classify this image as a bird okay so I

5246
01:44:10,750 --> 01:44:12,800
 

5247
01:44:10,760 --> 01:44:15,620
 would just morph the this picture into

5248
01:44:12,790 --> 01:44:15,620
 

5249
01:44:12,800 --> 01:44:16,610
 the closest image that actually leads to

5250
01:44:15,610 --> 01:44:16,610
 

5251
01:44:15,620 --> 01:44:22,460
 classification as a bird

5252
01:44:16,600 --> 01:44:22,460
 

5253
01:44:16,610 --> 01:44:23,600
 so let me do that done so yeah the model

5254
01:44:22,450 --> 01:44:23,600
 

5255
01:44:22,460 --> 01:44:25,040
 is not robust so we should not be

5256
01:44:23,590 --> 01:44:25,040
 

5257
01:44:23,600 --> 01:44:26,270
 surprised there is actually like if you

5258
01:44:25,030 --> 01:44:26,270
 

5259
01:44:25,040 --> 01:44:28,010
 look very very closely there is a

5260
01:44:26,260 --> 01:44:28,010
 

5261
01:44:26,270 --> 01:44:29,930
 difference but it's very tiny like

5262
01:44:28,000 --> 01:44:29,930
 

5263
01:44:28,010 --> 01:44:31,700
 robots the mole is not robust so clearly

5264
01:44:29,920 --> 01:44:31,700
 

5265
01:44:29,930 --> 01:44:33,620
 we can manipulate it the way we want it

5266
01:44:31,690 --> 01:44:33,620
 

5267
01:44:31,700 --> 01:44:36,260
 in a very like with the noise it's

5268
01:44:33,610 --> 01:44:36,260
 

5269
01:44:33,620 --> 01:44:38,630
 completely imperceptible okay but let's

5270
01:44:36,250 --> 01:44:38,630
 

5271
01:44:36,260 --> 01:44:41,660
 try to do exactly the same experiment

5272
01:44:38,620 --> 01:44:41,660
 

5273
01:44:38,630 --> 01:44:47,330
 but to a robust model okay what will

5274
01:44:41,650 --> 01:44:47,330
 

5275
01:44:41,660 --> 01:44:50,030
 happen let's just do this so this is

5276
01:44:47,320 --> 01:44:50,030
 

5277
01:44:47,330 --> 01:44:52,130
 what you get so for your reference this

5278
01:44:50,020 --> 01:44:52,130
 

5279
01:44:50,030 --> 01:44:54,260
 is not a bird if you look very closely

5280
01:44:52,120 --> 01:44:54,260
 

5281
01:44:52,130 --> 01:44:57,020
 you will realize that it's not a bird

5282
01:44:54,250 --> 01:44:57,020
 

5283
01:44:54,260 --> 01:45:00,260
 still kind of I think no one will blame

5284
01:44:57,010 --> 01:45:00,260
 

5285
01:44:57,020 --> 01:45:02,780
 the model for taking this image for for

5286
01:45:00,250 --> 01:45:02,780
 

5287
01:45:00,260 --> 01:45:04,550
 being a being a bird and again all we

5288
01:45:02,770 --> 01:45:04,550
 

5289
01:45:02,780 --> 01:45:06,530
 did here you just train a standard model

5290
01:45:04,540 --> 01:45:06,530
 

5291
01:45:04,550 --> 01:45:09,200
 and just follow the gradient towards the

5292
01:45:06,520 --> 01:45:09,200
 

5293
01:45:06,530 --> 01:45:10,850
 kind of over the laws to make the

5294
01:45:09,190 --> 01:45:10,850
 

5295
01:45:09,200 --> 01:45:13,070
 prediction be a bird and we get such a

5296
01:45:10,840 --> 01:45:13,070
 

5297
01:45:10,850 --> 01:45:15,380
 very interesting and very semantically

5298
01:45:13,060 --> 01:45:15,380
 

5299
01:45:13,070 --> 01:45:17,000
 meaningful pictures you know and of

5300
01:45:15,370 --> 01:45:17,000
 

5301
01:45:15,380 --> 01:45:20,270
 course you know being where I am I'm

5302
01:45:16,990 --> 01:45:20,270
 

5303
01:45:17,000 --> 01:45:22,220
 sure you clearly can draw the analogy to

5304
01:45:20,260 --> 01:45:22,220
 

5305
01:45:20,270 --> 01:45:24,020
 something you have seen because you know

5306
01:45:22,210 --> 01:45:24,020
 

5307
01:45:22,220 --> 01:45:25,220
 you have things like that so do you know

5308
01:45:24,010 --> 01:45:25,220
 

5309
01:45:24,020 --> 01:45:26,690
 one of the there are generative

5310
01:45:25,210 --> 01:45:26,690
 

5311
01:45:25,220 --> 01:45:28,550
 adversarial networks that essentially

5312
01:45:26,680 --> 01:45:28,550
 

5313
01:45:26,690 --> 01:45:30,470
 makes a very cool technology but in

5314
01:45:28,540 --> 01:45:30,470
 

5315
01:45:28,550 --> 01:45:31,520
 particular what it does it allows you to

5316
01:45:30,460 --> 01:45:31,520
 

5317
01:45:30,470 --> 01:45:33,350
 come up with this very interesting

5318
01:45:31,510 --> 01:45:33,350
 

5319
01:45:31,520 --> 01:45:35,000
 Clayton embeddings and then you can just

5320
01:45:33,340 --> 01:45:35,000
 

5321
01:45:33,350 --> 01:45:37,040
 navigate these little embeddings in kind

5322
01:45:34,990 --> 01:45:37,040
 

5323
01:45:35,000 --> 01:45:39,530
 of the pictures you get or something

5324
01:45:37,030 --> 01:45:39,530
 

5325
01:45:37,040 --> 01:45:41,390
 like that so in some way this is like

5326
01:45:39,520 --> 01:45:41,390
 

5327
01:45:39,530 --> 01:45:44,720
 really cool that we can get similar

5328
01:45:41,380 --> 01:45:44,720
 

5329
01:45:41,390 --> 01:45:46,430
 effects with robustness in some way it

5330
01:45:44,710 --> 01:45:46,430
 

5331
01:45:44,720 --> 01:45:47,720
 should not be surprising because you

5332
01:45:46,420 --> 01:45:47,720
 

5333
01:45:46,430 --> 01:45:49,220
 know in both cases like when we do

5334
01:45:47,710 --> 01:45:49,220
 

5335
01:45:47,720 --> 01:45:51,260
 address our training we are solving some

5336
01:45:49,210 --> 01:45:51,260
 

5337
01:45:49,220 --> 01:45:53,120
 problem and we are training glands we

5338
01:45:51,250 --> 01:45:53,120
 

5339
01:45:51,260 --> 01:45:54,770
 are also showing some problem so you can

5340
01:45:53,110 --> 01:45:54,770
 

5341
01:45:53,120 --> 01:45:57,170
 view robustus as some kind of you know

5342
01:45:54,760 --> 01:45:57,170
 

5343
01:45:54,770 --> 01:45:58,790
 maybe restricted like the unlike like

5344
01:45:57,160 --> 01:45:58,790
 

5345
01:45:57,170 --> 01:46:00,680
 the previous like some restricted ganna

5346
01:45:58,780 --> 01:46:00,680
 

5347
01:45:58,790 --> 01:46:03,170
 embedding so there is still something to

5348
01:46:00,670 --> 01:46:03,170
 

5349
01:46:00,680 --> 01:46:04,970
 be understood here but clearly we see

5350
01:46:03,160 --> 01:46:04,970
 

5351
01:46:03,170 --> 01:46:08,090
 the decade they had nothing to do with

5352
01:46:04,960 --> 01:46:08,090
 

5353
01:46:04,970 --> 01:46:10,270
 security nothing to do with safety still

5354
01:46:08,080 --> 01:46:10,270
 

5355
01:46:08,090 --> 01:46:12,760
 we got some desirable kind of

5356
01:46:10,260 --> 01:46:12,760
 

5357
01:46:10,270 --> 01:46:14,890
 you know desirable property of the

5358
01:46:12,750 --> 01:46:14,890
 

5359
01:46:12,760 --> 01:46:18,780
 system just out of making it robust

5360
01:46:14,880 --> 01:46:18,780
 

5361
01:46:14,890 --> 01:46:22,930
 okay so let me conclude let me actually

5362
01:46:18,770 --> 01:46:22,930
 

5363
01:46:18,780 --> 01:46:24,610
 wrap up and yeah so first of all you

5364
01:46:22,920 --> 01:46:24,610
 

5365
01:46:22,930 --> 01:46:26,830
 know let's try to you know so I hope you

5366
01:46:24,600 --> 01:46:26,830
 

5367
01:46:24,610 --> 01:46:28,960
 know both Zeke and I gave you like a

5368
01:46:26,820 --> 01:46:28,960
 

5369
01:46:26,830 --> 01:46:30,460
 little bit of a view of kind of where we

5370
01:46:28,950 --> 01:46:30,460
 

5371
01:46:28,960 --> 01:46:32,350
 are in the vessel robustness and kind of

5372
01:46:30,450 --> 01:46:32,350
 

5373
01:46:30,460 --> 01:46:34,810
 how to also get started in particular

5374
01:46:32,340 --> 01:46:34,810
 

5375
01:46:32,350 --> 01:46:36,850
 you know the as sick already said the

5376
01:46:34,800 --> 01:46:36,850
 

5377
01:46:34,810 --> 01:46:39,400
 you know the website has you know above

5378
01:46:36,840 --> 01:46:39,400
 

5379
01:46:36,850 --> 01:46:41,140
 the kind of more expanded version of

5380
01:46:39,390 --> 01:46:41,140
 

5381
01:46:39,400 --> 01:46:42,700
 what we talked about it's still working

5382
01:46:41,130 --> 01:46:42,700
 

5383
01:46:41,140 --> 01:46:44,890
 progress but it will be there and also

5384
01:46:42,690 --> 01:46:44,890
 

5385
01:46:42,700 --> 01:46:46,239
 has a code so you can essentially start

5386
01:46:44,880 --> 01:46:46,239
 

5387
01:46:44,890 --> 01:46:50,110
 like playing on these things and see

5388
01:46:46,229 --> 01:46:50,110
 

5389
01:46:46,239 --> 01:46:53,050
 where they get and Zico said this is

5390
01:46:50,100 --> 01:46:53,050
 

5391
01:46:50,110 --> 01:46:55,600
 very very very much open field like we

5392
01:46:53,040 --> 01:46:55,600
 

5393
01:46:53,050 --> 01:46:57,250
 really just scratch the surface so just

5394
01:46:55,590 --> 01:46:57,250
 

5395
01:46:55,600 --> 01:46:59,530
 to give you some general direction that

5396
01:46:57,240 --> 01:46:59,530
 

5397
01:46:57,250 --> 01:47:01,840
 I think are kind of worth pursuing so

5398
01:46:59,520 --> 01:47:01,840
 

5399
01:46:59,530 --> 01:47:04,000
 you know one you know one frontier is

5400
01:47:01,830 --> 01:47:04,000
 

5401
01:47:01,840 --> 01:47:06,100
 algorithms essentially you know one

5402
01:47:03,990 --> 01:47:06,100
 

5403
01:47:04,000 --> 01:47:08,350
 thing that is very like hampering us is

5404
01:47:06,090 --> 01:47:08,350
 

5405
01:47:06,100 --> 01:47:10,270
 just an ability to scale up all the

5406
01:47:08,340 --> 01:47:10,270
 

5407
01:47:08,350 --> 01:47:11,590
 technique okay so specially like having

5408
01:47:10,260 --> 01:47:11,590
 

5409
01:47:10,270 --> 01:47:14,140
 to do robust training all necessary

5410
01:47:11,580 --> 01:47:14,140
 

5411
01:47:11,590 --> 01:47:16,060
 training or doing the verification is

5412
01:47:14,130 --> 01:47:16,060
 

5413
01:47:14,140 --> 01:47:17,950
 essentially kind of it's essentially

5414
01:47:16,050 --> 01:47:17,950
 

5415
01:47:16,060 --> 01:47:20,260
 like a real difficulty and you really

5416
01:47:17,940 --> 01:47:20,260
 

5417
01:47:17,950 --> 01:47:22,239
 have to think about how like what has to

5418
01:47:20,250 --> 01:47:22,239
 

5419
01:47:20,260 --> 01:47:24,010
 change to be able to play with larger

5420
01:47:22,229 --> 01:47:24,010
 

5421
01:47:22,239 --> 01:47:26,350
 models like mes is not really the right

5422
01:47:24,000 --> 01:47:26,350
 

5423
01:47:24,010 --> 01:47:28,540
 you know test case to do anything on

5424
01:47:26,340 --> 01:47:28,540
 

5425
01:47:26,350 --> 01:47:30,969
 this also yeah we have to think about

5426
01:47:28,530 --> 01:47:30,969
 

5427
01:47:28,540 --> 01:47:32,890
 like how can we make our models smaller

5428
01:47:30,959 --> 01:47:32,890
 

5429
01:47:30,969 --> 01:47:35,110
 and maybe more compact we're still being

5430
01:47:32,880 --> 01:47:35,110
 

5431
01:47:32,890 --> 01:47:36,940
 robust and actually more importantly how

5432
01:47:35,100 --> 01:47:36,940
 

5433
01:47:35,110 --> 01:47:39,400
 to change architecture to kind of maybe

5434
01:47:36,930 --> 01:47:39,400
 

5435
01:47:36,940 --> 01:47:41,800
 induce more robustness just in the prior

5436
01:47:39,390 --> 01:47:41,800
 

5437
01:47:39,400 --> 01:47:44,320
 okay so maybe we should just I think how

5438
01:47:41,790 --> 01:47:44,320
 

5439
01:47:41,800 --> 01:47:46,239
 exactly we even like to put our networks

5440
01:47:44,310 --> 01:47:46,239
 

5441
01:47:44,320 --> 01:47:48,670
 together and kind of get some robustness

5442
01:47:46,229 --> 01:47:48,670
 

5443
01:47:46,239 --> 01:47:50,800
 just out of this so that's one frontier

5444
01:47:48,660 --> 01:47:50,800
 

5445
01:47:48,670 --> 01:47:52,180
 the other one is the fury okay so in a

5446
01:47:50,790 --> 01:47:52,180
 

5447
01:47:50,800 --> 01:47:54,610
 sense I think what I always find

5448
01:47:52,170 --> 01:47:54,610
 

5449
01:47:52,180 --> 01:47:56,469
 fascinating in a like standard ml was

5450
01:47:54,600 --> 01:47:56,469
 

5451
01:47:54,610 --> 01:47:58,840
 that the theory was actually very

5452
01:47:56,459 --> 01:47:58,840
 

5453
01:47:56,469 --> 01:48:00,250
 informative of what we happen in

5454
01:47:58,830 --> 01:48:00,250
 

5455
01:47:58,840 --> 01:48:01,420
 practice okay so we had this kind of

5456
01:48:00,240 --> 01:48:01,420
 

5457
01:48:00,250 --> 01:48:04,030
 theoretical boundary of coursework

5458
01:48:01,410 --> 01:48:04,030
 

5459
01:48:01,420 --> 01:48:06,219
 theoretical but still the usually the

5460
01:48:04,020 --> 01:48:06,219
 

5461
01:48:04,030 --> 01:48:08,560
 guidelines they gave was quite crisp and

5462
01:48:06,209 --> 01:48:08,560
 

5463
01:48:06,219 --> 01:48:10,719
 quite relevant to happens when in

5464
01:48:08,550 --> 01:48:10,719
 

5465
01:48:08,560 --> 01:48:12,580
 practice you know once the deputy deep

5466
01:48:10,709 --> 01:48:12,580
 

5467
01:48:10,719 --> 01:48:14,290
 learning came in we sort of lost it a

5468
01:48:12,570 --> 01:48:14,290
 

5469
01:48:12,580 --> 01:48:15,880
 little bit we are slowly recovering it

5470
01:48:14,280 --> 01:48:15,880
 

5471
01:48:14,290 --> 01:48:17,260
 and you know the same is true about

5472
01:48:15,870 --> 01:48:17,260
 

5473
01:48:15,880 --> 01:48:19,900
 robustness like I think that robustness

5474
01:48:17,250 --> 01:48:19,900
 

5475
01:48:17,260 --> 01:48:21,580
 we still don't really have very good

5476
01:48:19,890 --> 01:48:21,580
 

5477
01:48:19,900 --> 01:48:22,409
 data underpinning to even guide our

5478
01:48:21,570 --> 01:48:22,409
 

5479
01:48:21,580 --> 01:48:24,929
 intuition

5480
01:48:22,399 --> 01:48:24,929
 

5481
01:48:22,409 --> 01:48:27,539
 so in particular we don't really have

5482
01:48:24,919 --> 01:48:27,539
 

5483
01:48:24,929 --> 01:48:30,119
 like strong or sufficiently meaningful

5484
01:48:27,529 --> 01:48:30,119
 

5485
01:48:27,539 --> 01:48:32,190
 non vacuous like a advert vessel robots

5486
01:48:30,109 --> 01:48:32,190
 

5487
01:48:30,119 --> 01:48:35,039
 a generation pounds we know that the

5488
01:48:32,180 --> 01:48:35,039
 

5489
01:48:32,190 --> 01:48:36,719
 surgeon organization is different to

5490
01:48:35,029 --> 01:48:36,719
 

5491
01:48:35,039 --> 01:48:38,400
 summarization but we kind of don't

5492
01:48:36,709 --> 01:48:38,400
 

5493
01:48:36,719 --> 01:48:41,309
 really understand it from the physical

5494
01:48:38,390 --> 01:48:41,309
 

5495
01:48:38,400 --> 01:48:42,989
 point of view also as I said maybe like

5496
01:48:41,299 --> 01:48:42,989
 

5497
01:48:41,309 --> 01:48:44,699
 we need some theory that will guide the

5498
01:48:42,979 --> 01:48:44,699
 

5499
01:48:42,989 --> 01:48:46,170
 choice of the requisition techniques

5500
01:48:44,689 --> 01:48:46,170
 

5501
01:48:44,699 --> 01:48:48,209
 because the regression techniques for

5502
01:48:46,160 --> 01:48:48,209
 

5503
01:48:46,170 --> 01:48:50,690
 robust classification that we have now

5504
01:48:48,199 --> 01:48:50,690
 

5505
01:48:48,209 --> 01:48:52,709
 they do not seem to be effective and

5506
01:48:50,680 --> 01:48:52,709
 

5507
01:48:50,690 --> 01:48:55,110
 finally and this is actually I can't

5508
01:48:52,699 --> 01:48:55,110
 

5509
01:48:52,709 --> 01:48:57,329
 stress it enough you know there is this

5510
01:48:55,100 --> 01:48:57,329
 

5511
01:48:55,110 --> 01:48:59,190
 one more domain is that's the sort of

5512
01:48:57,319 --> 01:48:59,190
 

5513
01:48:57,329 --> 01:49:02,340
 the data okay so you know machine

5514
01:48:59,180 --> 01:49:02,340
 

5515
01:48:59,190 --> 01:49:03,570
 learning is a field about data and you

5516
01:49:02,330 --> 01:49:03,570
 

5517
01:49:02,340 --> 01:49:05,280
 know in order to make sure that our

5518
01:49:03,560 --> 01:49:05,280
 

5519
01:49:03,570 --> 01:49:06,389
 tools are really meaningful and they

5520
01:49:05,270 --> 01:49:06,389
 

5521
01:49:05,280 --> 01:49:08,369
 actually I brought the applicable

5522
01:49:06,379 --> 01:49:08,369
 

5523
01:49:06,389 --> 01:49:10,469
 applicable we really have to work with

5524
01:49:08,359 --> 01:49:10,469
 

5525
01:49:08,369 --> 01:49:12,329
 the very set of data sets this is not

5526
01:49:10,459 --> 01:49:12,329
 

5527
01:49:10,469 --> 01:49:15,420
 really happening currently in the

5528
01:49:12,319 --> 01:49:15,420
 

5529
01:49:12,329 --> 01:49:18,179
 robustness again I'm guilty of this too

5530
01:49:15,410 --> 01:49:18,179
 

5531
01:49:15,420 --> 01:49:19,920
 but kind of there is a reason is we are

5532
01:49:18,169 --> 01:49:19,920
 

5533
01:49:18,179 --> 01:49:22,199
 so stuck for him for at this moment that

5534
01:49:19,910 --> 01:49:22,199
 

5535
01:49:19,920 --> 01:49:23,249
 even we cannot figure out this very few

5536
01:49:22,189 --> 01:49:23,249
 

5537
01:49:22,199 --> 01:49:25,079
 data says that we are working with

5538
01:49:23,239 --> 01:49:25,079
 

5539
01:49:23,249 --> 01:49:27,269
 currently but you know that this should

5540
01:49:25,069 --> 01:49:27,269
 

5541
01:49:25,079 --> 01:49:29,639
 not stop us from trying to explore kind

5542
01:49:27,259 --> 01:49:29,639
 

5543
01:49:27,269 --> 01:49:31,650
 of how robustus manifests in many

5544
01:49:29,629 --> 01:49:31,650
 

5545
01:49:29,639 --> 01:49:32,909
 different scenarios and also like the

5546
01:49:31,640 --> 01:49:32,909
 

5547
01:49:31,650 --> 01:49:34,709
 other extremely important point in

5548
01:49:32,899 --> 01:49:34,709
 

5549
01:49:32,909 --> 01:49:37,320
 session like you know we have to think

5550
01:49:34,699 --> 01:49:37,320
 

5551
01:49:34,709 --> 01:49:39,479
 very hard about you know what are even

5552
01:49:37,310 --> 01:49:39,479
 

5553
01:49:37,320 --> 01:49:40,619
 the right set of perturbations that we

5554
01:49:39,469 --> 01:49:40,619
 

5555
01:49:39,479 --> 01:49:43,320
 should because very bracket when they

5556
01:49:40,609 --> 01:49:43,320
 

5557
01:49:40,619 --> 01:49:44,789
 say my model should be robust what

5558
01:49:43,310 --> 01:49:44,789
 

5559
01:49:43,320 --> 01:49:46,739
 should be like what is the exact that

5560
01:49:44,779 --> 01:49:46,739
 

5561
01:49:44,789 --> 01:49:49,170
 kind of class of transformation that

5562
01:49:46,729 --> 01:49:49,170
 

5563
01:49:46,739 --> 01:49:50,550
 will be robust to as we said the lp

5564
01:49:49,160 --> 01:49:50,550
 

5565
01:49:49,170 --> 01:49:52,709
 transformations we consider they are

5566
01:49:50,540 --> 01:49:52,709
 

5567
01:49:50,550 --> 01:49:54,510
 clearly necessary but they are far by

5568
01:49:52,699 --> 01:49:54,510
 

5569
01:49:52,709 --> 01:49:56,130
 far not sufficient yes because like

5570
01:49:54,500 --> 01:49:56,130
 

5571
01:49:54,510 --> 01:49:57,090
 rotations are not captured by LP

5572
01:49:56,120 --> 01:49:57,090
 

5573
01:49:56,130 --> 01:49:58,380
 perturbations

5574
01:49:57,080 --> 01:49:58,380
 

5575
01:49:57,090 --> 01:49:59,909
 you know so you have to throw in

5576
01:49:58,370 --> 01:49:59,909
 

5577
01:49:58,380 --> 01:50:01,590
 notations you know then you can think of

5578
01:49:59,899 --> 01:50:01,590
 

5579
01:49:59,909 --> 01:50:03,150
 local deformation like there is a lot of

5580
01:50:01,580 --> 01:50:03,150
 

5581
01:50:01,590 --> 01:50:04,860
 stuff to think about and I think we

5582
01:50:03,140 --> 01:50:04,860
 

5583
01:50:03,150 --> 01:50:06,239
 should think about and again this is

5584
01:50:04,850 --> 01:50:06,239
 

5585
01:50:04,860 --> 01:50:07,949
 just about vision but there are many

5586
01:50:06,229 --> 01:50:07,949
 

5587
01:50:06,239 --> 01:50:09,150
 other contexts but this may be important

5588
01:50:07,939 --> 01:50:09,150
 

5589
01:50:07,949 --> 01:50:11,969
 and different perturbations have to be

5590
01:50:09,140 --> 01:50:11,969
 

5591
01:50:09,150 --> 01:50:13,619
 considered so so this is like kind of

5592
01:50:11,959 --> 01:50:13,619
 

5593
01:50:11,969 --> 01:50:15,510
 this three main goal algorithm and

5594
01:50:13,609 --> 01:50:15,510
 

5595
01:50:13,619 --> 01:50:17,369
 Furion data I would like this is where I

5596
01:50:15,500 --> 01:50:17,369
 

5597
01:50:15,510 --> 01:50:19,349
 would paint is the current like the you

5598
01:50:17,359 --> 01:50:19,349
 

5599
01:50:17,369 --> 01:50:21,630
 know the the key directions that we

5600
01:50:19,339 --> 01:50:21,630
 

5601
01:50:19,349 --> 01:50:22,979
 should push you in this field but also

5602
01:50:21,620 --> 01:50:22,979
 

5603
01:50:21,630 --> 01:50:24,360
 like this is the point that already you

5604
01:50:22,969 --> 01:50:24,360
 

5605
01:50:22,979 --> 01:50:26,340
 know is Iike mention but I really want

5606
01:50:24,350 --> 01:50:26,340
 

5607
01:50:24,360 --> 01:50:28,019
 to embrace is that somehow you know

5608
01:50:26,330 --> 01:50:28,019
 

5609
01:50:26,340 --> 01:50:29,880
 there is something different about

5610
01:50:28,009 --> 01:50:29,880
 

5611
01:50:28,019 --> 01:50:32,159
 robust ml that goes a

5612
01:50:29,870 --> 01:50:32,159
 

5613
01:50:29,880 --> 01:50:34,409
 that goes beyond just like it's worship

5614
01:50:32,149 --> 01:50:34,409
 

5615
01:50:32,159 --> 01:50:36,510
 different definition somehow this max in

5616
01:50:34,399 --> 01:50:36,510
 

5617
01:50:34,409 --> 01:50:38,760
 this definition should really really

5618
01:50:36,500 --> 01:50:38,760
 

5619
01:50:36,510 --> 01:50:40,199
 make us also think differently about the

5620
01:50:38,750 --> 01:50:40,199
 

5621
01:50:38,760 --> 01:50:42,570
 way we approach the problems like we

5622
01:50:40,189 --> 01:50:42,570
 

5623
01:50:40,199 --> 01:50:44,310
 should go from the kind of average and

5624
01:50:42,560 --> 01:50:44,310
 

5625
01:50:42,570 --> 01:50:46,260
 best-case scenario evaluations to the

5626
01:50:44,300 --> 01:50:46,260
 

5627
01:50:44,310 --> 01:50:47,909
 kind of worst-case mindsets okay so we

5628
01:50:46,250 --> 01:50:47,909
 

5629
01:50:46,260 --> 01:50:49,860
 really should be in particular you know

5630
01:50:47,899 --> 01:50:49,860
 

5631
01:50:47,909 --> 01:50:51,810
 when we evaluate the quality of our

5632
01:50:49,850 --> 01:50:51,810
 

5633
01:50:49,860 --> 01:50:53,909
 model we really should always kind of

5634
01:50:51,800 --> 01:50:53,909
 

5635
01:50:51,810 --> 01:50:56,159
 think back it's always a game so yes I

5636
01:50:53,899 --> 01:50:56,159
 

5637
01:50:53,909 --> 01:50:58,080
 want my mother succeed but in order to

5638
01:50:56,149 --> 01:50:58,080
 

5639
01:50:56,159 --> 01:50:59,850
 make sure that I succeed I have to put

5640
01:50:58,070 --> 01:50:59,850
 

5641
01:50:58,080 --> 01:51:01,650
 my heart of someone wants to break it

5642
01:50:59,840 --> 01:51:01,650
 

5643
01:50:59,850 --> 01:51:02,010
 someone who kind of knows exactly how it

5644
01:51:01,640 --> 01:51:02,010
 

5645
01:51:01,650 --> 01:51:03,870
 works

5646
01:51:02,000 --> 01:51:03,870
 

5647
01:51:02,010 --> 01:51:06,330
 knows all the potential weak spots and

5648
01:51:03,860 --> 01:51:06,330
 

5649
01:51:03,870 --> 01:51:07,620
 just tries hard to exploit it so this is

5650
01:51:06,320 --> 01:51:07,620
 

5651
01:51:06,330 --> 01:51:09,989
 again something that happens naturally

5652
01:51:07,610 --> 01:51:09,989
 

5653
01:51:07,620 --> 01:51:11,820
 in you know insecurities because that's

5654
01:51:09,979 --> 01:51:11,820
 

5655
01:51:09,989 --> 01:51:13,170
 the field they work in it didn't happen

5656
01:51:11,810 --> 01:51:13,170
 

5657
01:51:11,820 --> 01:51:14,790
 in machine learning you know because

5658
01:51:13,160 --> 01:51:14,790
 

5659
01:51:13,170 --> 01:51:16,800
 there we didn't have to worry about a

5660
01:51:14,780 --> 01:51:16,800
 

5661
01:51:14,790 --> 01:51:18,510
 facade yet now we have to and now we

5662
01:51:16,790 --> 01:51:18,510
 

5663
01:51:16,800 --> 01:51:20,760
 really have to learn from security

5664
01:51:18,500 --> 01:51:20,760
 

5665
01:51:18,510 --> 01:51:23,010
 community you know how to do it you know

5666
01:51:20,750 --> 01:51:23,010
 

5667
01:51:20,760 --> 01:51:24,630
 I guess Nicholas Kelly is one of the

5668
01:51:23,000 --> 01:51:24,630
 

5669
01:51:23,010 --> 01:51:26,550
 great you know propagators of this kind

5670
01:51:24,620 --> 01:51:26,550
 

5671
01:51:24,630 --> 01:51:28,679
 of idea so if you think your model is

5672
01:51:26,540 --> 01:51:28,679
 

5673
01:51:26,550 --> 01:51:30,300
 great talk to him and you know then we

5674
01:51:28,669 --> 01:51:30,300
 

5675
01:51:28,679 --> 01:51:31,980
 can even talk after right so it's

5676
01:51:30,290 --> 01:51:31,980
 

5677
01:51:30,300 --> 01:51:33,360
 essentially he's great at that there are

5678
01:51:31,970 --> 01:51:33,360
 

5679
01:51:31,980 --> 01:51:35,340
 some useful resources here there's a

5680
01:51:33,350 --> 01:51:35,340
 

5681
01:51:33,360 --> 01:51:36,989
 clever hands which kind of gives you a

5682
01:51:35,330 --> 01:51:36,989
 

5683
01:51:35,340 --> 01:51:39,210
 library of attack you should treat it as

5684
01:51:36,979 --> 01:51:39,210
 

5685
01:51:36,989 --> 01:51:40,980
 a point of start not the end of your

5686
01:51:39,200 --> 01:51:40,980
 

5687
01:51:39,210 --> 01:51:43,199
 evaluation this is just like this we'll

5688
01:51:40,970 --> 01:51:43,199
 

5689
01:51:40,980 --> 01:51:44,730
 just see you're thinking of how could I

5690
01:51:43,189 --> 01:51:44,730
 

5691
01:51:43,199 --> 01:51:46,949
 go about breaking the models there's

5692
01:51:44,720 --> 01:51:46,949
 

5693
01:51:44,730 --> 01:51:49,050
 also a little sense robust ml that tries

5694
01:51:46,939 --> 01:51:49,050
 

5695
01:51:46,949 --> 01:51:50,969
 kind of to keep track of like s people

5696
01:51:49,040 --> 01:51:50,969
 

5697
01:51:49,050 --> 01:51:53,130
 proposed models you know which photos

5698
01:51:50,959 --> 01:51:53,130
 

5699
01:51:50,969 --> 01:51:54,449
 actually were already well well proven

5700
01:51:53,120 --> 01:51:54,449
 

5701
01:51:53,130 --> 01:51:56,070
 to be robust or it is there is some

5702
01:51:54,439 --> 01:51:56,070
 

5703
01:51:54,449 --> 01:51:57,900
 evidence that are robust and which which

5704
01:51:56,060 --> 01:51:57,900
 

5705
01:51:56,070 --> 01:51:59,159
 models were already circumvented so you

5706
01:51:57,890 --> 01:51:59,159
 

5707
01:51:57,900 --> 01:52:00,719
 essentially can navigate the field

5708
01:51:59,149 --> 01:52:00,719
 

5709
01:51:59,159 --> 01:52:02,040
 better but in general like it's really

5710
01:52:00,709 --> 01:52:02,040
 

5711
01:52:00,719 --> 01:52:03,929
 about the mindset I think we really have

5712
01:52:02,030 --> 01:52:03,929
 

5713
01:52:02,040 --> 01:52:05,719
 to be much more skeptical and much more

5714
01:52:03,919 --> 01:52:05,719
 

5715
01:52:03,929 --> 01:52:08,699
 careful in this field that we usually

5716
01:52:05,709 --> 01:52:08,699
 

5717
01:52:05,719 --> 01:52:10,020
 because essentially failure here is kind

5718
01:52:08,689 --> 01:52:10,020
 

5719
01:52:08,699 --> 01:52:12,300
 of quite catastrophic and we just can't

5720
01:52:10,010 --> 01:52:12,300
 

5721
01:52:10,020 --> 01:52:14,580
 afford that okay so this is about

5722
01:52:12,290 --> 01:52:14,580
 

5723
01:52:12,300 --> 01:52:17,520
 Avatara Buster's but again more broadly

5724
01:52:14,570 --> 01:52:17,520
 

5725
01:52:14,580 --> 01:52:20,010
 I really want to kind of confirm that

5726
01:52:17,510 --> 01:52:20,010
 

5727
01:52:17,520 --> 01:52:21,750
 this is like in some ways I think

5728
01:52:20,000 --> 01:52:21,750
 

5729
01:52:20,010 --> 01:52:24,210
 machine learning clearly succeed as a

5730
01:52:21,740 --> 01:52:24,210
 

5731
01:52:21,750 --> 01:52:26,880
 succeed as a proof of concept but now

5732
01:52:24,200 --> 01:52:26,880
 

5733
01:52:24,210 --> 01:52:28,590
 it's time to go the next lab to do to

5734
01:52:26,870 --> 01:52:28,590
 

5735
01:52:26,880 --> 01:52:30,989
 the next mile students is like make it

5736
01:52:28,580 --> 01:52:30,989
 

5737
01:52:28,590 --> 01:52:33,090
 truly reliable and kind of something

5738
01:52:30,979 --> 01:52:33,090
 

5739
01:52:30,989 --> 01:52:34,409
 that you can be kind of confident that

5740
01:52:33,080 --> 01:52:34,409
 

5741
01:52:33,090 --> 01:52:36,139
 you can deploy in the real world life

5742
01:52:34,399 --> 01:52:36,139
 

5743
01:52:34,409 --> 01:52:38,850
 and essentially it will work there and

5744
01:52:36,129 --> 01:52:38,850
 

5745
01:52:36,139 --> 01:52:41,429
 in particular I really really believe

5746
01:52:38,840 --> 01:52:41,429
 

5747
01:52:38,850 --> 01:52:42,230
 that thinking about robustness is not

5748
01:52:41,419 --> 01:52:42,230
 

5749
01:52:41,429 --> 01:52:43,880
 only

5750
01:52:42,220 --> 01:52:43,880
 

5751
01:52:42,230 --> 01:52:45,950
 and the bring us ml that is better

5752
01:52:43,870 --> 01:52:45,950
 

5753
01:52:43,880 --> 01:52:48,020
 suited for like securities in safety

5754
01:52:45,940 --> 01:52:48,020
 

5755
01:52:45,950 --> 01:52:50,480
 aspect I think it also will be better in

5756
01:52:48,010 --> 01:52:50,480
 

5757
01:52:48,020 --> 01:52:52,610
 other regards as well I just mentioned

5758
01:52:50,470 --> 01:52:52,610
 

5759
01:52:50,480 --> 01:52:54,080
 this kind of interpretability angle I

5760
01:52:52,600 --> 01:52:54,080
 

5761
01:52:52,610 --> 01:52:55,550
 think actually like in the context of

5762
01:52:54,070 --> 01:52:55,550
 

5763
01:52:54,080 --> 01:52:57,710
 fairness and other things I think it

5764
01:52:55,540 --> 01:52:57,710
 

5765
01:52:55,550 --> 01:53:00,380
 also be a very useful tool again I don't

5766
01:52:57,700 --> 01:53:00,380
 

5767
01:52:57,710 --> 01:53:01,910
 know yet exactly how it will be useful I

5768
01:53:00,370 --> 01:53:01,910
 

5769
01:53:00,380 --> 01:53:04,040
 think this is like the exciting question

5770
01:53:01,900 --> 01:53:04,040
 

5771
01:53:01,910 --> 01:53:07,580
 but I am pretty sure that it will be

5772
01:53:04,030 --> 01:53:07,580
 

5773
01:53:04,040 --> 01:53:09,680
 okay so this is all I have to say I just

5774
01:53:07,570 --> 01:53:09,680
 

5775
01:53:07,580 --> 01:53:11,570
 want to again just emphasize you know if

5776
01:53:09,670 --> 01:53:11,570
 

5777
01:53:09,680 --> 01:53:13,880
 you got interested in this field there

5778
01:53:11,560 --> 01:53:13,880
 

5779
01:53:11,570 --> 01:53:15,380
 is you know plenty of you know plenty of

5780
01:53:13,870 --> 01:53:15,380
 

5781
01:53:13,880 --> 01:53:16,850
 stuff to do there is just like you know

5782
01:53:15,370 --> 01:53:16,850
 

5783
01:53:15,380 --> 01:53:19,010
 the kind of the cross-section of things

5784
01:53:16,840 --> 01:53:19,010
 

5785
01:53:16,850 --> 01:53:21,110
 to do is just overwhelming to be honest

5786
01:53:19,000 --> 01:53:21,110
 

5787
01:53:19,010 --> 01:53:23,330
 so yeah if you want to get started we

5788
01:53:21,100 --> 01:53:23,330
 

5789
01:53:21,110 --> 01:53:24,470
 have the notes and code over here you

5790
01:53:23,320 --> 01:53:24,470
 

5791
01:53:23,330 --> 01:53:26,330
 know that you can just start playing

5792
01:53:24,460 --> 01:53:26,330
 

5793
01:53:24,470 --> 01:53:29,000
 quiff we will be adding to it over and

5794
01:53:26,320 --> 01:53:29,000
 

5795
01:53:26,330 --> 01:53:31,100
 over also like some of these issues that

5796
01:53:28,990 --> 01:53:31,100
 

5797
01:53:29,000 --> 01:53:33,230
 we discover like there are blog posts on

5798
01:53:31,090 --> 01:53:33,230
 

5799
01:53:31,100 --> 01:53:34,940
 my on my group website that kind of go a

5800
01:53:33,220 --> 01:53:34,940
 

5801
01:53:33,230 --> 01:53:37,790
 little bit in depth they may also help

5802
01:53:34,930 --> 01:53:37,790
 

5803
01:53:34,940 --> 01:53:38,900
 you to get started and yeah overall you

5804
01:53:37,780 --> 01:53:38,900
 

5805
01:53:37,790 --> 01:53:40,910
 know I just want to say you know it's

5806
01:53:38,890 --> 01:53:40,910
 

5807
01:53:38,900 --> 01:53:43,010
 really fun field I think it's really a

5808
01:53:40,900 --> 01:53:43,010
 

5809
01:53:40,910 --> 01:53:45,560
 critical field that we know we need an

5810
01:53:43,000 --> 01:53:45,560
 

5811
01:53:43,010 --> 01:53:47,570
 influx ideas and work so I hope you know

5812
01:53:45,550 --> 01:53:47,570
 

5813
01:53:45,560 --> 01:53:48,500
 some of you will decide to join in I

5814
01:53:47,560 --> 01:53:48,500
 

5815
01:53:47,570 --> 01:53:49,850
 think it will be fun

5816
01:53:48,490 --> 01:53:49,850
 

5817
01:53:48,500 --> 01:53:59,549
 Thanks

5818
01:53:49,840 --> 01:53:59,549
 

5819
01:53:49,850 --> 01:53:59,549
[Applause]

5820
01:54:02,860 --> 01:54:02,860
 

5821
01:54:02,870 --> 01:54:09,330
 can you hear me thank you we have time

5822
01:54:06,830 --> 01:54:09,330
 

5823
01:54:06,840 --> 01:54:11,970
 for some questions if you're leaving now

5824
01:54:09,320 --> 01:54:11,970
 

5825
01:54:09,330 --> 01:54:15,030
 then please leave quietly and if you

5826
01:54:11,960 --> 01:54:15,030
 

5827
01:54:11,970 --> 01:54:17,700
 have questions to ask there is maybe

5828
01:54:15,020 --> 01:54:17,700
 

5829
01:54:15,030 --> 01:54:19,650
 just one microphone right here if you

5830
01:54:17,690 --> 01:54:19,650
 

5831
01:54:17,700 --> 01:54:20,430
 could come and join the line go ahead

5832
01:54:19,640 --> 01:54:20,430
 

5833
01:54:19,650 --> 01:54:22,860
 please

5834
01:54:20,420 --> 01:54:22,860
 

5835
01:54:20,430 --> 01:54:25,980
 so to summarize what you've done so far

5836
01:54:22,850 --> 01:54:25,980
 

5837
01:54:22,860 --> 01:54:28,080
 you find the adversary I put a max

5838
01:54:25,970 --> 01:54:28,080
 

5839
01:54:25,980 --> 01:54:30,060
 around the loss and then you they learn

5840
01:54:28,070 --> 01:54:30,060
 

5841
01:54:28,080 --> 01:54:33,060
 to put them in around the max to combat

5842
01:54:30,050 --> 01:54:33,060
 

5843
01:54:30,060 --> 01:54:35,700
 that so let me ask the logical question

5844
01:54:33,050 --> 01:54:35,700
 

5845
01:54:33,060 --> 01:54:37,530
 which is what if I put a max around your

5846
01:54:35,690 --> 01:54:37,530
 

5847
01:54:35,700 --> 01:54:45,450
 mint and then you put another minute on

5848
01:54:37,520 --> 01:54:45,450
 

5849
01:54:37,530 --> 01:54:47,580
 my max and so on so I think watch the

5850
01:54:45,440 --> 01:54:47,580
 

5851
01:54:45,450 --> 01:54:50,100
 more steps more moves in the game if you

5852
01:54:47,570 --> 01:54:50,100
 

5853
01:54:47,580 --> 01:54:52,590
 will in some ways I think there is

5854
01:54:50,090 --> 01:54:52,590
 

5855
01:54:50,100 --> 01:54:53,760
 really just like one mean one minion one

5856
01:54:52,580 --> 01:54:53,760
 

5857
01:54:52,590 --> 01:54:55,680
 max because there's just like two

5858
01:54:53,750 --> 01:54:55,680
 

5859
01:54:53,760 --> 01:54:57,150
 players adversary and us but you are

5860
01:54:55,670 --> 01:54:57,150
 

5861
01:54:55,680 --> 01:54:59,340
 right that in some way this will always

5862
01:54:57,140 --> 01:54:59,340
 

5863
01:54:57,150 --> 01:55:02,220
 be a cat-and-mouse game essentially like

5864
01:54:59,330 --> 01:55:02,220
 

5865
01:54:59,340 --> 01:55:04,050
 whenever I kind of get an idea how to

5866
01:55:02,210 --> 01:55:04,050
 

5867
01:55:02,220 --> 01:55:06,150
 kind of toward any of the perturb like

5868
01:55:04,040 --> 01:55:06,150
 

5869
01:55:04,050 --> 01:55:08,040
 any of the attacks in one model there's

5870
01:55:06,140 --> 01:55:08,040
 

5871
01:55:06,150 --> 01:55:10,110
 always a new kind of you know an

5872
01:55:08,030 --> 01:55:10,110
 

5873
01:55:08,040 --> 01:55:12,120
 extension of the model that kind of all

5874
01:55:10,100 --> 01:55:12,120
 

5875
01:55:10,110 --> 01:55:14,130
 now we are not secure again and this way

5876
01:55:12,110 --> 01:55:14,130
 

5877
01:55:12,120 --> 01:55:15,810
 we'll never have ultimate robustus but

5878
01:55:14,120 --> 01:55:15,810
 

5879
01:55:14,130 --> 01:55:17,130
 this is what we also have in the

5880
01:55:15,800 --> 01:55:17,130
 

5881
01:55:15,810 --> 01:55:19,320
 classical setting it's like we never

5882
01:55:17,120 --> 01:55:19,320
 

5883
01:55:17,130 --> 01:55:20,760
 have perfect security we just only try

5884
01:55:19,310 --> 01:55:20,760
 

5885
01:55:19,320 --> 01:55:22,830
 to reason about where we can get

5886
01:55:20,750 --> 01:55:22,830
 

5887
01:55:20,760 --> 01:55:24,510
 security at this moment what we are

5888
01:55:22,820 --> 01:55:24,510
 

5889
01:55:22,830 --> 01:55:26,520
 missing and kind of at least you know

5890
01:55:24,500 --> 01:55:26,520
 

5891
01:55:24,510 --> 01:55:27,990
 yeah it will never be perfect but we

5892
01:55:26,510 --> 01:55:27,990
 

5893
01:55:26,520 --> 01:55:30,060
 just need to do better than we do now

5894
01:55:27,980 --> 01:55:30,060
 

5895
01:55:27,990 --> 01:55:31,860
 and hopefully in time we will get there

5896
01:55:30,050 --> 01:55:31,860
 

5897
01:55:30,060 --> 01:55:33,990
 but yes there is no kind of you know

5898
01:55:31,850 --> 01:55:33,990
 

5899
01:55:31,860 --> 01:55:35,940
 solve it all solution administer now

5900
01:55:33,980 --> 01:55:35,940
 

5901
01:55:33,990 --> 01:55:37,080
 it's everything is secure period and

5902
01:55:35,930 --> 01:55:37,080
 

5903
01:55:35,940 --> 01:55:38,580
 there is nothing else to be done that

5904
01:55:37,070 --> 01:55:38,580
 

5905
01:55:37,080 --> 01:55:40,680
 smoothly always an open question but

5906
01:55:38,570 --> 01:55:40,680
 

5907
01:55:38,580 --> 01:55:42,000
 currently is actually quite quite bad so

5908
01:55:40,670 --> 01:55:42,000
 

5909
01:55:40,680 --> 01:55:44,130
 one point I made there's I think the

5910
01:55:41,990 --> 01:55:44,130
 

5911
01:55:42,000 --> 01:55:46,860
 next regime for this by the way is the

5912
01:55:44,120 --> 01:55:46,860
 

5913
01:55:44,130 --> 01:55:48,900
 max over big Delta and that would be

5914
01:55:46,850 --> 01:55:48,900
 

5915
01:55:46,860 --> 01:55:50,850
 generalization over different classes of

5916
01:55:48,890 --> 01:55:50,850
 

5917
01:55:48,900 --> 01:55:52,050
 attacks which i think is the next

5918
01:55:50,840 --> 01:55:52,050
 

5919
01:55:50,850 --> 01:55:53,010
 natural extension of this which would be

5920
01:55:52,040 --> 01:55:53,010
 

5921
01:55:52,050 --> 01:55:54,690
 really interesting to consider which

5922
01:55:53,000 --> 01:55:54,690
 

5923
01:55:53,010 --> 01:55:58,249
 really hasn't been considered very much

5924
01:55:54,680 --> 01:55:58,249
 

5925
01:55:54,690 --> 01:56:01,489
 and for example being robust to multiple

5926
01:55:58,239 --> 01:56:01,489
 

5927
01:55:58,249 --> 01:56:03,260
 you know distance measures yeah value

5928
01:56:01,479 --> 01:56:03,260
 

5929
01:56:01,489 --> 01:56:04,369
 can do to the intersection or the Union

5930
01:56:03,250 --> 01:56:04,369
 

5931
01:56:03,260 --> 01:56:06,559
 even you can do that one

5932
01:56:04,359 --> 01:56:06,559
 

5933
01:56:04,369 --> 01:56:08,090
 but to actually generalize and have an

5934
01:56:06,549 --> 01:56:08,090
 

5935
01:56:06,559 --> 01:56:10,909
 adversary that can adapt their

5936
01:56:08,080 --> 01:56:10,909
 

5937
01:56:08,090 --> 01:56:12,229
 perturbation region is a really open

5938
01:56:10,899 --> 01:56:12,229
 

5939
01:56:10,909 --> 01:56:19,579
 question that has not been addressed as

5940
01:56:12,219 --> 01:56:19,579
 

5941
01:56:12,229 --> 01:56:25,030
 far as I'm aware yeah great now it seems

5942
01:56:19,569 --> 01:56:25,030
 

5943
01:56:19,579 --> 01:56:28,340
 to me that in the interpersonal tweeny

5944
01:56:25,020 --> 01:56:28,340
 

5945
01:56:25,030 --> 01:56:31,880
 it is assumed that there is no intrinsic

5946
01:56:28,330 --> 01:56:31,880
 

5947
01:56:28,340 --> 01:56:35,329
 error in the computation of the of the

5948
01:56:31,870 --> 01:56:35,329
 

5949
01:56:31,880 --> 01:56:39,739
 tweeny but people have been trying hard

5950
01:56:35,319 --> 01:56:39,739
 

5951
01:56:35,329 --> 01:56:42,889
 to apply a big computing like reducing

5952
01:56:39,729 --> 01:56:42,889
 

5953
01:56:39,739 --> 01:56:45,369
 the precision so that when you compute

5954
01:56:42,879 --> 01:56:45,369
 

5955
01:56:42,889 --> 01:56:48,920
 their hope is some quantization error

5956
01:56:45,359 --> 01:56:48,920
 

5957
01:56:45,369 --> 01:56:50,989
 could you comment on how this robust

5958
01:56:48,910 --> 01:56:50,989
 

5959
01:56:48,920 --> 01:56:54,650
 machine learning would work with a

5960
01:56:50,979 --> 01:56:54,650
 

5961
01:56:50,989 --> 01:56:56,869
 prospect computing like in the end it's

5962
01:56:54,640 --> 01:56:56,869
 

5963
01:56:54,650 --> 01:56:58,880
 like in some ways these two things are

5964
01:56:56,859 --> 01:56:58,880
 

5965
01:56:56,869 --> 01:57:01,130
 orthogonal because as you as Eko

5966
01:56:58,870 --> 01:57:01,130
 

5967
01:56:58,880 --> 01:57:02,659
 explained in the end when we want to get

5968
01:57:01,120 --> 01:57:02,659
 

5969
01:57:01,130 --> 01:57:05,090
 robust models we just have to solve

5970
01:57:02,649 --> 01:57:05,090
 

5971
01:57:02,659 --> 01:57:06,530
 certain optimization problem and yeah so

5972
01:57:05,080 --> 01:57:06,530
 

5973
01:57:05,090 --> 01:57:08,150
 whatever we understand about solving

5974
01:57:06,520 --> 01:57:08,150
 

5975
01:57:06,530 --> 01:57:09,949
 optimization problems in the reduced

5976
01:57:08,140 --> 01:57:09,949
 

5977
01:57:08,150 --> 01:57:11,929
 precision thing if we transfer over so I

5978
01:57:09,939 --> 01:57:11,929
 

5979
01:57:09,949 --> 01:57:13,880
 don't think it's an important issue and

5980
01:57:11,919 --> 01:57:13,880
 

5981
01:57:11,929 --> 01:57:15,860
 we have to think about it but I think we

5982
01:57:13,870 --> 01:57:15,860
 

5983
01:57:13,880 --> 01:57:17,630
 stuff have a very clean interface in

5984
01:57:15,850 --> 01:57:17,630
 

5985
01:57:15,860 --> 01:57:19,190
 which to understand in what will be the

5986
01:57:17,620 --> 01:57:19,190
 

5987
01:57:17,630 --> 01:57:20,869
 impact of limited computation of the

5988
01:57:19,180 --> 01:57:20,869
 

5989
01:57:19,190 --> 01:57:21,860
 scissors like how well can we solve this

5990
01:57:20,859 --> 01:57:21,860
 

5991
01:57:20,869 --> 01:57:23,179
 optimization problem of limited

5992
01:57:21,850 --> 01:57:23,179
 

5993
01:57:21,860 --> 01:57:24,860
 precision if you can do it well

5994
01:57:23,169 --> 01:57:24,860
 

5995
01:57:23,179 --> 01:57:28,090
 everything will work if you don't do it

5996
01:57:24,850 --> 01:57:28,090
 

5997
01:57:24,860 --> 01:57:28,090
 well it will not

5998
01:57:30,430 --> 01:57:30,430
 

5999
01:57:30,440 --> 01:57:36,840
 hi so I think you talked about one

6000
01:57:33,650 --> 01:57:36,840
 

6001
01:57:33,660 --> 01:57:40,980
 approach being to find the exact worst

6002
01:57:36,830 --> 01:57:40,980
 

6003
01:57:36,840 --> 01:57:42,920
 case adversarial example and you talked

6004
01:57:40,970 --> 01:57:42,920
 

6005
01:57:40,980 --> 01:57:46,080
 about using kind of off-the-shelf

6006
01:57:42,910 --> 01:57:46,080
 

6007
01:57:42,920 --> 01:57:49,280
 binary optimizer sexy place but I mean I

6008
01:57:46,070 --> 01:57:49,280
 

6009
01:57:46,080 --> 01:57:50,760
 was wondering like the zero one binary

6010
01:57:49,270 --> 01:57:50,760
 

6011
01:57:49,280 --> 01:57:51,750
 programming problems are actually

6012
01:57:50,750 --> 01:57:51,750
 

6013
01:57:50,760 --> 01:57:53,910
 np-hard

6014
01:57:51,740 --> 01:57:53,910
 

6015
01:57:51,750 --> 01:57:55,470
 and when you look at what optimizes like

6016
01:57:53,900 --> 01:57:55,470
 

6017
01:57:53,910 --> 01:57:57,000
 SEAPLEX do they're actually finding

6018
01:57:55,460 --> 01:57:57,000
 

6019
01:57:55,470 --> 01:57:58,650
 approximate solutions like they're

6020
01:57:56,990 --> 01:57:58,650
 

6021
01:57:57,000 --> 01:58:00,990
 basically the branch and bound they take

6022
01:57:58,640 --> 01:58:00,990
 

6023
01:57:58,650 --> 01:58:04,250
 like a linear relaxation and find an

6024
01:58:00,980 --> 01:58:04,250
 

6025
01:58:00,990 --> 01:58:11,190
 approximate solution and then you know

6026
01:58:04,240 --> 01:58:11,190
 

6027
01:58:04,250 --> 01:58:13,110
 find another relaxation so you know in

6028
01:58:11,180 --> 01:58:13,110
 

6029
01:58:11,190 --> 01:58:14,490
 terms of finding provably hard bounds

6030
01:58:13,100 --> 01:58:14,490
 

6031
01:58:13,110 --> 01:58:18,420
 have you actually been able to do this

6032
01:58:14,480 --> 01:58:18,420
 

6033
01:58:14,490 --> 01:58:20,400
 successfully based on provably optimal

6034
01:58:18,410 --> 01:58:20,400
 

6035
01:58:18,420 --> 01:58:22,860
 solutions to the combinatorial problem

6036
01:58:20,390 --> 01:58:22,860
 

6037
01:58:20,400 --> 01:58:24,960
 horror right so so the examples I gave

6038
01:58:22,850 --> 01:58:24,960
 

6039
01:58:22,860 --> 01:58:26,790
 there were for the networks and the

6040
01:58:24,950 --> 01:58:26,790
 

6041
01:58:24,960 --> 01:58:28,380
 examples in the notebook those are all

6042
01:58:26,780 --> 01:58:28,380
 

6043
01:58:26,790 --> 01:58:30,360
 solving branch and bound to optimality

6044
01:58:28,370 --> 01:58:30,360
 

6045
01:58:28,380 --> 01:58:32,430
 so you get you you get the full you

6046
01:58:30,350 --> 01:58:32,430
 

6047
01:58:30,360 --> 01:58:33,630
 expand the tree entirely to the point

6048
01:58:32,420 --> 01:58:33,630
 

6049
01:58:32,430 --> 01:58:34,980
 where you actually are guaranteed off

6050
01:58:33,620 --> 01:58:34,980
 

6051
01:58:33,630 --> 01:58:37,740
 melody your upper and lower bounds match

6052
01:58:34,970 --> 01:58:37,740
 

6053
01:58:34,980 --> 01:58:40,050
 now of course you can also use stop

6054
01:58:37,730 --> 01:58:40,050
 

6055
01:58:37,740 --> 01:58:42,600
 those solvers early in some sense to get

6056
01:58:40,040 --> 01:58:42,600
 

6057
01:58:40,050 --> 01:58:46,260
 upper and lower bounds which are not not

6058
01:58:42,590 --> 01:58:46,260
 

6059
01:58:42,600 --> 01:58:48,090
 do not meet and actually the combination

6060
01:58:46,250 --> 01:58:48,090
 

6061
01:58:46,260 --> 01:58:51,260
 I describe there are exactly some are

6062
01:58:48,080 --> 01:58:51,260
 

6063
01:58:48,090 --> 01:58:54,330
 like the first few relaxations that

6064
01:58:51,250 --> 01:58:54,330
 

6065
01:58:51,260 --> 01:58:56,910
 method like C flex or Grove it would

6066
01:58:54,320 --> 01:58:56,910
 

6067
01:58:54,330 --> 01:58:58,860
 solve so so and I should say there's

6068
01:58:56,900 --> 01:58:58,860
 

6069
01:58:56,910 --> 01:59:00,360
 also work and I think there's been more

6070
01:58:58,850 --> 01:59:00,360
 

6071
01:58:58,860 --> 01:59:02,180
 some work from from the University of

6072
01:59:00,350 --> 01:59:02,180
 

6073
01:59:00,360 --> 01:59:04,230
 Oxford and folks of deep mind on

6074
01:59:02,170 --> 01:59:04,230
 

6075
01:59:02,180 --> 01:59:07,020
 adapting like better branch and bound

6076
01:59:04,220 --> 01:59:07,020
 

6077
01:59:04,230 --> 01:59:08,370
 search methods for this problem as I

6078
01:59:07,010 --> 01:59:08,370
 

6079
01:59:07,020 --> 01:59:12,150
 think is my extra might even be a paper

6080
01:59:08,360 --> 01:59:12,150
 

6081
01:59:08,370 --> 01:59:13,860
 here at nips on that so yes it's a lot

6082
01:59:12,140 --> 01:59:13,860
 

6083
01:59:12,150 --> 01:59:15,480
 of work in this there's also a lot of

6084
01:59:13,850 --> 01:59:15,480
 

6085
01:59:13,860 --> 01:59:17,520
 work on the SMT solver community about

6086
01:59:15,470 --> 01:59:17,520
 

6087
01:59:15,480 --> 01:59:19,680
 specialized solvers for these things and

6088
01:59:17,510 --> 01:59:19,680
 

6089
01:59:17,520 --> 01:59:22,320
 again compute upper and lower bounds but

6090
01:59:19,670 --> 01:59:22,320
 

6091
01:59:19,680 --> 01:59:24,780
 to be clear the the solutions that we

6092
01:59:22,310 --> 01:59:24,780
 

6093
01:59:22,320 --> 01:59:26,250
 have in our tutorial are all the cases

6094
01:59:24,770 --> 01:59:26,250
 

6095
01:59:24,780 --> 01:59:27,330
 where you solve the branch amount to

6096
01:59:26,240 --> 01:59:27,330
 

6097
01:59:26,250 --> 01:59:32,070
 completion where the upper and lower

6098
01:59:27,320 --> 01:59:32,070
 

6099
01:59:27,330 --> 01:59:33,260
 bounds match okay and so how many

6100
01:59:32,060 --> 01:59:33,260
 

6101
01:59:32,070 --> 01:59:35,510
 dimensions have been able to

6102
01:59:33,250 --> 01:59:35,510
 

6103
01:59:33,260 --> 01:59:38,090
 just so they're so for those ones that

6104
01:59:35,500 --> 01:59:38,090
 

6105
01:59:35,510 --> 01:59:39,530
 works exactly there's about 80 hidden

6106
01:59:38,080 --> 01:59:39,530
 

6107
01:59:38,090 --> 01:59:46,730
 units and those which is the number of

6108
01:59:39,520 --> 01:59:46,730
 

6109
01:59:39,530 --> 01:59:50,059
 binary variables what are your thoughts

6110
01:59:46,720 --> 01:59:50,059
 

6111
01:59:46,730 --> 01:59:52,789
 on ideas like input free adversarial

6112
01:59:50,049 --> 01:59:52,789
 

6113
01:59:50,059 --> 01:59:54,710
 examples so what do you like meaning

6114
01:59:52,779 --> 01:59:54,710
 

6115
01:59:52,789 --> 01:59:56,360
 that you don't like what does the input

6116
01:59:54,700 --> 01:59:56,360
 

6117
01:59:54,710 --> 01:59:57,920
 free mean exactly like you don't look at

6118
01:59:56,350 --> 01:59:57,920
 

6119
01:59:56,360 --> 02:00:01,039
 the input data when you're constructing

6120
01:59:57,910 --> 02:00:01,039
 

6121
01:59:57,920 --> 02:00:02,269
 your adversary oh I see oh yes so this

6122
02:00:01,029 --> 02:00:02,269
 

6123
02:00:01,039 --> 02:00:04,760
 is a very interesting question actually

6124
02:00:02,259 --> 02:00:04,760
 

6125
02:00:02,269 --> 02:00:06,199
 not in some ways yes so not much I think

6126
02:00:04,750 --> 02:00:06,199
 

6127
02:00:04,760 --> 02:00:08,650
 is extremely interesting because in some

6128
02:00:06,189 --> 02:00:08,650
 

6129
02:00:06,199 --> 02:00:11,059
 ways you would like to kind of make your

6130
02:00:08,640 --> 02:00:11,059
 

6131
02:00:08,650 --> 02:00:12,739
 perturbation to be as kind of oblivious

6132
02:00:11,049 --> 02:00:12,739
 

6133
02:00:11,059 --> 02:00:15,650
 to where they will be applied as as

6134
02:00:12,729 --> 02:00:15,650
 

6135
02:00:12,739 --> 02:00:17,000
 possible so I don't think so then I like

6136
02:00:15,640 --> 02:00:17,000
 

6137
02:00:15,650 --> 02:00:18,230
 is they work on if I said perturbation

6138
02:00:16,990 --> 02:00:18,230
 

6139
02:00:17,000 --> 02:00:20,300
 which is not exactly what you are saying

6140
02:00:18,220 --> 02:00:20,300
 

6141
02:00:18,230 --> 02:00:21,500
 what you are talking about but like it's

6142
02:00:20,290 --> 02:00:21,500
 

6143
02:00:20,300 --> 02:00:22,369
 close its to look at the data but you

6144
02:00:21,490 --> 02:00:22,369
 

6145
02:00:21,500 --> 02:00:24,409
 would like to come up with one

6146
02:00:22,359 --> 02:00:24,409
 

6147
02:00:22,369 --> 02:00:27,199
 perturbation that works for most of the

6148
02:00:24,399 --> 02:00:27,199
 

6149
02:00:24,409 --> 02:00:31,820
 images so honestly like input three

6150
02:00:27,189 --> 02:00:31,820
 

6151
02:00:27,199 --> 02:00:34,039
 perturbations I think ok so ideally if

6152
02:00:31,810 --> 02:00:34,039
 

6153
02:00:31,820 --> 02:00:36,139
 we do well unless there is some actual

6154
02:00:34,029 --> 02:00:36,139
 

6155
02:00:34,039 --> 02:00:38,150
 hidden bias in our machine learning

6156
02:00:36,129 --> 02:00:38,150
 

6157
02:00:36,139 --> 02:00:39,139
 models that we kind of is unwelcome they

6158
02:00:38,140 --> 02:00:39,139
 

6159
02:00:38,150 --> 02:00:41,000
 will be kind of semantically meaningful

6160
02:00:39,129 --> 02:00:41,000
 

6161
02:00:39,139 --> 02:00:43,610
 like there should be just something that

6162
02:00:40,990 --> 02:00:43,610
 

6163
02:00:41,000 --> 02:00:45,199
 also should you know confuse humans so

6164
02:00:43,600 --> 02:00:45,199
 

6165
02:00:43,610 --> 02:00:46,940
 it will be very interesting to study if

6166
02:00:45,189 --> 02:00:46,940
 

6167
02:00:45,199 --> 02:00:48,829
 that's the case or not so I think that's

6168
02:00:46,930 --> 02:00:48,829
 

6169
02:00:46,940 --> 02:00:49,849
 interesting you know again we are still

6170
02:00:48,819 --> 02:00:49,849
 

6171
02:00:48,829 --> 02:00:51,860
 starting I think it's a very interesting

6172
02:00:49,839 --> 02:00:51,860
 

6173
02:00:49,849 --> 02:00:54,199
 topic it just I don't really know much

6174
02:00:51,850 --> 02:00:54,199
 

6175
02:00:51,860 --> 02:00:55,760
 about yes so so in the case of universal

6176
02:00:54,189 --> 02:00:55,760
 

6177
02:00:54,199 --> 02:00:57,619
 perturbations in particular which are

6178
02:00:55,750 --> 02:00:57,619
 

6179
02:00:55,760 --> 02:00:58,670
 sort of getting at what you want there's

6180
02:00:57,609 --> 02:00:58,670
 

6181
02:00:57,619 --> 02:00:59,900
 actually very nice optimization

6182
02:00:58,660 --> 02:00:59,900
 

6183
02:00:58,670 --> 02:01:01,519
 formulation of that too because you can

6184
02:00:59,890 --> 02:01:01,519
 

6185
02:00:59,900 --> 02:01:03,320
 just think about the max of a delta

6186
02:01:01,509 --> 02:01:03,320
 

6187
02:01:01,519 --> 02:01:04,849
 being outside the sum now or outside

6188
02:01:03,310 --> 02:01:04,849
 

6189
02:01:03,320 --> 02:01:07,250
 expectation so it's still a min max

6190
02:01:04,839 --> 02:01:07,250
 

6191
02:01:04,849 --> 02:01:08,780
 problem but the max is outside the

6192
02:01:07,240 --> 02:01:08,780
 

6193
02:01:07,250 --> 02:01:11,869
 expectation is it up inside of it so

6194
02:01:08,770 --> 02:01:11,869
 

6195
02:01:08,780 --> 02:01:13,340
 it's independent of X or it has to be

6196
02:01:11,859 --> 02:01:13,340
 

6197
02:01:11,869 --> 02:01:14,780
 universal over all X so that's one of

6198
02:01:13,330 --> 02:01:14,780
 

6199
02:01:13,340 --> 02:01:17,119
 the universal perturbation formulation

6200
02:01:14,770 --> 02:01:17,119
 

6201
02:01:14,780 --> 02:01:20,510
 which has been studied what's been less

6202
02:01:17,109 --> 02:01:20,510
 

6203
02:01:17,119 --> 02:01:22,309
 studied though is models that are robust

6204
02:01:20,500 --> 02:01:22,309
 

6205
02:01:20,510 --> 02:01:23,869
 averse to universal perturbations which

6206
02:01:22,299 --> 02:01:23,869
 

6207
02:01:22,309 --> 02:01:25,670
 should be an easier problem to handle

6208
02:01:23,859 --> 02:01:25,670
 

6209
02:01:23,869 --> 02:01:27,559
 but there hasn't been much work on like

6210
02:01:25,660 --> 02:01:27,559
 

6211
02:01:25,670 --> 02:01:28,760
 robust optimization against Universal

6212
02:01:27,549 --> 02:01:28,760
 

6213
02:01:27,559 --> 02:01:33,619
 perturbation so yeah that's really a

6214
02:01:28,750 --> 02:01:33,619
 

6215
02:01:28,760 --> 02:01:35,809
 really cool topic thank you oh thank you

6216
02:01:33,609 --> 02:01:35,809
 

6217
02:01:33,619 --> 02:01:37,130
 for your excellent tutorial the website

6218
02:01:35,799 --> 02:01:37,130
 

6219
02:01:35,809 --> 02:01:40,280
 isn't especially a nice touch

6220
02:01:37,120 --> 02:01:40,280
 

6221
02:01:37,130 --> 02:01:43,119
 I was wondering so you claim robustness

6222
02:01:40,270 --> 02:01:43,119
 

6223
02:01:40,280 --> 02:01:45,010
 at a particular bound

6224
02:01:43,109 --> 02:01:45,010
 

6225
02:01:43,119 --> 02:01:47,139
 a particular epsilon but presumably if

6226
02:01:45,000 --> 02:01:47,139
 

6227
02:01:45,010 --> 02:01:49,209
 you were to increase the epsilon you

6228
02:01:47,129 --> 02:01:49,209
 

6229
02:01:47,139 --> 02:01:51,459
 would then increase there right and so

6230
02:01:49,199 --> 02:01:51,459
 

6231
02:01:49,209 --> 02:01:52,719
 on and so forth how has there been any

6232
02:01:51,449 --> 02:01:52,719
 

6233
02:01:51,459 --> 02:01:54,669
 research done for example on the

6234
02:01:52,709 --> 02:01:54,669
 

6235
02:01:52,719 --> 02:01:56,409
 detection of external attacks such that

6236
02:01:54,659 --> 02:01:56,409
 

6237
02:01:54,669 --> 02:01:57,699
 even if you were to increase the epsilon

6238
02:01:56,399 --> 02:01:57,699
 

6239
02:01:56,409 --> 02:01:59,739
 further and further you still realize

6240
02:01:57,689 --> 02:01:59,739
 

6241
02:01:57,699 --> 02:02:01,179
 that your input is now adversarial and

6242
02:01:59,729 --> 02:02:01,179
 

6243
02:01:59,739 --> 02:02:05,559
 if you just like rejected or something

6244
02:02:01,169 --> 02:02:05,559
 

6245
02:02:01,179 --> 02:02:07,239
 or do something sensible yeah so we do

6246
02:02:05,549 --> 02:02:07,239
 

6247
02:02:05,559 --> 02:02:08,679
 have some work that's just sort of in

6248
02:02:07,229 --> 02:02:08,679
 

6249
02:02:07,239 --> 02:02:09,760
 progress but I can talk about it I'm not

6250
02:02:08,669 --> 02:02:09,760
 

6251
02:02:08,679 --> 02:02:11,079
 sure if we can do with it

6252
02:02:09,750 --> 02:02:11,079
 

6253
02:02:09,760 --> 02:02:13,360
 I've just sort of simple like binary

6254
02:02:11,069 --> 02:02:13,360
 

6255
02:02:11,079 --> 02:02:14,530
 search on an example dependent epsilon

6256
02:02:13,350 --> 02:02:14,530
 

6257
02:02:13,360 --> 02:02:17,379
 boundaries that you can increase or

6258
02:02:14,520 --> 02:02:17,379
 

6259
02:02:14,530 --> 02:02:20,379
 decrease to sort of get each make each

6260
02:02:17,369 --> 02:02:20,379
 

6261
02:02:17,379 --> 02:02:23,199
 example as secure as sort of as secure

6262
02:02:20,369 --> 02:02:23,199
 

6263
02:02:20,379 --> 02:02:24,369
 as it can be in some sense not just by

6264
02:02:23,189 --> 02:02:24,369
 

6265
02:02:23,199 --> 02:02:26,169
 getting what you want but you have more

6266
02:02:24,359 --> 02:02:26,169
 

6267
02:02:24,369 --> 02:02:28,389
 to say you know it was an interesting

6268
02:02:26,159 --> 02:02:28,389
 

6269
02:02:26,169 --> 02:02:30,550
 question like I'm always a little bit

6270
02:02:28,379 --> 02:02:30,550
 

6271
02:02:28,389 --> 02:02:33,249
 skeptical of detecting Anderson examples

6272
02:02:30,540 --> 02:02:33,249
 

6273
02:02:30,550 --> 02:02:34,989
 because it's very unclear like if you

6274
02:02:33,239 --> 02:02:34,989
 

6275
02:02:33,249 --> 02:02:36,879
 make a data-driven if you make it like

6276
02:02:34,979 --> 02:02:36,879
 

6277
02:02:34,989 --> 02:02:38,530
 machine learning algorithms supposed to

6278
02:02:36,869 --> 02:02:38,530
 

6279
02:02:36,879 --> 02:02:40,570
 the text stuff then what you can do can

6280
02:02:38,520 --> 02:02:40,570
 

6281
02:02:38,530 --> 02:02:42,249
 construct a visual examples against this

6282
02:02:40,560 --> 02:02:42,249
 

6283
02:02:40,570 --> 02:02:44,499
 detector so this is like the most

6284
02:02:42,239 --> 02:02:44,499
 

6285
02:02:42,249 --> 02:02:46,629
 promising way to do it is definitely not

6286
02:02:44,489 --> 02:02:46,629
 

6287
02:02:44,499 --> 02:02:47,709
 I don't think it works doesn't mean it

6288
02:02:46,619 --> 02:02:47,709
 

6289
02:02:46,629 --> 02:02:49,030
 can't be done but I think the

6290
02:02:47,699 --> 02:02:49,030
 

6291
02:02:47,709 --> 02:02:50,800
 interesting meta question over here is

6292
02:02:49,020 --> 02:02:50,800
 

6293
02:02:49,030 --> 02:02:53,409
 exactly like how much our metals over

6294
02:02:50,790 --> 02:02:53,409
 

6295
02:02:50,800 --> 02:02:54,519
 fit to the choice of Epsilon okay so we

6296
02:02:53,399 --> 02:02:54,519
 

6297
02:02:53,409 --> 02:02:56,619
 definitely did this kind of studies

6298
02:02:54,509 --> 02:02:56,619
 

6299
02:02:54,519 --> 02:02:58,510
 where we kind of know to care model that

6300
02:02:56,609 --> 02:02:58,510
 

6301
02:02:56,619 --> 02:03:01,929
 we know that is you know that is like

6302
02:02:58,500 --> 02:03:01,929
 

6303
02:02:58,510 --> 02:03:03,579
 designed to be robust to 0.1 Epsilon and

6304
02:03:01,919 --> 02:03:03,579
 

6305
02:03:01,929 --> 02:03:05,649
 like how does it fire when you go beyond

6306
02:03:03,569 --> 02:03:05,649
 

6307
02:03:03,579 --> 02:03:07,749
 it and of course it gets broken it's

6308
02:03:05,639 --> 02:03:07,749
 

6309
02:03:05,649 --> 02:03:09,249
 depending on the data on the data set it

6310
02:03:07,739 --> 02:03:09,249
 

6311
02:03:07,749 --> 02:03:10,809
 sometimes it's really like it's over

6312
02:03:09,239 --> 02:03:10,809
 

6313
02:03:09,249 --> 02:03:12,760
 feats and sometimes just like relatively

6314
02:03:10,799 --> 02:03:12,760
 

6315
02:03:10,809 --> 02:03:14,289
 gracefully goes back and sometimes you

6316
02:03:12,750 --> 02:03:14,289
 

6317
02:03:12,760 --> 02:03:16,149
 actually wants to kind of a pack it in a

6318
02:03:14,279 --> 02:03:16,149
 

6319
02:03:14,289 --> 02:03:18,070
 stronger manner to just get as you know

6320
02:03:16,139 --> 02:03:18,070
 

6321
02:03:16,149 --> 02:03:19,570
 as security against smaller Epsilon

6322
02:03:18,060 --> 02:03:19,570
 

6323
02:03:18,070 --> 02:03:20,889
 so there I think there's we don't unsend

6324
02:03:19,560 --> 02:03:20,889
 

6325
02:03:19,570 --> 02:03:23,289
 it well there's clear stuff interesting

6326
02:03:20,879 --> 02:03:23,289
 

6327
02:03:20,889 --> 02:03:26,769
 happening but yet we don't okay thank

6328
02:03:23,279 --> 02:03:26,769
 

6329
02:03:23,289 --> 02:03:27,969
 you I thanks again for the talk to his

6330
02:03:26,759 --> 02:03:27,969
 

6331
02:03:26,769 --> 02:03:30,459
 excellent

6332
02:03:27,959 --> 02:03:30,459
 

6333
02:03:27,969 --> 02:03:32,349
 so only one or two more questions after

6334
02:03:30,449 --> 02:03:32,349
 

6335
02:03:30,459 --> 02:03:34,780
 my question actually is actually about

6336
02:03:32,339 --> 02:03:34,780
 

6337
02:03:32,349 --> 02:03:36,099
 the nature of the threat models that the

6338
02:03:34,770 --> 02:03:36,099
 

6339
02:03:34,780 --> 02:03:36,640
 attackers and the inputs they'll choose

6340
02:03:36,089 --> 02:03:36,640
 

6341
02:03:36,099 --> 02:03:37,840
 and that

6342
02:03:36,630 --> 02:03:37,840
 

6343
02:03:36,640 --> 02:03:39,220
 I think in most threat models you're

6344
02:03:37,830 --> 02:03:39,220
 

6345
02:03:37,840 --> 02:03:41,050
 gonna find the attacker is free to

6346
02:03:39,210 --> 02:03:41,050
 

6347
02:03:39,220 --> 02:03:43,180
 choose inputs to perturb that are

6348
02:03:41,040 --> 02:03:43,180
 

6349
02:03:41,050 --> 02:03:45,130
 outside the distribution of the task in

6350
02:03:43,170 --> 02:03:45,130
 

6351
02:03:43,180 --> 02:03:47,470
 hand you gave a really good example of

6352
02:03:45,120 --> 02:03:47,470
 

6353
02:03:45,130 --> 02:03:49,750
 carlini's work where he used music to

6354
02:03:47,460 --> 02:03:49,750
 

6355
02:03:47,470 --> 02:03:51,280
 attack speech to text yeah and I think

6356
02:03:49,740 --> 02:03:51,280
 

6357
02:03:49,750 --> 02:03:52,390
 most of the fab models I've looked at

6358
02:03:51,270 --> 02:03:52,390
 

6359
02:03:51,280 --> 02:03:54,340
 this is perfectly available to the

6360
02:03:52,380 --> 02:03:54,340
 

6361
02:03:52,390 --> 02:03:56,320
 attacker and I'm curious if you see any

6362
02:03:54,330 --> 02:03:56,320
 

6363
02:03:54,340 --> 02:03:58,330
 path forward for adversarial training

6364
02:03:56,310 --> 02:03:58,330
 

6365
02:03:56,320 --> 02:04:00,070
 and verification when you have to

6366
02:03:58,320 --> 02:04:00,070
 

6367
02:03:58,330 --> 02:04:01,630
 actually deal with whole family of

6368
02:04:00,060 --> 02:04:01,630
 

6369
02:04:00,070 --> 02:04:04,630
 distributions that lie outside your task

6370
02:04:01,620 --> 02:04:04,630
 

6371
02:04:01,630 --> 02:04:08,620
 yeah yes so I can definitely see it I

6372
02:04:04,620 --> 02:04:08,620
 

6373
02:04:04,630 --> 02:04:11,440
 don't know how to do it yeah I agree

6374
02:04:08,610 --> 02:04:11,440
 

6375
02:04:08,620 --> 02:04:13,360
 yeah it's an actual problem if you if

6376
02:04:11,430 --> 02:04:13,360
 

6377
02:04:11,440 --> 02:04:15,250
 you say when a so what prevents noise

6378
02:04:13,350 --> 02:04:15,250
 

6379
02:04:13,360 --> 02:04:16,270
 from being classified or something yeah

6380
02:04:15,240 --> 02:04:16,270
 

6381
02:04:15,250 --> 02:04:18,040
 well because it could be any noise

6382
02:04:16,260 --> 02:04:18,040
 

6383
02:04:16,270 --> 02:04:20,440
 anywhere right that's a great adversity

6384
02:04:18,030 --> 02:04:20,440
 

6385
02:04:18,040 --> 02:04:21,910
 or graffiti we don't know yet yes so so

6386
02:04:20,430 --> 02:04:21,910
 

6387
02:04:20,440 --> 02:04:23,560
 I expect that this would be like a big

6388
02:04:21,900 --> 02:04:23,560
 

6389
02:04:21,910 --> 02:04:25,780
 problem like I have some thoughts how to

6390
02:04:23,550 --> 02:04:25,780
 

6391
02:04:23,560 --> 02:04:26,800
 go like I think essentially part of the

6392
02:04:25,770 --> 02:04:26,800
 

6393
02:04:25,780 --> 02:04:28,750
 problem might be that we are asking for

6394
02:04:26,790 --> 02:04:28,750
 

6395
02:04:26,800 --> 02:04:31,600
 too much I think we should not be able

6396
02:04:28,740 --> 02:04:31,600
 

6397
02:04:28,750 --> 02:04:33,550
 to robusta classified noise as well but

6398
02:04:31,590 --> 02:04:33,550
 

6399
02:04:31,600 --> 02:04:35,290
 yet currently if you start with complete

6400
02:04:33,540 --> 02:04:35,290
 

6401
02:04:33,550 --> 02:04:36,400
 noise you will you know you will destroy

6402
02:04:35,280 --> 02:04:36,400
 

6403
02:04:35,290 --> 02:04:38,530
 this models there is no question about

6404
02:04:36,390 --> 02:04:38,530
 

6405
02:04:36,400 --> 02:04:40,120
 that okay yeah to your point about

6406
02:04:38,520 --> 02:04:40,120
 

6407
02:04:38,530 --> 02:04:41,500
 asking too much I think this is where

6408
02:04:40,110 --> 02:04:41,500
 

6409
02:04:40,120 --> 02:04:42,730
 the engagement is security community

6410
02:04:41,490 --> 02:04:42,730
 

6411
02:04:41,500 --> 02:04:44,710
 which is where I actually come from has

6412
02:04:42,720 --> 02:04:44,710
 

6413
02:04:42,730 --> 02:04:46,630
 to really start in earnest exactly as it

6414
02:04:44,700 --> 02:04:46,630
 

6415
02:04:44,710 --> 02:04:48,310
 would be the threat models not the ml

6416
02:04:46,620 --> 02:04:48,310
 

6417
02:04:46,630 --> 02:04:50,350
 but define what's too much so to speak

6418
02:04:48,300 --> 02:04:50,350
 

6419
02:04:48,310 --> 02:04:50,830
 yeah I'm happy to chop that's exactly

6420
02:04:50,340 --> 02:04:50,830
 

6421
02:04:50,350 --> 02:04:53,460
 what I think

6422
02:04:50,820 --> 02:04:53,460
 

6423
02:04:50,830 --> 02:04:53,460
 thank you

6424
02:04:58,799 --> 02:04:58,799
 

6425
02:04:58,809 --> 02:05:09,800
 please okay so most of the tutorial

6426
02:05:04,270 --> 02:05:09,800
 

6427
02:05:04,280 --> 02:05:12,260
 about image object detection and I just

6428
02:05:09,790 --> 02:05:12,260
 

6429
02:05:09,800 --> 02:05:16,210
 wonder if there's any results on natural

6430
02:05:12,250 --> 02:05:16,210
 

6431
02:05:12,260 --> 02:05:18,710
 language processing like question answer

6432
02:05:16,200 --> 02:05:18,710
 

6433
02:05:16,210 --> 02:05:20,960
 yes there is I I know personally and

6434
02:05:18,700 --> 02:05:20,960
 

6435
02:05:18,710 --> 02:05:21,920
 Daniel that would have some each and

6436
02:05:20,950 --> 02:05:21,920
 

6437
02:05:20,960 --> 02:05:24,019
 apparently have some work on that

6438
02:05:21,910 --> 02:05:24,019
 

6439
02:05:21,920 --> 02:05:27,050
 Nicolas Carlini right sitting by by you

6440
02:05:24,009 --> 02:05:27,050
 

6441
02:05:24,019 --> 02:05:29,749
 has some work on on speech as mention in

6442
02:05:27,040 --> 02:05:29,749
 

6443
02:05:27,050 --> 02:05:30,979
 the previous one so yes language is

6444
02:05:29,739 --> 02:05:30,979
 

6445
02:05:29,749 --> 02:05:32,479
 different in particular because it's

6446
02:05:30,969 --> 02:05:32,479
 

6447
02:05:30,979 --> 02:05:34,039
 much more discrete than images so you

6448
02:05:32,469 --> 02:05:34,039
 

6449
02:05:32,479 --> 02:05:37,610
 change a whole word you don't just put

6450
02:05:34,029 --> 02:05:37,610
 

6451
02:05:34,039 --> 02:05:40,429
 her word a little bit but it's a it's a

6452
02:05:37,600 --> 02:05:40,429
 

6453
02:05:37,610 --> 02:05:41,510
 there is work on that and it's not as

6454
02:05:40,419 --> 02:05:41,510
 

6455
02:05:40,429 --> 02:05:42,829
 well developed but there's only is some

6456
02:05:41,500 --> 02:05:42,829
 

6457
02:05:41,510 --> 02:05:43,280
 work on that feels like it the latest

6458
02:05:42,819 --> 02:05:43,280
 

6459
02:05:42,829 --> 02:05:45,110
 you know

6460
02:05:43,270 --> 02:05:45,110
 

6461
02:05:43,280 --> 02:05:47,389
 EEM NLP there were several papers on

6462
02:05:45,100 --> 02:05:47,389
 

6463
02:05:45,110 --> 02:05:49,550
 this yes so in the central NLP is that

6464
02:05:47,379 --> 02:05:49,550
 

6465
02:05:47,389 --> 02:05:51,199
 like we still are not there yet with

6466
02:05:49,540 --> 02:05:51,199
 

6467
02:05:49,550 --> 02:05:52,400
 average case performance so it's no it's

6468
02:05:51,189 --> 02:05:52,400
 

6469
02:05:51,199 --> 02:05:53,869
 obviously doesn't work when you do

6470
02:05:52,390 --> 02:05:53,869
 

6471
02:05:52,400 --> 02:05:55,789
 adversarial stuff but there is work

6472
02:05:53,859 --> 02:05:55,789
 

6473
02:05:53,869 --> 02:05:57,739
 again pearson yang I think is a one of

6474
02:05:55,779 --> 02:05:57,739
 

6475
02:05:55,789 --> 02:05:59,179
 the lead person of that so yeah but yeah

6476
02:05:57,729 --> 02:05:59,179
 

6477
02:05:57,739 --> 02:06:04,219
 it should apply to any domain in just a

6478
02:05:59,169 --> 02:06:04,219
 

6479
02:05:59,179 --> 02:06:04,909
 matter of time at the end of the

6480
02:06:04,209 --> 02:06:04,909
 

6481
02:06:04,219 --> 02:06:07,190
 tutorial

6482
02:06:04,899 --> 02:06:07,190
 

6483
02:06:04,909 --> 02:06:08,790
 let's thanks Nico and Alex again thank

6484
02:06:07,180 --> 02:06:08,790
 

6485
02:06:07,190 --> 02:06:12,489
 you very much for a great tutorial

6486
02:06:08,780 --> 02:06:12,489
 

6487
02:06:08,790 --> 02:06:12,489
[Applause]