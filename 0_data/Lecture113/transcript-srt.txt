1
00:00:04,780 --> 00:00:11,350
 Thank You Dean and thanks to Phil for

2
00:00:09,209 --> 00:00:11,350
 

3
00:00:09,219 --> 00:00:14,110
 for inviting me out and getting the set

4
00:00:11,340 --> 00:00:14,110
 

5
00:00:11,350 --> 00:00:15,969
 up and the special thanks to wargames

6
00:00:14,100 --> 00:00:15,969
 

7
00:00:14,110 --> 00:00:19,869
 who sponsored my travel in getting me

8
00:00:15,959 --> 00:00:19,869
 

9
00:00:15,969 --> 00:00:22,270
 here today my talk is going to be a

10
00:00:19,859 --> 00:00:22,270
 

11
00:00:19,869 --> 00:00:24,039
 little different than my usual talks so

12
00:00:22,260 --> 00:00:24,039
 

13
00:00:22,270 --> 00:00:28,180
 if you expected one of my usual talks

14
00:00:24,029 --> 00:00:28,180
 

15
00:00:24,039 --> 00:00:32,890
 sorry to disappoint but today I want to

16
00:00:28,170 --> 00:00:32,890
 

17
00:00:28,180 --> 00:00:37,030
 talk about generic programming and there

18
00:00:32,880 --> 00:00:37,030
 

19
00:00:32,890 --> 00:00:39,010
 is a reason for that this is a quote

20
00:00:37,020 --> 00:00:39,010
 

21
00:00:37,030 --> 00:00:40,570
 from Alex definite fully grasped

22
00:00:39,000 --> 00:00:40,570
 

23
00:00:39,010 --> 00:00:43,239
 mathematics until you understand its

24
00:00:40,560 --> 00:00:43,239
 

25
00:00:40,570 --> 00:00:47,290
 historical context and this year is a

26
00:00:43,229 --> 00:00:47,290
 

27
00:00:43,239 --> 00:00:51,610
 special year for generic programming and

28
00:00:47,280 --> 00:00:51,610
 

29
00:00:47,290 --> 00:00:54,430
 here's why 1988 so when I was at CPP con

30
00:00:51,600 --> 00:00:54,430
 

31
00:00:51,610 --> 00:00:56,559
 they had a little icebreakers that you

32
00:00:54,420 --> 00:00:56,559
 

33
00:00:54,430 --> 00:00:57,820
 were supposed to put on your badge as

34
00:00:56,549 --> 00:00:57,820
 

35
00:00:56,559 --> 00:00:59,170
 you were walking around you know a

36
00:00:57,810 --> 00:00:59,170
 

37
00:00:57,820 --> 00:01:03,160
 question or a statement that would

38
00:00:59,160 --> 00:01:03,160
 

39
00:00:59,170 --> 00:01:06,610
 invoke conversation so mine was was how

40
00:01:03,150 --> 00:01:06,610
 

41
00:01:03,160 --> 00:01:12,640
 old is generic programming and the

42
00:01:06,600 --> 00:01:12,640
 

43
00:01:06,610 --> 00:01:15,880
 answer is 1988 the best response I got

44
00:01:12,630 --> 00:01:15,880
 

45
00:01:12,640 --> 00:01:17,979
 when I told somebody oh it was 1988 yes

46
00:01:15,870 --> 00:01:17,979
 

47
00:01:15,880 --> 00:01:19,270
 and I bet some people in this room are

48
00:01:17,969 --> 00:01:19,270
 

49
00:01:17,979 --> 00:01:22,509
 thinking this right now

50
00:01:19,260 --> 00:01:22,509
 

51
00:01:19,270 --> 00:01:28,030
 well is oh my gosh that's an entire year

52
00:01:22,499 --> 00:01:28,030
 

53
00:01:22,509 --> 00:01:31,450
 before Taylor Swift right so what was

54
00:01:28,020 --> 00:01:31,450
 

55
00:01:28,030 --> 00:01:33,670
 going on in 1988 number one song was

56
00:01:31,440 --> 00:01:33,670
 

57
00:01:31,450 --> 00:01:36,880
 faith by George Michael number one movie

58
00:01:33,660 --> 00:01:36,880
 

59
00:01:33,670 --> 00:01:39,460
 was Rain Man the winter games were being

60
00:01:36,870 --> 00:01:39,460
 

61
00:01:36,880 --> 00:01:45,040
 held in Calgary so yeah Kate's going

62
00:01:39,450 --> 00:01:45,040
 

63
00:01:39,460 --> 00:01:46,990
 yeah Calgary US Senate ratified the INF

64
00:01:45,030 --> 00:01:46,990
 

65
00:01:45,040 --> 00:01:49,030
 treaty between the US and Soviet Union's

66
00:01:46,980 --> 00:01:49,030
 

67
00:01:46,990 --> 00:01:50,860
 Ronald Reagan for at least most of the

68
00:01:49,020 --> 00:01:50,860
 

69
00:01:49,030 --> 00:01:54,759
 year was still president along with

70
00:01:50,850 --> 00:01:54,759
 

71
00:01:50,860 --> 00:01:59,409
 Mikhail Gorbachev George HW Bush won the

72
00:01:54,749 --> 00:01:59,409
 

73
00:01:54,759 --> 00:02:01,360
 US presidency at this this same time I

74
00:01:59,399 --> 00:02:01,360
 

75
00:01:59,409 --> 00:02:05,020
 was working as a system software

76
00:02:01,350 --> 00:02:05,020
 

77
00:02:01,360 --> 00:02:07,750
 engineer at Apple computers so I always

78
00:02:05,010 --> 00:02:07,750
 

79
00:02:05,020 --> 00:02:10,540
 say I worked at Apple between jobs which

80
00:02:07,740 --> 00:02:10,540
 

81
00:02:07,750 --> 00:02:12,250
 means I joined Apple you know you guys

82
00:02:10,530 --> 00:02:12,250
 

83
00:02:10,540 --> 00:02:13,870
 get the joke I joined Apple right after

84
00:02:12,240 --> 00:02:13,870
 

85
00:02:12,250 --> 00:02:16,150
 Steve Jobs has left and I left Apple

86
00:02:13,860 --> 00:02:16,150
 

87
00:02:13,870 --> 00:02:23,110
 just before Steve Jobs came back

88
00:02:16,140 --> 00:02:23,110
 

89
00:02:16,150 --> 00:02:25,659
 so I worked at Apple between jobs and

90
00:02:23,100 --> 00:02:25,659
 

91
00:02:23,110 --> 00:02:28,450
 this paper was published generic

92
00:02:25,649 --> 00:02:28,450
 

93
00:02:25,659 --> 00:02:31,269
 programming so to be fair the term

94
00:02:28,440 --> 00:02:31,269
 

95
00:02:28,450 --> 00:02:33,579
 generic programming had appeared once

96
00:02:31,259 --> 00:02:33,579
 

97
00:02:31,269 --> 00:02:36,819
 before this paper the year before in

98
00:02:33,569 --> 00:02:36,819
 

99
00:02:33,579 --> 00:02:39,970
 1987 it appeared as a forward reference

100
00:02:36,809 --> 00:02:39,970
 

101
00:02:36,819 --> 00:02:41,980
 though to this paper so I'm counting

102
00:02:39,960 --> 00:02:41,980
 

103
00:02:39,970 --> 00:02:45,069
 this as the anniversary for generic

104
00:02:41,970 --> 00:02:45,069
 

105
00:02:41,980 --> 00:02:46,510
 programming so it alright Salik Stepanov

106
00:02:45,059 --> 00:02:46,510
 

107
00:02:45,069 --> 00:02:48,640
 should probably be the person giving

108
00:02:46,500 --> 00:02:48,640
 

109
00:02:46,510 --> 00:02:51,040
 this talk but alex is retired now I

110
00:02:48,630 --> 00:02:51,040
 

111
00:02:48,640 --> 00:02:53,319
 never cared for public speaking before

112
00:02:51,030 --> 00:02:53,319
 

113
00:02:51,040 --> 00:02:55,690
 he retired so even though he gives

114
00:02:53,309 --> 00:02:55,690
 

115
00:02:53,319 --> 00:02:59,160
 wonderful talks he's not going to give

116
00:02:55,680 --> 00:02:59,160
 

117
00:02:55,690 --> 00:03:01,870
 this talk so I'm gonna give this talk

118
00:02:59,150 --> 00:03:01,870
 

119
00:02:59,160 --> 00:03:04,390
 Alex wrote this paper you see he's not

120
00:03:01,860 --> 00:03:04,390
 

121
00:03:01,870 --> 00:03:07,209
 even listed first in and the credits

122
00:03:04,380 --> 00:03:07,209
 

123
00:03:04,390 --> 00:03:10,569
 here this is is Dave Masur he's a

124
00:03:07,199 --> 00:03:10,569
 

125
00:03:07,209 --> 00:03:13,989
 professor RPI and he wrote this paper

126
00:03:10,559 --> 00:03:13,989
 

127
00:03:10,569 --> 00:03:16,599
 with Alex and there's a picture of Alex

128
00:03:13,979 --> 00:03:16,599
 

129
00:03:13,989 --> 00:03:22,470
 that's Alex when he worked at Adobe with

130
00:03:16,589 --> 00:03:22,470
 

131
00:03:16,599 --> 00:03:22,470
 me and papers behind are a printout of

132
00:03:24,949 --> 00:03:24,949
 

133
00:03:24,959 --> 00:03:33,700
 Euclid's elements and so alex is a big

134
00:03:30,809 --> 00:03:33,700
 

135
00:03:30,819 --> 00:03:36,250
 history buff and a big fan of Euclid and

136
00:03:33,690 --> 00:03:36,250
 

137
00:03:33,700 --> 00:03:37,750
 so if you ever wonder where the title of

138
00:03:36,240 --> 00:03:37,750
 

139
00:03:36,250 --> 00:03:43,959
 the book elements of programming came

140
00:03:37,740 --> 00:03:43,959
 

141
00:03:37,750 --> 00:03:46,690
 from it's from Euclid's elements so this

142
00:03:43,949 --> 00:03:46,690
 

143
00:03:43,959 --> 00:03:48,129
 is a quote from the paper and I think

144
00:03:46,680 --> 00:03:48,129
 

145
00:03:46,690 --> 00:03:50,819
 that's pretty much nails generic

146
00:03:48,119 --> 00:03:50,819
 

147
00:03:48,129 --> 00:03:54,579
 programming right by generic programming

148
00:03:50,809 --> 00:03:54,579
 

149
00:03:50,819 --> 00:03:57,669
 we mean the definition of algorithms and

150
00:03:54,569 --> 00:03:57,669
 

151
00:03:54,579 --> 00:04:00,790
 data structures at an abstract generic

152
00:03:57,659 --> 00:04:00,790
 

153
00:03:57,669 --> 00:04:04,720
 level thereby accomplishing many related

154
00:04:00,780 --> 00:04:04,720
 

155
00:04:00,790 --> 00:04:06,639
 programming tasks simultaneously the

156
00:04:04,710 --> 00:04:06,639
 

157
00:04:04,720 --> 00:04:10,299
 central notion is that of generic

158
00:04:06,629 --> 00:04:10,299
 

159
00:04:06,639 --> 00:04:13,989
 algorithms which are parameterised

160
00:04:10,289 --> 00:04:13,989
 

161
00:04:10,299 --> 00:04:15,940
 procedural schemata that are a

162
00:04:13,979 --> 00:04:15,940
 

163
00:04:13,989 --> 00:04:19,419
 completely independent of the underlined

164
00:04:15,930 --> 00:04:19,419
 

165
00:04:15,940 --> 00:04:22,900
 data representation and derive from

166
00:04:19,409 --> 00:04:22,900
 

167
00:04:19,419 --> 00:04:24,700
 concrete efficient algorithms so that's

168
00:04:22,890 --> 00:04:24,700
 

169
00:04:22,900 --> 00:04:27,530
 the definition of generic programming

170
00:04:24,690 --> 00:04:27,530
 

171
00:04:24,700 --> 00:04:30,480
 that holds today

172
00:04:27,520 --> 00:04:30,480
 

173
00:04:27,530 --> 00:04:34,340
 okay but it didn't start with this paper

174
00:04:30,470 --> 00:04:34,340
 

175
00:04:30,480 --> 00:04:39,720
 right what led up to this paper so from

176
00:04:34,330 --> 00:04:39,720
 

177
00:04:34,340 --> 00:04:44,120
 1976 to 1987 Alex had been working on

178
00:04:39,710 --> 00:04:44,120
 

179
00:04:39,720 --> 00:04:49,110
 this idea this is Alex a little before

180
00:04:44,110 --> 00:04:49,110
 

181
00:04:44,120 --> 00:04:56,150
 1976 born and raised in Moscow so this

182
00:04:49,100 --> 00:04:56,150
 

183
00:04:49,110 --> 00:05:03,260
 picture was taken in Russia so in 1976

184
00:04:56,140 --> 00:05:03,260
 

185
00:04:56,150 --> 00:05:07,020
 Alex had a job interview to work on a

186
00:05:03,250 --> 00:05:07,020
 

187
00:05:03,260 --> 00:05:08,790
 parallel system and he was nervous he

188
00:05:07,010 --> 00:05:08,790
 

189
00:05:07,020 --> 00:05:10,560
 actually knew nothing about parallel

190
00:05:08,780 --> 00:05:10,560
 

191
00:05:08,790 --> 00:05:13,770
 programming had never done any threated

192
00:05:10,550 --> 00:05:13,770
 

193
00:05:10,560 --> 00:05:15,840
 work up to this point and he got sick

194
00:05:13,760 --> 00:05:15,840
 

195
00:05:13,770 --> 00:05:20,460
 food poisoning the night before and was

196
00:05:15,830 --> 00:05:20,460
 

197
00:05:15,840 --> 00:05:24,000
 running a fever and he claims well he

198
00:05:20,450 --> 00:05:24,000
 

199
00:05:20,460 --> 00:05:28,020
 had this fever he realized this now this

200
00:05:23,990 --> 00:05:28,020
 

201
00:05:24,000 --> 00:05:33,020
 wasn't something unique to to him

202
00:05:28,010 --> 00:05:33,020
 

203
00:05:28,020 --> 00:05:35,310
 something that was known but he realized

204
00:05:33,010 --> 00:05:35,310
 

205
00:05:33,020 --> 00:05:37,560
 that there was a relationship between

206
00:05:35,300 --> 00:05:37,560
 

207
00:05:35,310 --> 00:05:41,280
 parallel computation and the associative

208
00:05:37,550 --> 00:05:41,280
 

209
00:05:37,560 --> 00:05:43,169
 property right so play associativity we

210
00:05:41,270 --> 00:05:43,169
 

211
00:05:41,280 --> 00:05:47,360
 mean a binary operation on his head s

212
00:05:43,159 --> 00:05:47,360
 

213
00:05:43,169 --> 00:05:50,010
 it's called associative if it satisfies

214
00:05:47,350 --> 00:05:50,010
 

215
00:05:47,360 --> 00:05:55,169
 this requirement basically that you can

216
00:05:50,000 --> 00:05:55,169
 

217
00:05:50,010 --> 00:05:57,510
 reorder things for calculation right so

218
00:05:55,159 --> 00:05:57,510
 

219
00:05:55,169 --> 00:05:59,640
 basically what his dream was informing

220
00:05:57,500 --> 00:05:59,640
 

221
00:05:57,510 --> 00:06:02,070
 him was that parallel reduction is

222
00:05:59,630 --> 00:06:02,070
 

223
00:05:59,640 --> 00:06:05,340
 associated with a mathematical concept

224
00:06:02,060 --> 00:06:05,340
 

225
00:06:02,070 --> 00:06:08,100
 known as mono eats right a mono

226
00:06:05,330 --> 00:06:08,100
 

227
00:06:05,340 --> 00:06:13,950
 is a data set that has an operation is

228
00:06:08,090 --> 00:06:13,950
 

229
00:06:08,100 --> 00:06:16,470
 associative on it but alex generalized

230
00:06:13,940 --> 00:06:16,470
 

231
00:06:13,950 --> 00:06:18,210
 this and he thought ah there's something

232
00:06:16,460 --> 00:06:18,210
 

233
00:06:16,470 --> 00:06:19,770
 fundamental here it's not just about

234
00:06:18,200 --> 00:06:19,770
 

235
00:06:18,210 --> 00:06:21,870
 parallel computation but it's about

236
00:06:19,760 --> 00:06:21,870
 

237
00:06:19,770 --> 00:06:23,550
 software in general the software is

238
00:06:21,860 --> 00:06:23,550
 

239
00:06:21,870 --> 00:06:28,590
 somehow associated with algebraic

240
00:06:23,540 --> 00:06:28,590
 

241
00:06:23,550 --> 00:06:33,540
 structures and that kind of sent him

242
00:06:28,580 --> 00:06:33,540
 

243
00:06:28,590 --> 00:06:35,280
 down this path at first he thought the

244
00:06:33,530 --> 00:06:35,280
 

245
00:06:33,540 --> 00:06:37,200
 right way to do that is to come up with

246
00:06:35,270 --> 00:06:37,200
 

247
00:06:35,280 --> 00:06:39,390
 a new programming language where we can

248
00:06:37,190 --> 00:06:39,390
 

249
00:06:37,200 --> 00:06:41,580
 talk and reason about software in term

250
00:06:39,380 --> 00:06:41,580
 

251
00:06:39,390 --> 00:06:45,450
 of algebraic structures so he worked

252
00:06:41,570 --> 00:06:45,450
 

253
00:06:41,580 --> 00:06:48,150
 with Dave on a programming language this

254
00:06:45,440 --> 00:06:48,150
 

255
00:06:45,450 --> 00:06:50,070
 paper was published in 1981 a language

256
00:06:48,140 --> 00:06:50,070
 

257
00:06:48,150 --> 00:06:52,620
 for manipulating generic objects called

258
00:06:50,060 --> 00:06:52,620
 

259
00:06:50,070 --> 00:06:55,860
 Tecton tech tongs is still kind of

260
00:06:52,610 --> 00:06:55,860
 

261
00:06:52,620 --> 00:07:00,090
 kicking around Dave master continued the

262
00:06:55,850 --> 00:07:00,090
 

263
00:06:55,860 --> 00:07:02,970
 work on this for years it's a language

264
00:07:00,080 --> 00:07:02,970
 

265
00:07:00,090 --> 00:07:09,750
 around formal methods and proving

266
00:07:02,960 --> 00:07:09,750
 

267
00:07:02,970 --> 00:07:14,700
 systems okay so the third author listed

268
00:07:09,740 --> 00:07:14,700
 

269
00:07:09,750 --> 00:07:20,550
 here is Deepak Kapoor so that's a

270
00:07:14,690 --> 00:07:20,550
 

271
00:07:14,700 --> 00:07:22,830
 picture of Deepak and then Alex moved on

272
00:07:20,540 --> 00:07:22,830
 

273
00:07:20,550 --> 00:07:25,920
 to apply some of those so he wrote a

274
00:07:22,820 --> 00:07:25,920
 

275
00:07:22,830 --> 00:07:27,990
 couple papers here one called higher

276
00:07:25,910 --> 00:07:27,990
 

277
00:07:25,920 --> 00:07:31,080
 order programming so you start to see a

278
00:07:27,980 --> 00:07:31,080
 

279
00:07:27,990 --> 00:07:35,670
 little bit of a theme going on here and

280
00:07:31,070 --> 00:07:35,670
 

281
00:07:31,080 --> 00:07:40,370
 another using term entries to sort both

282
00:07:35,660 --> 00:07:40,370
 

283
00:07:35,670 --> 00:07:43,590
 of these were with Aaron Kirschenbaum

284
00:07:40,360 --> 00:07:43,590
 

285
00:07:40,370 --> 00:07:46,920
 Aaron is a graph theory expert okay and

286
00:07:43,580 --> 00:07:46,920
 

287
00:07:43,590 --> 00:07:50,520
 the language in the papers was scheme

288
00:07:46,910 --> 00:07:50,520
 

289
00:07:46,920 --> 00:07:53,520
 but Alex credits working with Aaron for

290
00:07:50,510 --> 00:07:53,520
 

291
00:07:50,520 --> 00:07:55,770
 his realization that arrays were

292
00:07:53,510 --> 00:07:55,770
 

293
00:07:53,520 --> 00:07:57,540
 important and you know scheme as a

294
00:07:55,760 --> 00:07:57,540
 

295
00:07:55,770 --> 00:07:58,530
 functional programming language you

296
00:07:57,530 --> 00:07:58,530
 

297
00:07:57,540 --> 00:08:01,710
 would typically define things

298
00:07:58,520 --> 00:08:01,710
 

299
00:07:58,530 --> 00:08:03,420
 recursively and it was Aaron that said

300
00:08:01,700 --> 00:08:03,420
 

301
00:08:01,710 --> 00:08:06,090
 no no you know that's nice for scheme

302
00:08:03,410 --> 00:08:06,090
 

303
00:08:03,420 --> 00:08:08,300
 but actually having random access into

304
00:08:06,080 --> 00:08:08,300
 

305
00:08:06,090 --> 00:08:12,710
 an array is important

306
00:08:08,290 --> 00:08:12,710
 

307
00:08:08,300 --> 00:08:16,680
 Alex credits Aaron for that realization

308
00:08:12,700 --> 00:08:16,680
 

309
00:08:12,710 --> 00:08:21,390
 and that brought us up to 1987 an errand

310
00:08:16,670 --> 00:08:21,390
 

311
00:08:16,680 --> 00:08:23,640
 or Alex worked briefly at Bell Labs and

312
00:08:21,380 --> 00:08:23,640
 

313
00:08:21,390 --> 00:08:26,190
 this was a bit of a game changer so

314
00:08:23,630 --> 00:08:26,190
 

315
00:08:23,640 --> 00:08:30,660
 first he started a friendship which has

316
00:08:26,180 --> 00:08:30,660
 

317
00:08:26,190 --> 00:08:33,660
 become a 30-plus year friendship with

318
00:08:30,650 --> 00:08:33,660
 

319
00:08:30,660 --> 00:08:36,750
 Baroness Tristram they're still very

320
00:08:33,650 --> 00:08:36,750
 

321
00:08:33,660 --> 00:08:39,000
 good friends he also met Andrew Koenig

322
00:08:36,740 --> 00:08:39,000
 

323
00:08:36,750 --> 00:08:40,950
 and Andrew explained to Alex the beauty

324
00:08:38,990 --> 00:08:40,950
 

325
00:08:39,000 --> 00:08:45,720
 of the C machine right that the C

326
00:08:40,940 --> 00:08:45,720
 

327
00:08:40,950 --> 00:08:47,370
 machine was not a hack that it was was a

328
00:08:45,710 --> 00:08:47,370
 

329
00:08:45,720 --> 00:08:53,070
 beautiful construct and it

330
00:08:47,360 --> 00:08:53,070
 

331
00:08:47,370 --> 00:08:55,800
 right and Alex read a lot of code by

332
00:08:53,060 --> 00:08:55,800
 

333
00:08:53,070 --> 00:08:58,950
 these guys ken Thompson and Rob Pike

334
00:08:55,790 --> 00:08:58,950
 

335
00:08:55,800 --> 00:09:06,390
 everybody knows who these folks are

336
00:08:58,940 --> 00:09:06,390
 

337
00:08:58,950 --> 00:09:08,610
 so creators of UNIX ken Thompson I think

338
00:09:06,380 --> 00:09:08,610
 

339
00:09:06,390 --> 00:09:10,770
 is one of the most brilliant software

340
00:09:08,600 --> 00:09:10,770
 

341
00:09:08,610 --> 00:09:13,590
 engineers of all time he ranks in like

342
00:09:10,760 --> 00:09:13,590
 

343
00:09:10,770 --> 00:09:15,020
 my top two computer scientists of all

344
00:09:13,580 --> 00:09:15,020
 

345
00:09:13,590 --> 00:09:17,280
 time

346
00:09:15,010 --> 00:09:17,280
 

347
00:09:15,020 --> 00:09:22,290
 he's also the person responsible for

348
00:09:17,270 --> 00:09:22,290
 

349
00:09:17,280 --> 00:09:26,370
 utf-8 encoding for years he he held the

350
00:09:22,280 --> 00:09:26,370
 

351
00:09:22,290 --> 00:09:28,020
 title of the creator of a chess program

352
00:09:26,360 --> 00:09:28,020
 

353
00:09:26,370 --> 00:09:30,090
 that was the best chess program on the

354
00:09:28,010 --> 00:09:30,090
 

355
00:09:28,020 --> 00:09:32,610
 planet and he kind of came out of

356
00:09:30,080 --> 00:09:32,610
 

357
00:09:30,090 --> 00:09:33,750
 nowhere in that where he saw a computer

358
00:09:32,600 --> 00:09:33,750
 

359
00:09:32,610 --> 00:09:36,390
 chess tournament it was like you guys

360
00:09:33,740 --> 00:09:36,390
 

361
00:09:33,750 --> 00:09:40,920
 are doing it all wrong and sat down and

362
00:09:36,380 --> 00:09:40,920
 

363
00:09:36,390 --> 00:09:42,780
 and won and he is very much the father

364
00:09:40,910 --> 00:09:42,780
 

365
00:09:40,920 --> 00:09:44,010
 of the UNIX system and was working at

366
00:09:42,770 --> 00:09:44,010
 

367
00:09:42,780 --> 00:09:46,140
 Bell Labs when they were working on

368
00:09:44,000 --> 00:09:46,140
 

369
00:09:44,010 --> 00:09:47,940
 multics and again he had this

370
00:09:46,130 --> 00:09:47,940
 

371
00:09:46,140 --> 00:09:49,470
 realization that like you know multics

372
00:09:47,930 --> 00:09:49,470
 

373
00:09:47,940 --> 00:09:55,080
 was too complicated and going the wrong

374
00:09:49,460 --> 00:09:55,080
 

375
00:09:49,470 --> 00:09:58,140
 direction and created UNIX so that had a

376
00:09:55,070 --> 00:09:58,140
 

377
00:09:55,080 --> 00:10:01,500
 huge influence something else else

378
00:09:58,130 --> 00:10:01,500
 

379
00:09:58,140 --> 00:10:04,370
 happened so so alex is a trained

380
00:10:01,490 --> 00:10:04,370
 

381
00:10:01,500 --> 00:10:08,040
 mathematician he was a professor briefly

382
00:10:04,360 --> 00:10:08,040
 

383
00:10:04,370 --> 00:10:11,700
 before he left the Soviet Union and Alex

384
00:10:08,030 --> 00:10:11,700
 

385
00:10:08,040 --> 00:10:15,180
 discovered the works of Euler do people

386
00:10:11,690 --> 00:10:15,180
 

387
00:10:11,700 --> 00:10:17,220
 know who or is right so Euler this is a

388
00:10:15,170 --> 00:10:17,220
 

389
00:10:15,180 --> 00:10:21,050
 picture of Euler 18th century

390
00:10:17,210 --> 00:10:21,050
 

391
00:10:17,220 --> 00:10:23,670
 mathematician physicist engineer

392
00:10:21,040 --> 00:10:23,670
 

393
00:10:21,050 --> 00:10:25,560
 astronomer kind of your all-around

394
00:10:23,660 --> 00:10:25,560
 

395
00:10:23,670 --> 00:10:30,420
 Renaissance man even though a little

396
00:10:25,550 --> 00:10:30,420
 

397
00:10:25,560 --> 00:10:32,340
 later than the Renaissance here and Alex

398
00:10:30,410 --> 00:10:32,340
 

399
00:10:30,420 --> 00:10:34,890
 credits his his reading of Euler with

400
00:10:32,330 --> 00:10:34,890
 

401
00:10:32,340 --> 00:10:37,350
 what he calls de boracay seen him he was

402
00:10:34,880 --> 00:10:37,350
 

403
00:10:34,890 --> 00:10:40,230
 de Bourgh becaused does anybody know the

404
00:10:37,340 --> 00:10:40,230
 

405
00:10:37,350 --> 00:10:41,640
 reference for barbecue right Alex will

406
00:10:40,220 --> 00:10:41,640
 

407
00:10:40,230 --> 00:10:44,040
 say this frequently and he kind of

408
00:10:41,630 --> 00:10:44,040
 

409
00:10:41,640 --> 00:10:45,540
 expects that a roomful of people would

410
00:10:44,030 --> 00:10:45,540
 

411
00:10:44,040 --> 00:10:49,290
 understand what he means by it and

412
00:10:45,530 --> 00:10:49,290
 

413
00:10:45,540 --> 00:10:51,750
 nobody gets it it's a reference to

414
00:10:49,280 --> 00:10:51,750
 

415
00:10:49,290 --> 00:10:55,380
 Nicolas Bourbaki who is not actually a

416
00:10:51,740 --> 00:10:55,380
 

417
00:10:51,750 --> 00:10:57,420
 person Nicolas Bourbaki is a pseudonym

418
00:10:55,370 --> 00:10:57,420
 

419
00:10:55,380 --> 00:10:59,410
 for a group of French mathematicians

420
00:10:57,410 --> 00:10:59,410
 

421
00:10:57,420 --> 00:11:03,910
 from the 1950s

422
00:10:59,400 --> 00:11:03,910
 

423
00:10:59,410 --> 00:11:05,979
 who set out to to rewrite all of the

424
00:11:03,900 --> 00:11:05,979
 

425
00:11:03,910 --> 00:11:08,109
 foundations of mathematics in a very

426
00:11:05,969 --> 00:11:08,109
 

427
00:11:05,979 --> 00:11:11,199
 abstract terms and this is where set

428
00:11:08,099 --> 00:11:11,199
 

429
00:11:08,109 --> 00:11:14,589
 theory comes from is from from Bourbaki

430
00:11:11,189 --> 00:11:14,589
 

431
00:11:11,199 --> 00:11:17,229
 and so if you've ever heard the term new

432
00:11:14,579 --> 00:11:17,229
 

433
00:11:14,589 --> 00:11:19,720
 math right if your parents complained

434
00:11:17,219 --> 00:11:19,720
 

435
00:11:17,229 --> 00:11:21,129
 because you were learning new math and

436
00:11:19,710 --> 00:11:21,129
 

437
00:11:19,720 --> 00:11:24,220
 this was the mathematics that they

438
00:11:21,119 --> 00:11:24,220
 

439
00:11:21,129 --> 00:11:28,209
 didn't understand new math comes from

440
00:11:24,210 --> 00:11:28,209
 

441
00:11:24,220 --> 00:11:32,949
 barbecue right so what does it mean to

442
00:11:28,199 --> 00:11:32,949
 

443
00:11:28,209 --> 00:11:34,720
 be de Bourgh becaused so one of oil ER

444
00:11:32,939 --> 00:11:34,720
 

445
00:11:32,949 --> 00:11:36,689
 central tenets was that knowledge is

446
00:11:34,710 --> 00:11:36,689
 

447
00:11:34,720 --> 00:11:41,429
 founded on the basis of precise

448
00:11:36,679 --> 00:11:41,429
 

449
00:11:36,689 --> 00:11:44,379
 quantitative laws okay that is to say

450
00:11:41,419 --> 00:11:44,379
 

451
00:11:41,429 --> 00:11:47,979
 that mathematics is about discovery

452
00:11:44,369 --> 00:11:47,979
 

453
00:11:44,379 --> 00:11:50,739
 about what is not about invention about

454
00:11:47,969 --> 00:11:50,739
 

455
00:11:47,979 --> 00:11:53,319
 what you wish did were right so this is

456
00:11:50,729 --> 00:11:53,319
 

457
00:11:50,739 --> 00:12:00,159
 a philosophical shift in Alex's thinking

458
00:11:53,309 --> 00:12:00,159
 

459
00:11:53,319 --> 00:12:02,529
 about mathematics and this changed his

460
00:12:00,149 --> 00:12:02,529
 

461
00:12:00,159 --> 00:12:04,569
 understanding of software to say that

462
00:12:02,519 --> 00:12:04,569
 

463
00:12:02,529 --> 00:12:07,059
 software is not somehow related to

464
00:12:04,559 --> 00:12:07,059
 

465
00:12:04,569 --> 00:12:09,369
 abstract mathematical structures but

466
00:12:07,049 --> 00:12:09,369
 

467
00:12:07,059 --> 00:12:12,159
 rather that software is defined on

468
00:12:09,359 --> 00:12:12,159
 

469
00:12:09,369 --> 00:12:15,939
 algebraic structures all software is

470
00:12:12,149 --> 00:12:15,939
 

471
00:12:12,159 --> 00:12:19,439
 good software is bad software is right

472
00:12:15,929 --> 00:12:19,439
 

473
00:12:15,939 --> 00:12:22,209
 right and the idea of understanding

474
00:12:19,429 --> 00:12:22,209
 

475
00:12:19,439 --> 00:12:25,659
 software is understanding of what the

476
00:12:22,199 --> 00:12:25,659
 

477
00:12:22,209 --> 00:12:28,659
 algebraic structures are what they are

478
00:12:25,649 --> 00:12:28,659
 

479
00:12:25,659 --> 00:12:30,129
 you know concretely that these are the

480
00:12:28,649 --> 00:12:30,129
 

481
00:12:28,659 --> 00:12:32,859
 things that govern the way the machine

482
00:12:30,119 --> 00:12:32,859
 

483
00:12:30,129 --> 00:12:35,679
 works and so learning to write software

484
00:12:32,849 --> 00:12:35,679
 

485
00:12:32,859 --> 00:12:41,289
 is a process of discovery not a process

486
00:12:35,669 --> 00:12:41,289
 

487
00:12:35,679 --> 00:12:47,129
 of invention right and that brought us

488
00:12:41,279 --> 00:12:47,129
 

489
00:12:41,289 --> 00:12:49,749
 back to 1988 and he wrote this paper now

490
00:12:47,119 --> 00:12:49,749
 

491
00:12:47,129 --> 00:12:50,709
 honestly I did not read this paper in

492
00:12:49,739 --> 00:12:50,709
 

493
00:12:49,749 --> 00:12:53,919
 1988

494
00:12:50,699 --> 00:12:53,919
 

495
00:12:50,709 --> 00:12:55,989
 had I read this paper I don't think I

496
00:12:53,909 --> 00:12:55,989
 

497
00:12:53,919 --> 00:12:58,389
 would have been that impressed okay

498
00:12:55,979 --> 00:12:58,389
 

499
00:12:55,989 --> 00:13:02,559
 in retrospect now I'm very impressed

500
00:12:58,379 --> 00:13:02,559
 

501
00:12:58,389 --> 00:13:05,109
 it's it is a brilliant paper but this is

502
00:13:02,549 --> 00:13:05,109
 

503
00:13:02,559 --> 00:13:06,909
 the main coding example in the paper you

504
00:13:05,099 --> 00:13:06,909
 

505
00:13:05,109 --> 00:13:10,239
 can't quite see it but this is an

506
00:13:06,899 --> 00:13:10,239
 

507
00:13:06,909 --> 00:13:12,210
 implementation of partition you see if I

508
00:13:10,229 --> 00:13:12,210
 

509
00:13:10,239 --> 00:13:15,810
 can blow up some pieces here

510
00:13:12,200 --> 00:13:15,810
 

511
00:13:12,210 --> 00:13:18,280
 okay so it's an implementation of

512
00:13:15,800 --> 00:13:18,280
 

513
00:13:15,810 --> 00:13:21,370
 partition which you might recognize from

514
00:13:18,270 --> 00:13:21,370
 

515
00:13:18,280 --> 00:13:23,220
 the STL the language here if you don't

516
00:13:21,360 --> 00:13:23,220
 

517
00:13:21,370 --> 00:13:25,960
 recognize it is ADA

518
00:13:23,210 --> 00:13:25,960
 

519
00:13:23,220 --> 00:13:28,270
 okay so Alex was working in ADA at the

520
00:13:25,950 --> 00:13:28,270
 

521
00:13:25,960 --> 00:13:30,550
 time you see some things that look

522
00:13:28,260 --> 00:13:30,550
 

523
00:13:28,270 --> 00:13:33,940
 familiar we have coordinates instead of

524
00:13:30,540 --> 00:13:33,940
 

525
00:13:30,550 --> 00:13:36,250
 iterators s is a sequence this is kind

526
00:13:33,930 --> 00:13:36,250
 

527
00:13:33,940 --> 00:13:38,230
 of a generalized sequence we've got a

528
00:13:36,240 --> 00:13:38,230
 

529
00:13:36,250 --> 00:13:39,730
 middle which is an out coordinate so

530
00:13:38,220 --> 00:13:39,730
 

531
00:13:38,230 --> 00:13:42,100
 this is going to partition and return

532
00:13:39,720 --> 00:13:42,100
 

533
00:13:39,730 --> 00:13:44,320
 the out coordinate but we have this

534
00:13:42,090 --> 00:13:44,320
 

535
00:13:42,100 --> 00:13:46,570
 middle okay out parameter which is a

536
00:13:44,310 --> 00:13:46,570
 

537
00:13:44,320 --> 00:13:50,950
 boolean anybody want to guess what

538
00:13:46,560 --> 00:13:50,950
 

539
00:13:46,570 --> 00:13:53,440
 middle okay is about now so the

540
00:13:50,940 --> 00:13:53,440
 

541
00:13:50,950 --> 00:13:56,920
 challenge here is an ADA typically you

542
00:13:53,430 --> 00:13:56,920
 

543
00:13:53,440 --> 00:13:59,530
 would describe a range as a closed range

544
00:13:56,910 --> 00:13:59,530
 

545
00:13:56,920 --> 00:14:04,000
 as opposed to a half open range like we

546
00:13:59,520 --> 00:14:04,000
 

547
00:13:59,530 --> 00:14:07,180
 do in STL right so so the FL here is

548
00:14:03,990 --> 00:14:07,180
 

549
00:14:04,000 --> 00:14:09,820
 specifying a closed range and so we're

550
00:14:07,170 --> 00:14:09,820
 

551
00:14:07,180 --> 00:14:11,620
 finding the partition point but that

552
00:14:09,810 --> 00:14:11,620
 

553
00:14:09,820 --> 00:14:15,130
 means our partition point we need to

554
00:14:11,610 --> 00:14:15,130
 

555
00:14:11,620 --> 00:14:18,310
 know whether or not it's it's on which

556
00:14:15,120 --> 00:14:18,310
 

557
00:14:15,130 --> 00:14:23,320
 side of the partition okay so the

558
00:14:18,300 --> 00:14:23,320
 

559
00:14:18,310 --> 00:14:28,090
 boolean there says whether or not our

560
00:14:23,310 --> 00:14:28,090
 

561
00:14:23,320 --> 00:14:30,490
 midpoint is is is true with the

562
00:14:28,080 --> 00:14:30,490
 

563
00:14:28,090 --> 00:14:35,320
 predicate okay for our partition or

564
00:14:30,480 --> 00:14:35,320
 

565
00:14:30,490 --> 00:14:37,180
 false right right and you have to have

566
00:14:35,310 --> 00:14:37,180
 

567
00:14:35,320 --> 00:14:41,650
 that because you have the boundary cases

568
00:14:37,170 --> 00:14:41,650
 

569
00:14:37,180 --> 00:14:44,470
 at the end so the code here is actually

570
00:14:41,640 --> 00:14:44,470
 

571
00:14:41,650 --> 00:14:50,140
 you know relatively complex for what it

572
00:14:44,460 --> 00:14:50,140
 

573
00:14:44,470 --> 00:14:52,000
 is my pointer give the right pointer

574
00:14:50,130 --> 00:14:52,000
 

575
00:14:50,140 --> 00:14:55,240
 here so the code is relatively complex

576
00:14:51,990 --> 00:14:55,240
 

577
00:14:52,000 --> 00:14:57,730
 and and it's a little gross here you see

578
00:14:55,230 --> 00:14:57,730
 

579
00:14:55,240 --> 00:14:59,740
 this function called test that's not an

580
00:14:57,720 --> 00:14:59,740
 

581
00:14:57,730 --> 00:15:01,720
 argument coming in it just assumes that

582
00:14:59,730 --> 00:15:01,720
 

583
00:14:59,740 --> 00:15:04,090
 there's some global test function

584
00:15:01,710 --> 00:15:04,090
 

585
00:15:01,720 --> 00:15:06,790
 hanging out there to determine whether

586
00:15:04,080 --> 00:15:06,790
 

587
00:15:04,090 --> 00:15:09,550
 or not you know that's your predicate

588
00:15:06,780 --> 00:15:09,550
 

589
00:15:06,790 --> 00:15:12,370
 for for your partition it's not passed

590
00:15:09,540 --> 00:15:12,370
 

591
00:15:09,550 --> 00:15:16,000
 in it's just some global function

592
00:15:12,360 --> 00:15:16,000
 

593
00:15:12,370 --> 00:15:20,410
 hanging out there right so it's not

594
00:15:15,990 --> 00:15:20,410
 

595
00:15:16,000 --> 00:15:23,279
 quite what we would see in STL but

596
00:15:20,400 --> 00:15:23,279
 

597
00:15:20,410 --> 00:15:25,499
 nevertheless Alex and Dave row

598
00:15:23,269 --> 00:15:25,499
 

599
00:15:23,279 --> 00:15:27,029
 an entire book on algorithms and if you

600
00:15:25,489 --> 00:15:27,029
 

601
00:15:25,499 --> 00:15:28,529
 looked at this book you would find many

602
00:15:27,019 --> 00:15:28,529
 

603
00:15:27,029 --> 00:15:31,499
 of the same algorithms that you would

604
00:15:28,519 --> 00:15:31,499
 

605
00:15:28,529 --> 00:15:35,749
 find in STL but this is for the ADA

606
00:15:31,489 --> 00:15:35,749
 

607
00:15:31,499 --> 00:15:35,749
 generic library so this was a precursor

608
00:15:36,639 --> 00:15:36,639
 

609
00:15:36,649 --> 00:15:42,990
 now here's why I wouldn't have been very

610
00:15:39,350 --> 00:15:42,990
 

611
00:15:39,360 --> 00:15:45,899
 impressed so in the same timeframe like

612
00:15:42,980 --> 00:15:45,899
 

613
00:15:42,990 --> 00:15:48,240
 I mentioned I was working at Apple I was

614
00:15:45,889 --> 00:15:48,240
 

615
00:15:45,899 --> 00:15:51,689
 not doing C++ work at the time but I was

616
00:15:48,230 --> 00:15:51,689
 

617
00:15:48,240 --> 00:15:56,689
 aware of C++ this is a copy of my actual

618
00:15:51,679 --> 00:15:56,689
 

619
00:15:51,689 --> 00:16:02,009
 book that I picked up probably in 1987

620
00:15:56,679 --> 00:16:02,009
 

621
00:15:56,689 --> 00:16:05,639
 so probably a year before this and at

622
00:16:01,999 --> 00:16:05,639
 

623
00:16:02,009 --> 00:16:08,999
 that time I was working on a quick-draw

624
00:16:05,629 --> 00:16:08,999
 

625
00:16:05,639 --> 00:16:11,279
 system this is a copy of my original

626
00:16:08,989 --> 00:16:11,279
 

627
00:16:08,999 --> 00:16:13,589
 inside McIntosh this was the promotional

628
00:16:11,269 --> 00:16:13,589
 

629
00:16:11,279 --> 00:16:20,759
 Edition which predates a few years you

630
00:16:13,579 --> 00:16:20,759
 

631
00:16:13,589 --> 00:16:22,559
 can see I read it just a few times this

632
00:16:20,749 --> 00:16:22,559
 

633
00:16:20,759 --> 00:16:27,600
 is a description of the quick-draw

634
00:16:22,549 --> 00:16:27,600
 

635
00:16:22,559 --> 00:16:30,300
 coordinate system from inside Mac this

636
00:16:27,590 --> 00:16:30,300
 

637
00:16:27,600 --> 00:16:32,279
 was done by a guy named Bill åkesson a

638
00:16:30,290 --> 00:16:32,279
 

639
00:16:30,300 --> 00:16:33,569
 pretty famous guy how many people have

640
00:16:32,269 --> 00:16:33,569
 

641
00:16:32,279 --> 00:16:39,000
 heard of Bill Atkinson one of the

642
00:16:33,559 --> 00:16:39,000
 

643
00:16:33,569 --> 00:16:43,050
 original Macintosh guys so this is a

644
00:16:38,990 --> 00:16:43,050
 

645
00:16:39,000 --> 00:16:45,750
 quote from that book talking about the

646
00:16:43,040 --> 00:16:45,750
 

647
00:16:43,050 --> 00:16:48,269
 quick-draw coordinate system this is all

648
00:16:45,740 --> 00:16:48,269
 

649
00:16:45,750 --> 00:16:51,930
 grid coordinates are integers all grid

650
00:16:48,259 --> 00:16:51,930
 

651
00:16:48,269 --> 00:16:55,589
 lines are infinitely thin these concepts

652
00:16:51,920 --> 00:16:55,589
 

653
00:16:51,930 --> 00:16:57,329
 are important exclamation point they

654
00:16:55,579 --> 00:16:57,329
 

655
00:16:55,589 --> 00:16:58,889
 mean that all elements represented on

656
00:16:57,319 --> 00:16:58,889
 

657
00:16:57,329 --> 00:17:01,500
 the coordinate plane are mathematically

658
00:16:58,879 --> 00:17:01,500
 

659
00:16:58,889 --> 00:17:02,939
 pure mathematical calculations using

660
00:17:01,490 --> 00:17:02,939
 

661
00:17:01,500 --> 00:17:05,970
 integer arithmetic will produce

662
00:17:02,929 --> 00:17:05,970
 

663
00:17:02,939 --> 00:17:07,350
 intuitively correct results if you keep

664
00:17:05,960 --> 00:17:07,350
 

665
00:17:05,970 --> 00:17:08,730
 in mind that the grid lines are

666
00:17:07,340 --> 00:17:08,730
 

667
00:17:07,350 --> 00:17:11,760
 infinitely thin you'll never have

668
00:17:08,720 --> 00:17:11,760
 

669
00:17:08,730 --> 00:17:13,230
 endpoint paranoia right the confusion

670
00:17:11,750 --> 00:17:13,230
 

671
00:17:11,760 --> 00:17:16,069
 that results from not knowing whether

672
00:17:13,220 --> 00:17:16,069
 

673
00:17:13,230 --> 00:17:21,000
 the last dot is included in the line

674
00:17:16,059 --> 00:17:21,000
 

675
00:17:16,069 --> 00:17:23,970
 okay so one of the one of the things I

676
00:17:20,990 --> 00:17:23,970
 

677
00:17:21,000 --> 00:17:28,049
 did while I was at Apple was I rewrote a

678
00:17:23,960 --> 00:17:28,049
 

679
00:17:23,970 --> 00:17:33,150
 piece of bill's code for regions regions

680
00:17:28,039 --> 00:17:33,150
 

681
00:17:28,049 --> 00:17:36,280
 are a a two-dimensional interval set and

682
00:17:33,140 --> 00:17:36,280
 

683
00:17:33,150 --> 00:17:39,340
 so it's basically two-dimensional

684
00:17:36,270 --> 00:17:39,340
 

685
00:17:36,280 --> 00:17:42,940
 structure of half-open intervals okay

686
00:17:39,330 --> 00:17:42,940
 

687
00:17:39,340 --> 00:17:45,700
 and it's a compact form to represent an

688
00:17:42,930 --> 00:17:45,700
 

689
00:17:42,940 --> 00:17:47,380
 arbitrary shape right right and Apple

690
00:17:45,690 --> 00:17:47,380
 

691
00:17:45,700 --> 00:17:49,660
 had a patent on this and they considered

692
00:17:47,370 --> 00:17:49,660
 

693
00:17:47,380 --> 00:17:51,100
 it a trade secret at the time that I was

694
00:17:49,650 --> 00:17:51,100
 

695
00:17:49,660 --> 00:17:53,710
 working on it I couldn't tell anybody

696
00:17:51,090 --> 00:17:53,710
 

697
00:17:51,100 --> 00:17:55,240
 about how the code works now you can go

698
00:17:53,700 --> 00:17:55,240
 

699
00:17:53,710 --> 00:17:57,060
 to the Computer History Museum and

700
00:17:55,230 --> 00:17:57,060
 

701
00:17:55,240 --> 00:18:00,010
 download the code if you're interested

702
00:17:57,050 --> 00:18:00,010
 

703
00:17:57,060 --> 00:18:02,770
 the code was written in 68,000 assembly

704
00:18:00,000 --> 00:18:02,770
 

705
00:18:00,010 --> 00:18:05,440
 language so it wasn't even in you know

706
00:18:02,760 --> 00:18:05,440
 

707
00:18:02,770 --> 00:18:07,330
 see or object Pascal which was the two

708
00:18:05,430 --> 00:18:07,330
 

709
00:18:05,440 --> 00:18:11,200
 languages that I work mostly in at the

710
00:18:07,320 --> 00:18:11,200
 

711
00:18:07,330 --> 00:18:13,870
 time it was 68,000 assembly language but

712
00:18:11,190 --> 00:18:13,870
 

713
00:18:11,200 --> 00:18:16,240
 this was a beautiful piece of code right

714
00:18:13,860 --> 00:18:16,240
 

715
00:18:13,870 --> 00:18:19,030
 the reason why I was rewriting it was to

716
00:18:16,230 --> 00:18:19,030
 

717
00:18:16,240 --> 00:18:24,430
 remove some of the 16-bit limitations so

718
00:18:19,020 --> 00:18:24,430
 

719
00:18:19,030 --> 00:18:27,280
 that it could work better with larger

720
00:18:24,420 --> 00:18:27,280
 

721
00:18:24,430 --> 00:18:31,420
 data sets and so bumping things up to be

722
00:18:27,270 --> 00:18:31,420
 

723
00:18:27,280 --> 00:18:35,050
 to handle 32-bit sizes and it was really

724
00:18:31,410 --> 00:18:35,050
 

725
00:18:31,420 --> 00:18:36,850
 a well architected and a beautiful thing

726
00:18:35,040 --> 00:18:36,850
 

727
00:18:35,050 --> 00:18:40,600
 to go and look at and it was the first

728
00:18:36,840 --> 00:18:40,600
 

729
00:18:36,850 --> 00:18:42,010
 time where I read a piece of code and

730
00:18:40,590 --> 00:18:42,010
 

731
00:18:40,600 --> 00:18:44,290
 realized that there was kind of this

732
00:18:42,000 --> 00:18:44,290
 

733
00:18:42,010 --> 00:18:45,970
 underlying notion of truth and beauty

734
00:18:44,280 --> 00:18:45,970
 

735
00:18:44,290 --> 00:18:48,970
 that could exist in a piece of code

736
00:18:45,960 --> 00:18:48,970
 

737
00:18:45,970 --> 00:18:51,640
 right right and I kind of got what what

738
00:18:48,960 --> 00:18:51,640
 

739
00:18:48,970 --> 00:18:54,840
 he was talking about about it being

740
00:18:51,630 --> 00:18:54,840
 

741
00:18:51,640 --> 00:18:54,840
 mathematically pure

742
00:18:57,840 --> 00:18:57,840
 

743
00:18:57,850 --> 00:19:04,179
 these days I never get pushback on this

744
00:19:00,960 --> 00:19:04,179
 

745
00:19:00,970 --> 00:19:07,470
 concept this is a slide from from one of

746
00:19:04,169 --> 00:19:07,470
 

747
00:19:04,179 --> 00:19:11,200
 my other talks and algorithm I developed

748
00:19:07,460 --> 00:19:11,200
 

749
00:19:07,470 --> 00:19:14,830
 and this is I think this slide probably

750
00:19:11,190 --> 00:19:14,830
 

751
00:19:11,200 --> 00:19:18,220
 first appeared in my C++ seasoning talk

752
00:19:14,820 --> 00:19:18,220
 

753
00:19:14,830 --> 00:19:22,020
 from going native years ago nobody ever

754
00:19:18,210 --> 00:19:22,020
 

755
00:19:18,220 --> 00:19:25,740
 complains these days when I draw my

756
00:19:22,010 --> 00:19:25,740
 

757
00:19:22,020 --> 00:19:28,390
 pointers to not point at an element

758
00:19:25,730 --> 00:19:28,390
 

759
00:19:25,740 --> 00:19:35,159
 right a lot of people don't catch this I

760
00:19:28,380 --> 00:19:35,159
 

761
00:19:28,390 --> 00:19:38,730
 always draw my pointers like here have P

762
00:19:35,149 --> 00:19:38,730
 

763
00:19:35,159 --> 00:19:41,200
 l2 point between elements okay

764
00:19:38,720 --> 00:19:41,200
 

765
00:19:38,730 --> 00:19:43,090
 we're dealing with half open intervals

766
00:19:41,190 --> 00:19:43,090
 

767
00:19:41,200 --> 00:19:45,130
 that's the way I think about algorithms

768
00:19:43,080 --> 00:19:45,130
 

769
00:19:43,090 --> 00:19:47,919
 and I think about ranges the pointer

770
00:19:45,120 --> 00:19:47,919
 

771
00:19:45,130 --> 00:19:52,590
 doesn't point to of the first element it

772
00:19:47,909 --> 00:19:52,590
 

773
00:19:47,919 --> 00:19:52,590
 points before the first element right

774
00:19:53,510 --> 00:19:53,510
 

775
00:19:53,520 --> 00:19:58,600
 right so this was the gather function

776
00:19:56,700 --> 00:19:58,600
 

777
00:19:56,710 --> 00:20:00,549
 that's what it does right and the result

778
00:19:58,590 --> 00:20:00,549
 

779
00:19:58,600 --> 00:20:02,350
 here is a pair of pointers between

780
00:20:00,539 --> 00:20:02,350
 

781
00:20:00,549 --> 00:20:05,230
 element elements when you're working on

782
00:20:02,340 --> 00:20:05,230
 

783
00:20:02,350 --> 00:20:10,169
 algorithms this makes it a very nice and

784
00:20:05,220 --> 00:20:10,169
 

785
00:20:05,230 --> 00:20:14,470
 clear way to think about things and

786
00:20:10,159 --> 00:20:14,470
 

787
00:20:10,169 --> 00:20:16,120
 there's a fundamental reason for this

788
00:20:14,460 --> 00:20:16,120
 

789
00:20:14,470 --> 00:20:18,760
 right if you have a sequence of n

790
00:20:16,110 --> 00:20:18,760
 

791
00:20:16,120 --> 00:20:23,230
 elements there are n plus 1 positions in

792
00:20:18,750 --> 00:20:23,230
 

793
00:20:18,760 --> 00:20:25,900
 that sequence now today we don't even

794
00:20:23,220 --> 00:20:25,900
 

795
00:20:23,230 --> 00:20:28,750
 think about that very often right the

796
00:20:25,890 --> 00:20:28,750
 

797
00:20:25,900 --> 00:20:31,659
 thinking of half-open ranges is kind of

798
00:20:28,740 --> 00:20:31,659
 

799
00:20:28,750 --> 00:20:35,620
 burned into our psyche a lot of that

800
00:20:31,649 --> 00:20:35,620
 

801
00:20:31,659 --> 00:20:38,260
 comes from STL wasn't invented in STL it

802
00:20:35,610 --> 00:20:38,260
 

803
00:20:35,620 --> 00:20:41,710
 existed before that right Velasquez and

804
00:20:38,250 --> 00:20:41,710
 

805
00:20:38,260 --> 00:20:44,650
 knew before that Ken Thompson knew

806
00:20:41,700 --> 00:20:44,650
 

807
00:20:41,710 --> 00:20:48,000
 before that okay but it certainly wasn't

808
00:20:44,640 --> 00:20:48,000
 

809
00:20:44,650 --> 00:20:48,000
 popular at the time

810
00:20:50,010 --> 00:20:50,010
 

811
00:20:50,020 --> 00:20:56,980
 right which brings us all the way up to

812
00:20:52,940 --> 00:20:56,980
 

813
00:20:52,950 --> 00:20:59,620
 1993 during the five years here where

814
00:20:56,970 --> 00:20:59,620
 

815
00:20:56,980 --> 00:21:02,860
 we're skipping over Alex worked on on

816
00:20:59,610 --> 00:21:02,860
 

817
00:20:59,620 --> 00:21:04,900
 other projects other things did not have

818
00:21:02,850 --> 00:21:04,900
 

819
00:21:02,860 --> 00:21:09,190
 a chance to do generic programming and

820
00:21:04,890 --> 00:21:09,190
 

821
00:21:04,900 --> 00:21:11,380
 then he found himself at HP Labs and an

822
00:21:09,180 --> 00:21:11,380
 

823
00:21:09,190 --> 00:21:16,059
 opportunity to get back into generic

824
00:21:11,370 --> 00:21:16,059
 

825
00:21:11,380 --> 00:21:18,670
 programming what's going on in 1993

826
00:21:16,049 --> 00:21:18,670
 

827
00:21:16,059 --> 00:21:22,059
 number one movie is Jurassic Park laid a

828
00:21:18,660 --> 00:21:22,059
 

829
00:21:18,670 --> 00:21:25,660
 big CGI movie there was the bombing of

830
00:21:22,049 --> 00:21:25,660
 

831
00:21:22,059 --> 00:21:27,400
 the World Trade Center in New York Bill

832
00:21:25,650 --> 00:21:27,400
 

833
00:21:25,660 --> 00:21:30,490
 Clinton was sworn in as our president

834
00:21:27,390 --> 00:21:30,490
 

835
00:21:27,400 --> 00:21:34,960
 and the hot video games were doom and

836
00:21:30,480 --> 00:21:34,960
 

837
00:21:30,490 --> 00:21:40,240
 missed at that time all right for me at

838
00:21:34,950 --> 00:21:40,240
 

839
00:21:34,960 --> 00:21:42,490
 this time I had left Apple I had joined

840
00:21:40,230 --> 00:21:42,490
 

841
00:21:40,240 --> 00:21:45,280
 the Photoshop team at Adobe which is

842
00:21:42,480 --> 00:21:45,280
 

843
00:21:42,490 --> 00:21:47,740
 what I am where I'm kind of back looping

844
00:21:45,270 --> 00:21:47,740
 

845
00:21:45,280 --> 00:21:55,750
 back on my career I think if I end up

846
00:21:47,730 --> 00:21:55,750
 

847
00:21:47,740 --> 00:21:59,040
 back at Apple completes palindrome so so

848
00:21:55,740 --> 00:21:59,040
 

849
00:21:55,750 --> 00:22:04,270
 I'm now working kind of back in graphics

850
00:21:59,030 --> 00:22:04,270
 

851
00:21:59,040 --> 00:22:06,240
 with the Photoshop team and Alex resumed

852
00:22:04,260 --> 00:22:06,240
 

853
00:22:04,270 --> 00:22:08,790
 his work on generic programming and

854
00:22:06,230 --> 00:22:08,790
 

855
00:22:06,240 --> 00:22:11,110
 Andrew Koenig who he knew from Bell Labs

856
00:22:08,780 --> 00:22:11,110
 

857
00:22:08,790 --> 00:22:13,179
 suggests writing a standard library

858
00:22:11,100 --> 00:22:13,179
 

859
00:22:11,110 --> 00:22:15,910
 proposal right because the standard

860
00:22:13,169 --> 00:22:15,910
 

861
00:22:13,179 --> 00:22:19,840
 library needed the C++ standard library

862
00:22:15,900 --> 00:22:19,840
 

863
00:22:15,910 --> 00:22:22,150
 here needed some notion of containers

864
00:22:19,830 --> 00:22:22,150
 

865
00:22:19,840 --> 00:22:24,400
 and algorithms right and Alex had

866
00:22:22,140 --> 00:22:24,400
 

867
00:22:22,150 --> 00:22:27,220
 already written a book with Dave on ADA

868
00:22:24,390 --> 00:22:27,220
 

869
00:22:24,400 --> 00:22:29,280
 and Andrew knew that and so Andrew was

870
00:22:27,210 --> 00:22:29,280
 

871
00:22:27,220 --> 00:22:34,090
 like you know you should do this for C++

872
00:22:29,270 --> 00:22:34,090
 

873
00:22:29,280 --> 00:22:40,270
 we could use that proposal and that

874
00:22:34,080 --> 00:22:40,270
 

875
00:22:34,090 --> 00:22:43,720
 brought us up to 1994 and this this is

876
00:22:40,260 --> 00:22:43,720
 

877
00:22:40,270 --> 00:22:47,170
 truly an amazing piece of work right a

878
00:22:43,710 --> 00:22:47,170
 

879
00:22:43,720 --> 00:22:50,100
 standard template library to think that

880
00:22:47,160 --> 00:22:50,100
 

881
00:22:47,170 --> 00:22:52,330
 it took one year to write this is

882
00:22:50,090 --> 00:22:52,330
 

883
00:22:50,100 --> 00:22:54,190
 absolutely phenomenal when you think

884
00:22:52,320 --> 00:22:54,190
 

885
00:22:52,330 --> 00:22:56,140
 about the pace of things going into the

886
00:22:54,180 --> 00:22:56,140
 

887
00:22:54,190 --> 00:22:58,360
 standard library today how long has it

888
00:22:56,130 --> 00:22:58,360
 

889
00:22:56,140 --> 00:23:01,030
 taken us to get ranges or modules or

890
00:22:58,350 --> 00:23:01,030
 

891
00:22:58,360 --> 00:23:01,540
 concepts this was a phenomenal piece of

892
00:23:01,020 --> 00:23:01,540
 

893
00:23:01,030 --> 00:23:04,570
 work

894
00:23:01,530 --> 00:23:04,570
 

895
00:23:01,540 --> 00:23:07,270
 right right and Alex gives a huge amount

896
00:23:04,560 --> 00:23:07,270
 

897
00:23:04,570 --> 00:23:11,140
 of credit to the creation of this - Ming

898
00:23:07,260 --> 00:23:11,140
 

899
00:23:07,270 --> 00:23:12,370
 - Ming li that's a picture of Ming it

900
00:23:11,130 --> 00:23:12,370
 

901
00:23:11,140 --> 00:23:14,470
 was very hard for me to find a picture

902
00:23:12,360 --> 00:23:14,470
 

903
00:23:12,370 --> 00:23:17,440
 of her there's a picture and an old dr.

904
00:23:14,460 --> 00:23:17,440
 

905
00:23:14,470 --> 00:23:20,020
 Dobbs article that came out at the same

906
00:23:17,430 --> 00:23:20,020
 

907
00:23:17,440 --> 00:23:23,230
 time the article is online but not the

908
00:23:20,010 --> 00:23:23,230
 

909
00:23:20,020 --> 00:23:26,110
 artworks from it so I could not find the

910
00:23:23,220 --> 00:23:26,110
 

911
00:23:23,230 --> 00:23:28,090
 that original picture so I sent Mangan

912
00:23:26,100 --> 00:23:28,090
 

913
00:23:26,110 --> 00:23:29,860
 email and she was kind enough to send me

914
00:23:28,080 --> 00:23:29,860
 

915
00:23:28,090 --> 00:23:37,240
 a picture she said this was from roughly

916
00:23:29,850 --> 00:23:37,240
 

917
00:23:29,860 --> 00:23:39,010
 1995 a picture of her and and Alex

918
00:23:37,230 --> 00:23:39,010
 

919
00:23:37,240 --> 00:23:40,300
 basically says that the standard

920
00:23:39,000 --> 00:23:40,300
 

921
00:23:39,010 --> 00:23:42,850
 template library would not have happened

922
00:23:40,290 --> 00:23:42,850
 

923
00:23:40,300 --> 00:23:45,310
 without without Ming's assistance here

924
00:23:42,840 --> 00:23:45,310
 

925
00:23:42,850 --> 00:23:47,950
 Dave Maass are in fact who had been

926
00:23:45,300 --> 00:23:47,950
 

927
00:23:45,310 --> 00:23:50,410
 Alex's a longtime collaborator did not

928
00:23:47,940 --> 00:23:50,410
 

929
00:23:47,950 --> 00:23:52,180
 think that this was a possible in Denver

930
00:23:50,400 --> 00:23:52,180
 

931
00:23:50,410 --> 00:23:55,660
 he thought it would be a lot of work and

932
00:23:52,170 --> 00:23:55,660
 

933
00:23:52,180 --> 00:24:00,640
 ultimately rejected the library that

934
00:23:55,650 --> 00:24:00,640
 

935
00:23:55,660 --> 00:24:02,680
 they had done for ADA had some limited

936
00:24:00,630 --> 00:24:02,680
 

937
00:24:00,640 --> 00:24:07,600
 amount of use but not nearly what they

938
00:24:02,670 --> 00:24:07,600
 

939
00:24:02,680 --> 00:24:10,360
 were hoping for with Ada and and so Dave

940
00:24:07,590 --> 00:24:10,360
 

941
00:24:07,600 --> 00:24:13,240
 thought that this was kind of a fool's

942
00:24:10,350 --> 00:24:13,240
 

943
00:24:10,360 --> 00:24:15,760
 task to go off and do this so he did not

944
00:24:13,230 --> 00:24:15,760
 

945
00:24:13,240 --> 00:24:19,390
 did not go after that it's not to say he

946
00:24:15,750 --> 00:24:19,390
 

947
00:24:15,760 --> 00:24:23,670
 didn't participate kind of late he did

948
00:24:19,380 --> 00:24:23,670
 

949
00:24:19,390 --> 00:24:26,170
 the implementation of STD maps and

950
00:24:23,660 --> 00:24:26,170
 

951
00:24:23,670 --> 00:24:29,920
 balance tree implementation so that came

952
00:24:26,160 --> 00:24:29,920
 

953
00:24:26,170 --> 00:24:31,720
 out of Dave kind of late in the game but

954
00:24:29,910 --> 00:24:31,720
 

955
00:24:29,920 --> 00:24:32,980
 Meng was the driving force here she

956
00:24:31,710 --> 00:24:32,980
 

957
00:24:31,720 --> 00:24:33,900
 thought that this was something that was

958
00:24:32,970 --> 00:24:33,900
 

959
00:24:32,980 --> 00:24:37,600
 worth doing

960
00:24:33,890 --> 00:24:37,600
 

961
00:24:33,900 --> 00:24:39,730
 she kept Alex on track and and organized

962
00:24:37,590 --> 00:24:39,730
 

963
00:24:37,600 --> 00:24:41,620
 and if you know Alex he needs somebody

964
00:24:39,720 --> 00:24:41,620
 

965
00:24:39,730 --> 00:24:48,930
 to collaborate he will run off on

966
00:24:41,610 --> 00:24:48,930
 

967
00:24:41,620 --> 00:24:52,300
 tangents and she added a huge amount of

968
00:24:48,920 --> 00:24:52,300
 

969
00:24:48,930 --> 00:24:57,550
 polish and structure to this effort

970
00:24:52,290 --> 00:24:57,550
 

971
00:24:52,300 --> 00:24:58,960
 putting it together so to understand why

972
00:24:57,540 --> 00:24:58,960
 

973
00:24:57,550 --> 00:25:03,210
 this is important we're going to go back

974
00:24:58,950 --> 00:25:03,210
 

975
00:24:58,960 --> 00:25:03,210
 in time again all the way back to 1983

976
00:25:04,460 --> 00:25:04,460
 

977
00:25:04,470 --> 00:25:10,910
 this is an article from John Bentley

978
00:25:07,140 --> 00:25:10,910
 

979
00:25:07,150 --> 00:25:14,300
 titled programming pearls okay

980
00:25:10,900 --> 00:25:14,300
 

981
00:25:10,910 --> 00:25:17,240
 and it was actually a series of articles

982
00:25:14,290 --> 00:25:17,240
 

983
00:25:14,300 --> 00:25:19,580
 in the ACM this one was on writing

984
00:25:17,230 --> 00:25:19,580
 

985
00:25:17,240 --> 00:25:22,240
 correct programs just a little hard to

986
00:25:19,570 --> 00:25:22,240
 

987
00:25:19,580 --> 00:25:30,440
 see up there so writing correct programs

988
00:25:22,230 --> 00:25:30,440
 

989
00:25:22,240 --> 00:25:34,010
 okay that's a picture of John so this

990
00:25:30,430 --> 00:25:34,010
 

991
00:25:30,440 --> 00:25:35,810
 article contains this quote so he says

992
00:25:34,000 --> 00:25:35,810
 

993
00:25:34,010 --> 00:25:37,430
 I've assigned this problem he's talking

994
00:25:35,800 --> 00:25:37,430
 

995
00:25:35,810 --> 00:25:41,180
 about a problem of writing a binary

996
00:25:37,420 --> 00:25:41,180
 

997
00:25:37,430 --> 00:25:43,450
 search in courses at Bell Labs in IBM so

998
00:25:41,170 --> 00:25:43,450
 

999
00:25:41,180 --> 00:25:45,530
 we're not talking about about

1000
00:25:43,440 --> 00:25:45,530
 

1001
00:25:43,450 --> 00:25:47,000
 run-of-the-mill programmers right we're

1002
00:25:45,520 --> 00:25:47,000
 

1003
00:25:45,530 --> 00:25:51,860
 talking about professional programmers

1004
00:25:46,990 --> 00:25:51,860
 

1005
00:25:47,000 --> 00:25:53,540
 and major companies so the programmers

1006
00:25:51,850 --> 00:25:53,540
 

1007
00:25:51,860 --> 00:25:56,420
 had a couple of hours to convert the

1008
00:25:53,530 --> 00:25:56,420
 

1009
00:25:53,540 --> 00:25:58,120
 description of a binary search into a

1010
00:25:56,410 --> 00:25:58,120
 

1011
00:25:56,420 --> 00:26:01,660
 programming language of their choice

1012
00:25:58,110 --> 00:26:01,660
 

1013
00:25:58,120 --> 00:26:03,830
 right high level pseudocode was fine

1014
00:26:01,650 --> 00:26:03,830
 

1015
00:26:01,660 --> 00:26:08,270
 ninety percent of the programmers found

1016
00:26:03,820 --> 00:26:08,270
 

1017
00:26:03,830 --> 00:26:09,830
 bugs in their programs and I John wasn't

1018
00:26:08,260 --> 00:26:09,830
 

1019
00:26:08,270 --> 00:26:12,670
 always convinced of the correctness of

1020
00:26:09,820 --> 00:26:12,670
 

1021
00:26:09,830 --> 00:26:15,620
 the code in which no books were found

1022
00:26:12,660 --> 00:26:15,620
 

1023
00:26:12,670 --> 00:26:22,250
 okay how can that be this is binary

1024
00:26:15,610 --> 00:26:22,250
 

1025
00:26:15,620 --> 00:26:24,620
 search well one of the guys who I worked

1026
00:26:22,240 --> 00:26:24,620
 

1027
00:26:22,250 --> 00:26:27,040
 with for a lot of years still an Adobe

1028
00:26:24,610 --> 00:26:27,040
 

1029
00:26:24,620 --> 00:26:30,280
 we occasionally collaborate together

1030
00:26:27,030 --> 00:26:30,280
 

1031
00:26:27,040 --> 00:26:32,990
 said this I want to hire the other 10%

1032
00:26:30,270 --> 00:26:32,990
 

1033
00:26:30,280 --> 00:26:35,440
 right if 90% of the people can't write a

1034
00:26:32,980 --> 00:26:35,440
 

1035
00:26:32,990 --> 00:26:38,810
 binary search I want to hire the 10%

1036
00:26:35,430 --> 00:26:38,810
 

1037
00:26:35,440 --> 00:26:40,630
 when I joined the Photoshop team now 25

1038
00:26:38,800 --> 00:26:40,630
 

1039
00:26:38,810 --> 00:26:43,160
 years ago I

1040
00:26:40,620 --> 00:26:43,160
 

1041
00:26:40,630 --> 00:26:45,530
 after going through interviews I was

1042
00:26:43,150 --> 00:26:45,530
 

1043
00:26:43,160 --> 00:26:47,420
 handed a one-page sheet of paper with a

1044
00:26:45,520 --> 00:26:47,420
 

1045
00:26:45,530 --> 00:26:49,130
 description of a problem it even said on

1046
00:26:47,410 --> 00:26:49,130
 

1047
00:26:47,420 --> 00:26:51,310
 here this is a problem for a binary

1048
00:26:49,120 --> 00:26:51,310
 

1049
00:26:49,130 --> 00:26:54,410
 search it's a particular binary search

1050
00:26:51,300 --> 00:26:54,410
 

1051
00:26:51,310 --> 00:26:54,790
 take it home spend as much time as you

1052
00:26:54,400 --> 00:26:54,790
 

1053
00:26:54,410 --> 00:26:57,770
 need

1054
00:26:54,780 --> 00:26:57,770
 

1055
00:26:54,790 --> 00:26:59,450
 okay with the caveat that we're looking

1056
00:26:57,760 --> 00:26:59,450
 

1057
00:26:57,770 --> 00:27:02,600
 at other candidates while you're taking

1058
00:26:59,440 --> 00:27:02,600
 

1059
00:26:59,450 --> 00:27:03,560
 time so we may hire somebody else before

1060
00:27:02,590 --> 00:27:03,560
 

1061
00:27:02,600 --> 00:27:06,200
 you get your answer in

1062
00:27:03,550 --> 00:27:06,200
 

1063
00:27:03,560 --> 00:27:08,030
 okay but take as much time as you you

1064
00:27:06,190 --> 00:27:08,030
 

1065
00:27:06,200 --> 00:27:10,130
 need you shouldn't reference outside

1066
00:27:08,020 --> 00:27:10,130
 

1067
00:27:08,030 --> 00:27:11,990
 resources but there's nobody babysitting

1068
00:27:10,120 --> 00:27:11,990
 

1069
00:27:10,130 --> 00:27:16,070
 you so you could I suppose if you wanted

1070
00:27:11,980 --> 00:27:16,070
 

1071
00:27:11,990 --> 00:27:18,470
 to write a piece of code to solve the

1072
00:27:16,060 --> 00:27:18,470
 

1073
00:27:16,070 --> 00:27:21,020
 problem and write an argument does not

1074
00:27:18,460 --> 00:27:21,020
 

1075
00:27:18,470 --> 00:27:24,740
 have to be a formal proof as to whether

1076
00:27:21,010 --> 00:27:24,740
 

1077
00:27:21,020 --> 00:27:27,740
 as to as to why you believe your code is

1078
00:27:24,730 --> 00:27:27,740
 

1079
00:27:24,740 --> 00:27:33,920
 correct okay so it's a test both of your

1080
00:27:27,730 --> 00:27:33,920
 

1081
00:27:27,740 --> 00:27:35,420
 coding skills and your writing skills I

1082
00:27:33,910 --> 00:27:35,420
 

1083
00:27:33,920 --> 00:27:38,000
 passed the test

1084
00:27:35,410 --> 00:27:38,000
 

1085
00:27:35,420 --> 00:27:43,130
 I think barely my code was not that

1086
00:27:37,990 --> 00:27:43,130
 

1087
00:27:38,000 --> 00:27:45,650
 pretty but after I joined the team I got

1088
00:27:43,120 --> 00:27:45,650
 

1089
00:27:43,130 --> 00:27:47,500
 to read a lot of code that other people

1090
00:27:45,640 --> 00:27:47,500
 

1091
00:27:45,650 --> 00:27:49,490
 submitted

1092
00:27:47,490 --> 00:27:49,490
 

1093
00:27:47,500 --> 00:27:52,490
 now you wouldn't think that this is that

1094
00:27:49,480 --> 00:27:52,490
 

1095
00:27:49,490 --> 00:27:54,860
 that hard that's a picture of mark

1096
00:27:52,480 --> 00:27:54,860
 

1097
00:27:52,490 --> 00:27:56,750
 Hamburg who came up with this idea we

1098
00:27:54,850 --> 00:27:56,750
 

1099
00:27:54,860 --> 00:27:59,360
 still use this test today if you joined

1100
00:27:56,740 --> 00:27:59,360
 

1101
00:27:56,750 --> 00:28:01,760
 the Photoshop team today you will be

1102
00:27:59,350 --> 00:28:01,760
 

1103
00:27:59,360 --> 00:28:05,690
 handed the same sheet of paper that I

1104
00:28:01,750 --> 00:28:05,690
 

1105
00:28:01,760 --> 00:28:07,970
 was handed right so that's 25 years and

1106
00:28:05,680 --> 00:28:07,970
 

1107
00:28:05,690 --> 00:28:14,630
 I can tell you the submissions have not

1108
00:28:07,960 --> 00:28:14,630
 

1109
00:28:07,970 --> 00:28:17,660
 improved a great deal surprisingly right

1110
00:28:14,620 --> 00:28:17,660
 

1111
00:28:14,630 --> 00:28:22,429
 so this was the code I translated this

1112
00:28:17,650 --> 00:28:22,429
 

1113
00:28:17,660 --> 00:28:24,440
 into kind of modern C++ that John

1114
00:28:22,419 --> 00:28:24,440
 

1115
00:28:22,429 --> 00:28:26,660
 Bentley published in the book John

1116
00:28:24,430 --> 00:28:26,660
 

1117
00:28:24,440 --> 00:28:28,940
 Bentley actually put answer in the book

1118
00:28:26,650 --> 00:28:28,940
 

1119
00:28:26,660 --> 00:28:32,090
 in pseudocode I wanted you guys to

1120
00:28:28,930 --> 00:28:32,090
 

1121
00:28:28,940 --> 00:28:33,200
 actually be able to to read this but I

1122
00:28:32,080 --> 00:28:33,200
 

1123
00:28:32,090 --> 00:28:35,510
 think that this is an accurate

1124
00:28:33,190 --> 00:28:35,510
 

1125
00:28:33,200 --> 00:28:38,179
 translation and in fact John is

1126
00:28:35,500 --> 00:28:38,179
 

1127
00:28:35,510 --> 00:28:41,360
 published on his website his own ports

1128
00:28:38,169 --> 00:28:41,360
 

1129
00:28:38,179 --> 00:28:44,059
 of the same algorithm to see and so this

1130
00:28:41,350 --> 00:28:44,059
 

1131
00:28:41,360 --> 00:28:48,830
 is at least very true to his own port to

1132
00:28:44,049 --> 00:28:48,830
 

1133
00:28:44,059 --> 00:28:51,620
 see ok so this is his answer to binary

1134
00:28:48,820 --> 00:28:51,620
 

1135
00:28:48,830 --> 00:28:53,420
 search right so we've got an array of n

1136
00:28:51,610 --> 00:28:53,420
 

1137
00:28:51,620 --> 00:28:56,240
 elements and we're trying to find some

1138
00:28:53,410 --> 00:28:56,240
 

1139
00:28:53,420 --> 00:29:00,350
 value V V within it and we're going to

1140
00:28:56,230 --> 00:29:00,350
 

1141
00:28:56,240 --> 00:29:02,620
 return the index of where we found it so

1142
00:29:00,340 --> 00:29:02,620
 

1143
00:29:00,350 --> 00:29:12,080
 the first thing we notice is we say oh

1144
00:29:02,610 --> 00:29:12,080
 

1145
00:29:02,620 --> 00:29:17,000
 well if our range is empty here we're

1146
00:29:12,070 --> 00:29:17,000
 

1147
00:29:12,080 --> 00:29:18,830
 going to return negative 1 ok so

1148
00:29:16,990 --> 00:29:18,830
 

1149
00:29:17,000 --> 00:29:22,760
 immediately that means we need to assign

1150
00:29:18,820 --> 00:29:22,760
 

1151
00:29:18,830 --> 00:29:27,770
 values here we need some flag right that

1152
00:29:22,750 --> 00:29:27,770
 

1153
00:29:22,760 --> 00:29:30,640
 we can return now what we're going to do

1154
00:29:27,760 --> 00:29:30,640
 

1155
00:29:27,770 --> 00:29:32,990
 here is we're going to find our midpoint

1156
00:29:30,630 --> 00:29:32,990
 

1157
00:29:30,640 --> 00:29:37,160
 there's a serious problem with this line

1158
00:29:32,980 --> 00:29:37,160
 

1159
00:29:32,990 --> 00:29:42,049
 of code anybody see the serious problem

1160
00:29:37,150 --> 00:29:42,049
 

1161
00:29:37,160 --> 00:29:44,150
 one person here yeah l+ you could

1162
00:29:42,039 --> 00:29:44,150
 

1163
00:29:42,049 --> 00:29:50,780
 overflow okay so this potentially

1164
00:29:44,140 --> 00:29:50,780
 

1165
00:29:44,150 --> 00:29:54,830
 overflows okay so down here we do our

1166
00:29:50,770 --> 00:29:54,830
 

1167
00:29:50,780 --> 00:29:57,919
 our comparison if it equals we return em

1168
00:29:54,820 --> 00:29:57,919
 

1169
00:29:54,830 --> 00:29:59,870
 now we have two comparisons there okay

1170
00:29:57,909 --> 00:29:59,870
 

1171
00:29:57,919 --> 00:30:01,549
 so we're checking to see if it's less

1172
00:29:59,860 --> 00:30:01,549
 

1173
00:29:59,870 --> 00:30:04,250
 than and we're checking to see if it's

1174
00:30:01,539 --> 00:30:04,250
 

1175
00:30:01,549 --> 00:30:07,720
 if it's equal to right it's only

1176
00:30:04,240 --> 00:30:07,720
 

1177
00:30:04,250 --> 00:30:10,070
 necessary to have have one comparison

1178
00:30:07,710 --> 00:30:10,070
 

1179
00:30:07,720 --> 00:30:11,870
 this most people think when writing the

1180
00:30:10,060 --> 00:30:11,870
 

1181
00:30:10,070 --> 00:30:14,630
 binary search is an optimization I

1182
00:30:11,860 --> 00:30:14,630
 

1183
00:30:11,870 --> 00:30:17,030
 should stop as soon as I find it right

1184
00:30:14,620 --> 00:30:17,030
 

1185
00:30:14,630 --> 00:30:18,980
 but you're paying an extra comparison at

1186
00:30:17,020 --> 00:30:18,980
 

1187
00:30:17,030 --> 00:30:21,049
 each level of the search so that you can

1188
00:30:18,970 --> 00:30:21,049
 

1189
00:30:18,980 --> 00:30:23,809
 short-circuit the search you're better

1190
00:30:21,039 --> 00:30:23,809
 

1191
00:30:21,049 --> 00:30:26,270
 off just doing one comparison and going

1192
00:30:23,799 --> 00:30:26,270
 

1193
00:30:23,809 --> 00:30:32,120
 all the way until till you find the

1194
00:30:26,260 --> 00:30:32,120
 

1195
00:30:26,270 --> 00:30:35,919
 minimum point so then we have this line

1196
00:30:32,110 --> 00:30:35,919
 

1197
00:30:32,120 --> 00:30:38,450
 of code where we where we are adjust our

1198
00:30:35,909 --> 00:30:38,450
 

1199
00:30:35,919 --> 00:30:42,320
 Ellen you are lower and upper bounds

1200
00:30:38,440 --> 00:30:42,320
 

1201
00:30:38,450 --> 00:30:45,200
 where we adjust our upper bounds to be M

1202
00:30:42,310 --> 00:30:45,200
 

1203
00:30:42,320 --> 00:30:50,030
 minus one what's the potential problem

1204
00:30:45,190 --> 00:30:50,030
 

1205
00:30:45,200 --> 00:30:53,299
 here anybody so what can happen here is

1206
00:30:50,020 --> 00:30:53,299
 

1207
00:30:50,030 --> 00:30:54,980
 the subtraction of one can end up with

1208
00:30:53,289 --> 00:30:54,980
 

1209
00:30:53,299 --> 00:30:57,650
 negative one okay

1210
00:30:54,970 --> 00:30:57,650
 

1211
00:30:54,980 --> 00:30:59,780
 again so we can under flow here if we

1212
00:30:57,640 --> 00:30:59,780
 

1213
00:30:57,650 --> 00:31:02,840
 were using unsigned values luckily we're

1214
00:30:59,770 --> 00:31:02,840
 

1215
00:30:59,780 --> 00:31:05,090
 using signed values and the way this

1216
00:31:02,830 --> 00:31:05,090
 

1217
00:31:02,840 --> 00:31:10,059
 algorithm works is we end up returning

1218
00:31:05,080 --> 00:31:10,059
 

1219
00:31:05,090 --> 00:31:13,700
 negative one if we don't find the object

1220
00:31:10,049 --> 00:31:13,700
 

1221
00:31:10,059 --> 00:31:19,220
 okay which is throwing away work because

1222
00:31:13,690 --> 00:31:19,220
 

1223
00:31:13,700 --> 00:31:21,289
 ideally if we were able to if we fail to

1224
00:31:19,210 --> 00:31:21,289
 

1225
00:31:19,220 --> 00:31:23,120
 find the object we would return the

1226
00:31:21,279 --> 00:31:23,120
 

1227
00:31:21,289 --> 00:31:26,299
 position of where the object would go

1228
00:31:23,110 --> 00:31:26,299
 

1229
00:31:23,120 --> 00:31:28,400
 okay but all of this code is dealing

1230
00:31:26,289 --> 00:31:28,400
 

1231
00:31:26,299 --> 00:31:31,280
 with with a closed interval which makes

1232
00:31:28,390 --> 00:31:31,280
 

1233
00:31:28,400 --> 00:31:34,039
 that a difficult thing to do right so

1234
00:31:31,270 --> 00:31:34,039
 

1235
00:31:31,280 --> 00:31:36,679
 this is John solution in the book and

1236
00:31:34,029 --> 00:31:36,679
 

1237
00:31:34,039 --> 00:31:38,960
 this kind of stood as the gold standard

1238
00:31:36,669 --> 00:31:38,960
 

1239
00:31:36,679 --> 00:31:42,530
 for how you would write binary search

1240
00:31:38,950 --> 00:31:42,530
 

1241
00:31:38,960 --> 00:31:47,090
 for for all the intervening years right

1242
00:31:42,520 --> 00:31:47,090
 

1243
00:31:42,530 --> 00:31:49,060
 and it's not a great answer so I'm

1244
00:31:47,080 --> 00:31:49,060
 

1245
00:31:47,090 --> 00:31:52,060
 working on on

1246
00:31:49,050 --> 00:31:52,060
 

1247
00:31:49,060 --> 00:31:56,170
 Photoshop and Alex has published the

1248
00:31:52,050 --> 00:31:56,170
 

1249
00:31:52,060 --> 00:31:58,270
 paper on STL and the open source the HP

1250
00:31:56,160 --> 00:31:58,270
 

1251
00:31:56,170 --> 00:32:00,070
 implementation of STL and it's

1252
00:31:58,260 --> 00:32:00,070
 

1253
00:31:58,270 --> 00:32:02,740
 generating a little bit of buzz about

1254
00:32:00,060 --> 00:32:02,740
 

1255
00:32:00,070 --> 00:32:04,690
 this library and I think this would be

1256
00:32:02,730 --> 00:32:04,690
 

1257
00:32:02,740 --> 00:32:08,520
 an interesting thing to incorporate into

1258
00:32:04,680 --> 00:32:08,520
 

1259
00:32:04,690 --> 00:32:11,140
 the Photoshop codebase but at that time

1260
00:32:08,510 --> 00:32:11,140
 

1261
00:32:08,520 --> 00:32:12,910
 it was very rare that you could find a

1262
00:32:11,130 --> 00:32:12,910
 

1263
00:32:11,140 --> 00:32:15,310
 compiler that actually implemented

1264
00:32:12,900 --> 00:32:15,310
 

1265
00:32:12,910 --> 00:32:17,380
 exception handling and Photoshop had its

1266
00:32:15,300 --> 00:32:17,380
 

1267
00:32:15,310 --> 00:32:19,120
 own exception handling scheme that was

1268
00:32:17,370 --> 00:32:19,120
 

1269
00:32:17,380 --> 00:32:24,310
 based off set jump long jump and a bunch

1270
00:32:19,110 --> 00:32:24,310
 

1271
00:32:19,120 --> 00:32:26,950
 of macros so in order to use an external

1272
00:32:24,300 --> 00:32:26,950
 

1273
00:32:24,310 --> 00:32:28,660
 library we had to review the code and

1274
00:32:26,940 --> 00:32:28,660
 

1275
00:32:26,950 --> 00:32:30,100
 retrofit it to make sure that it would

1276
00:32:28,650 --> 00:32:30,100
 

1277
00:32:28,660 --> 00:32:33,550
 work correctly with our exception

1278
00:32:30,090 --> 00:32:33,550
 

1279
00:32:30,100 --> 00:32:36,790
 handling system so I download the HP STL

1280
00:32:33,540 --> 00:32:36,790
 

1281
00:32:33,550 --> 00:32:39,240
 and and make it my job to read through

1282
00:32:36,780 --> 00:32:39,240
 

1283
00:32:36,790 --> 00:32:44,950
 every line it's not that much code

1284
00:32:39,230 --> 00:32:44,950
 

1285
00:32:39,240 --> 00:32:47,350
 within the STL - to understand it and to

1286
00:32:44,940 --> 00:32:47,350
 

1287
00:32:44,950 --> 00:32:50,800
 retrofit it if necessary to work with

1288
00:32:47,340 --> 00:32:50,800
 

1289
00:32:47,350 --> 00:32:53,860
 our exception handling system and I find

1290
00:32:50,790 --> 00:32:53,860
 

1291
00:32:50,800 --> 00:32:56,710
 this this is an implementation of lower

1292
00:32:53,850 --> 00:32:56,710
 

1293
00:32:53,860 --> 00:32:59,080
 bound this is a binary search in fact

1294
00:32:56,700 --> 00:32:59,080
 

1295
00:32:56,710 --> 00:33:05,200
 this is a correct answer to the

1296
00:32:59,070 --> 00:33:05,200
 

1297
00:32:59,080 --> 00:33:07,510
 Photoshop take-home test okay this is

1298
00:33:05,190 --> 00:33:07,510
 

1299
00:33:05,200 --> 00:33:11,890
 actually a beautiful little piece of

1300
00:33:07,500 --> 00:33:11,890
 

1301
00:33:07,510 --> 00:33:13,930
 code okay so first it's doing a binary

1302
00:33:11,880 --> 00:33:13,930
 

1303
00:33:11,890 --> 00:33:16,840
 search it takes a half open interval

1304
00:33:13,920 --> 00:33:16,840
 

1305
00:33:13,930 --> 00:33:19,420
 coming in coming in to it as opposed to

1306
00:33:16,830 --> 00:33:19,420
 

1307
00:33:16,840 --> 00:33:21,160
 a closed interval it's a generic

1308
00:33:19,410 --> 00:33:21,160
 

1309
00:33:19,420 --> 00:33:23,800
 interface so we're not just finding an

1310
00:33:21,150 --> 00:33:23,800
 

1311
00:33:21,160 --> 00:33:26,800
 int in an array right we're finding

1312
00:33:23,790 --> 00:33:26,800
 

1313
00:33:23,800 --> 00:33:29,380
 anything within almost any type of

1314
00:33:26,790 --> 00:33:29,380
 

1315
00:33:26,800 --> 00:33:31,210
 sequence right it works for forward

1316
00:33:29,370 --> 00:33:31,210
 

1317
00:33:29,380 --> 00:33:32,260
 iterators it works for random access to

1318
00:33:31,200 --> 00:33:32,260
 

1319
00:33:31,210 --> 00:33:34,420
 the readers works for bi-directional

1320
00:33:32,250 --> 00:33:34,420
 

1321
00:33:32,260 --> 00:33:36,370
 iterators right so I could do a binary

1322
00:33:34,410 --> 00:33:36,370
 

1323
00:33:34,420 --> 00:33:37,630
 search on a linked list and there's

1324
00:33:36,360 --> 00:33:37,630
 

1325
00:33:36,370 --> 00:33:40,170
 actually reasons why you would want to

1326
00:33:37,620 --> 00:33:40,170
 

1327
00:33:37,630 --> 00:33:40,170
 do such a thing

1328
00:33:40,710 --> 00:33:40,710
 

1329
00:33:40,720 --> 00:33:47,080
 it does not overflow okay so it's very

1330
00:33:45,150 --> 00:33:47,080
 

1331
00:33:45,160 --> 00:33:51,130
 careful and precise about its

1332
00:33:47,070 --> 00:33:51,130
 

1333
00:33:47,080 --> 00:33:54,900
 mathematics here it only has a single

1334
00:33:51,120 --> 00:33:54,900
 

1335
00:33:51,130 --> 00:33:54,900
 comparison in here

1336
00:33:55,260 --> 00:33:55,260
 

1337
00:33:55,270 --> 00:34:01,340
 it has one return statement and it's

1338
00:33:58,180 --> 00:34:01,340
 

1339
00:33:58,190 --> 00:34:03,770
 returning right the position where the

1340
00:34:01,330 --> 00:34:03,770
 

1341
00:34:01,340 --> 00:34:05,740
 element would go if it doesn't find it

1342
00:34:03,760 --> 00:34:05,740
 

1343
00:34:03,770 --> 00:34:10,129
 right or the position of the element

1344
00:34:05,730 --> 00:34:10,129
 

1345
00:34:05,740 --> 00:34:12,169
 this is a beautiful piece of code but it

1346
00:34:10,119 --> 00:34:12,169
 

1347
00:34:10,129 --> 00:34:14,030
 wasn't just this piece of code right at

1348
00:34:12,159 --> 00:34:14,030
 

1349
00:34:12,169 --> 00:34:16,879
 this point I've been reviewing people's

1350
00:34:14,020 --> 00:34:16,879
 

1351
00:34:14,030 --> 00:34:19,810
 submissions for binary search I can say

1352
00:34:16,869 --> 00:34:19,810
 

1353
00:34:16,879 --> 00:34:23,300
 that I had only ever seen one submission

1354
00:34:19,800 --> 00:34:23,300
 

1355
00:34:19,810 --> 00:34:26,120
 that was this beautiful prior to me

1356
00:34:23,290 --> 00:34:26,120
 

1357
00:34:23,300 --> 00:34:29,690
 seeing this and that was done by a

1358
00:34:26,110 --> 00:34:29,690
 

1359
00:34:26,120 --> 00:34:31,639
 physicist who he wrote a beautiful piece

1360
00:34:29,680 --> 00:34:31,639
 

1361
00:34:29,690 --> 00:34:34,250
 of code he actually wrote it in Algol of

1362
00:34:31,629 --> 00:34:34,250
 

1363
00:34:31,639 --> 00:34:40,490
 all things and submitted a formal proof

1364
00:34:34,240 --> 00:34:40,490
 

1365
00:34:34,250 --> 00:34:46,429
 with it we made him an offer he did not

1366
00:34:40,480 --> 00:34:46,429
 

1367
00:34:40,490 --> 00:34:48,649
 accept unfortunately and I run across

1368
00:34:46,419 --> 00:34:48,649
 

1369
00:34:46,429 --> 00:34:51,290
 this but it isn't just this piece of

1370
00:34:48,639 --> 00:34:51,290
 

1371
00:34:48,649 --> 00:34:54,230
 code right if you go through the rest of

1372
00:34:51,280 --> 00:34:54,230
 

1373
00:34:51,290 --> 00:34:56,300
 the STL it is every algorithm in there

1374
00:34:54,220 --> 00:34:56,300
 

1375
00:34:54,230 --> 00:34:58,130
 you have to kind of strip out a little

1376
00:34:56,290 --> 00:34:58,130
 

1377
00:34:56,300 --> 00:34:59,870
 bit right there's all this junk for

1378
00:34:58,120 --> 00:34:59,870
 

1379
00:34:58,130 --> 00:35:03,170
 compilers and double underscores for

1380
00:34:59,860 --> 00:35:03,170
 

1381
00:34:59,870 --> 00:35:05,870
 symbols and all the template header crap

1382
00:35:03,160 --> 00:35:05,870
 

1383
00:35:03,170 --> 00:35:07,880
 you have to look at the algorithms write

1384
00:35:05,860 --> 00:35:07,880
 

1385
00:35:05,870 --> 00:35:09,410
 all of the algorithms are carefully

1386
00:35:07,870 --> 00:35:09,410
 

1387
00:35:07,880 --> 00:35:11,780
 constructed right

1388
00:35:09,400 --> 00:35:11,780
 

1389
00:35:09,410 --> 00:35:15,680
 one of the main algorithms inside of STL

1390
00:35:11,770 --> 00:35:15,680
 

1391
00:35:11,780 --> 00:35:18,380
 is is stable sort and it's an in situ

1392
00:35:15,670 --> 00:35:18,380
 

1393
00:35:15,680 --> 00:35:23,990
 stable sort and not that long before the

1394
00:35:18,370 --> 00:35:23,990
 

1395
00:35:18,380 --> 00:35:26,780
 STL was published in Knuth art of

1396
00:35:23,980 --> 00:35:26,780
 

1397
00:35:23,990 --> 00:35:32,180
 computer programming an in situ stable

1398
00:35:26,770 --> 00:35:32,180
 

1399
00:35:26,780 --> 00:35:43,250
 sort that that was solvable in

1400
00:35:32,170 --> 00:35:43,250
 

1401
00:35:32,180 --> 00:35:45,110
 polynomial exhale it'll solution in

1402
00:35:43,240 --> 00:35:45,110
 

1403
00:35:43,250 --> 00:35:47,450
 there for stable sort that builds it up

1404
00:35:45,100 --> 00:35:47,450
 

1405
00:35:45,110 --> 00:35:49,850
 out of all the other algorithms all the

1406
00:35:47,440 --> 00:35:49,850
 

1407
00:35:47,450 --> 00:35:53,720
 algorithms within the STL fit together

1408
00:35:49,840 --> 00:35:53,720
 

1409
00:35:49,850 --> 00:35:57,170
 like puzzle pieces right I saw this and

1410
00:35:53,710 --> 00:35:57,170
 

1411
00:35:53,720 --> 00:35:59,210
 I thought who writes code like this okay

1412
00:35:57,160 --> 00:35:59,210
 

1413
00:35:57,170 --> 00:36:01,700
 right I mean keep in mind here I'm

1414
00:35:59,200 --> 00:36:01,700
 

1415
00:35:59,210 --> 00:36:03,530
 working with a bunch of phenomenal

1416
00:36:01,690 --> 00:36:03,530
 

1417
00:36:01,700 --> 00:36:04,970
 engineers right great people these are

1418
00:36:03,520 --> 00:36:04,970
 

1419
00:36:03,530 --> 00:36:07,580
 some of the top people in the industry

1420
00:36:04,960 --> 00:36:07,580
 

1421
00:36:04,970 --> 00:36:08,310
 and I've never seen somebody who writes

1422
00:36:07,570 --> 00:36:08,310
 

1423
00:36:07,580 --> 00:36:11,670
 code

1424
00:36:08,300 --> 00:36:11,670
 

1425
00:36:08,310 --> 00:36:14,370
 like this okay this is not like the code

1426
00:36:11,660 --> 00:36:14,370
 

1427
00:36:11,670 --> 00:36:16,800
 that Alex published in in his paper five

1428
00:36:14,360 --> 00:36:16,800
 

1429
00:36:14,370 --> 00:36:21,240
 years before right he's clearly grown

1430
00:36:16,790 --> 00:36:21,240
 

1431
00:36:16,800 --> 00:36:23,640
 and had some time to think about it so

1432
00:36:21,230 --> 00:36:23,640
 

1433
00:36:21,240 --> 00:36:26,100
 it's just this phenomenal piece of work

1434
00:36:23,630 --> 00:36:26,100
 

1435
00:36:23,640 --> 00:36:28,680
 and for me it was like like I want to

1436
00:36:26,090 --> 00:36:28,680
 

1437
00:36:26,100 --> 00:36:34,800
 write code like that how do I write code

1438
00:36:28,670 --> 00:36:34,800
 

1439
00:36:28,680 --> 00:36:40,950
 like that so now we're going to skip

1440
00:36:34,790 --> 00:36:40,950
 

1441
00:36:34,800 --> 00:36:44,820
 ahead a little bit here to 1998 okay and

1442
00:36:40,940 --> 00:36:44,820
 

1443
00:36:40,950 --> 00:36:47,670
 this happens right the c++ iso standard

1444
00:36:44,810 --> 00:36:47,670
 

1445
00:36:44,820 --> 00:36:51,210
 and it includes STL which was a

1446
00:36:47,660 --> 00:36:51,210
 

1447
00:36:47,670 --> 00:36:54,660
 phenomenal accomplishment right the STL

1448
00:36:51,200 --> 00:36:54,660
 

1449
00:36:51,210 --> 00:36:57,270
 with in c++ 98 standard looked nothing

1450
00:36:54,650 --> 00:36:57,270
 

1451
00:36:54,660 --> 00:37:00,000
 like container and algorithm libraries

1452
00:36:57,260 --> 00:37:00,000
 

1453
00:36:57,270 --> 00:37:01,710
 at the time right right if you looked

1454
00:36:59,990 --> 00:37:01,710
 

1455
00:37:00,000 --> 00:37:04,560
 everybody knew that you you know when

1456
00:37:01,700 --> 00:37:04,560
 

1457
00:37:01,710 --> 00:37:07,200
 you had in new container class you had

1458
00:37:04,550 --> 00:37:07,200
 

1459
00:37:04,560 --> 00:37:08,910
 to use inheritance and the algorithms

1460
00:37:07,190 --> 00:37:08,910
 

1461
00:37:07,200 --> 00:37:12,530
 had to be member functions on the class

1462
00:37:08,900 --> 00:37:12,530
 

1463
00:37:08,910 --> 00:37:15,660
 and things were concrete and not generic

1464
00:37:12,520 --> 00:37:15,660
 

1465
00:37:12,530 --> 00:37:17,220
 and yet yet this happened partially

1466
00:37:15,650 --> 00:37:17,220
 

1467
00:37:15,660 --> 00:37:22,170
 because of Alex's friendship with

1468
00:37:17,210 --> 00:37:22,170
 

1469
00:37:17,220 --> 00:37:28,950
 piernas and with Andrew Koenig right so

1470
00:37:22,160 --> 00:37:28,950
 

1471
00:37:22,170 --> 00:37:35,180
 that's the C++ standards committee now

1472
00:37:28,940 --> 00:37:35,180
 

1473
00:37:28,950 --> 00:37:35,180
 also in 98 there was a workshop on

1474
00:37:35,350 --> 00:37:35,350
 

1475
00:37:35,360 --> 00:37:41,370
 generic programming and I think one of

1476
00:37:39,110 --> 00:37:41,370
 

1477
00:37:39,120 --> 00:37:43,910
 the critical papers that came out of

1478
00:37:41,360 --> 00:37:43,910
 

1479
00:37:41,370 --> 00:37:47,700
 workshop out of the workshop was this

1480
00:37:43,900 --> 00:37:47,700
 

1481
00:37:43,910 --> 00:37:50,960
 from Dave Abraham's that's a picture of

1482
00:37:47,690 --> 00:37:50,960
 

1483
00:37:47,700 --> 00:37:54,390
 Dave how many people know who Dave is a

1484
00:37:50,950 --> 00:37:54,390
 

1485
00:37:50,960 --> 00:37:57,930
 few people so dave was also one of the

1486
00:37:54,380 --> 00:37:57,930
 

1487
00:37:54,390 --> 00:38:00,420
 principles when booth library started up

1488
00:37:57,920 --> 00:38:00,420
 

1489
00:37:57,930 --> 00:38:02,790
 it was a Beeman Dobbs idea but Dave kind

1490
00:38:00,410 --> 00:38:02,790
 

1491
00:38:00,420 --> 00:38:05,580
 of drove a lot of it and ran with it

1492
00:38:02,780 --> 00:38:05,580
 

1493
00:38:02,790 --> 00:38:06,630
 Dave will kind of left the C++ community

1494
00:38:05,570 --> 00:38:06,630
 

1495
00:38:05,580 --> 00:38:08,520
 a few years ago

1496
00:38:06,620 --> 00:38:08,520
 

1497
00:38:06,630 --> 00:38:13,020
 to become one of the principal designers

1498
00:38:08,510 --> 00:38:13,020
 

1499
00:38:08,520 --> 00:38:14,700
 on Swift so he's been doing that and

1500
00:38:13,010 --> 00:38:14,700
 

1501
00:38:13,020 --> 00:38:17,580
 what is this exception safety and

1502
00:38:14,690 --> 00:38:17,580
 

1503
00:38:14,700 --> 00:38:21,410
 generic components so this is where the

1504
00:38:17,570 --> 00:38:21,410
 

1505
00:38:17,580 --> 00:38:23,569
 rules of exception handling come from

1506
00:38:21,400 --> 00:38:23,569
 

1507
00:38:21,410 --> 00:38:26,509
 the basic exception guarantees and the

1508
00:38:23,559 --> 00:38:26,509
 

1509
00:38:23,569 --> 00:38:29,419
 strong exception guarantees and that the

1510
00:38:26,499 --> 00:38:29,419
 

1511
00:38:26,509 --> 00:38:31,279
 standard library now follows and and

1512
00:38:29,409 --> 00:38:31,279
 

1513
00:38:29,419 --> 00:38:33,319
 this was Dave's work to figure out how

1514
00:38:31,269 --> 00:38:33,319
 

1515
00:38:31,279 --> 00:38:36,140
 exception handling would work with the

1516
00:38:33,309 --> 00:38:36,140
 

1517
00:38:33,319 --> 00:38:37,969
 standard library and just a few moments

1518
00:38:36,130 --> 00:38:37,969
 

1519
00:38:36,140 --> 00:38:40,549
 ago I told you right I had to review the

1520
00:38:37,959 --> 00:38:40,549
 

1521
00:38:37,969 --> 00:38:43,009
 code to make sure that it would work

1522
00:38:40,539 --> 00:38:43,009
 

1523
00:38:40,549 --> 00:38:45,079
 with with Adobe's with photoshop's

1524
00:38:42,999 --> 00:38:45,079
 

1525
00:38:43,009 --> 00:38:46,789
 exception handling mechanism and it was

1526
00:38:45,069 --> 00:38:46,789
 

1527
00:38:45,079 --> 00:38:48,259
 actually when you got into the

1528
00:38:46,779 --> 00:38:48,259
 

1529
00:38:46,789 --> 00:38:50,029
 containers and what happens if the

1530
00:38:48,249 --> 00:38:50,029
 

1531
00:38:48,259 --> 00:38:52,249
 constructor throws and things like that

1532
00:38:50,019 --> 00:38:52,249
 

1533
00:38:50,029 --> 00:38:56,269
 that got pretty hairy if you go back to

1534
00:38:52,239 --> 00:38:56,269
 

1535
00:38:52,249 --> 00:38:58,390
 the old old HP code base and I thought

1536
00:38:56,259 --> 00:38:58,390
 

1537
00:38:56,269 --> 00:39:01,579
 David did a brilliant job of kind of

1538
00:38:58,380 --> 00:39:01,579
 

1539
00:38:58,390 --> 00:39:04,279
 moving it in the problem into a

1540
00:39:01,569 --> 00:39:04,279
 

1541
00:39:01,579 --> 00:39:06,049
 mathematical setting where you could

1542
00:39:04,269 --> 00:39:06,049
 

1543
00:39:04,279 --> 00:39:07,969
 come up with a set of guarantees and you

1544
00:39:06,039 --> 00:39:07,969
 

1545
00:39:06,049 --> 00:39:09,169
 could actually reason about generic code

1546
00:39:07,959 --> 00:39:09,169
 

1547
00:39:07,969 --> 00:39:11,839
 and the presence of the exception

1548
00:39:09,159 --> 00:39:11,839
 

1549
00:39:09,169 --> 00:39:15,259
 handling so this was a fairly seminal

1550
00:39:11,829 --> 00:39:15,259
 

1551
00:39:11,839 --> 00:39:19,009
 piece of work this paper also got

1552
00:39:15,249 --> 00:39:19,009
 

1553
00:39:15,259 --> 00:39:23,599
 published this was co-authored by Alex

1554
00:39:18,999 --> 00:39:23,599
 

1555
00:39:19,009 --> 00:39:27,199
 Stepanov and this guy James dinner the

1556
00:39:23,589 --> 00:39:27,199
 

1557
00:39:23,599 --> 00:39:31,609
 fundamentals of generic programming okay

1558
00:39:27,189 --> 00:39:31,609
 

1559
00:39:27,199 --> 00:39:36,409
 so this paper was important for two

1560
00:39:31,599 --> 00:39:36,409
 

1561
00:39:31,609 --> 00:39:38,929
 reasons this line we call the set of

1562
00:39:36,399 --> 00:39:38,929
 

1563
00:39:36,409 --> 00:39:42,079
 axioms satisfied by a data type and a

1564
00:39:38,919 --> 00:39:42,079
 

1565
00:39:38,929 --> 00:39:45,650
 set of operations on it a concept okay

1566
00:39:42,069 --> 00:39:45,650
 

1567
00:39:42,079 --> 00:39:48,380
 so before that Alex had already refer to

1568
00:39:45,640 --> 00:39:48,380
 

1569
00:39:45,650 --> 00:39:51,650
 them as being two concepts as being

1570
00:39:48,370 --> 00:39:51,650
 

1571
00:39:48,380 --> 00:39:54,019
 things like a love algebraic structures

1572
00:39:51,640 --> 00:39:54,019
 

1573
00:39:51,650 --> 00:39:55,219
 akin to algebraic structures and his

1574
00:39:54,009 --> 00:39:55,219
 

1575
00:39:54,019 --> 00:39:57,319
 early work they were just called

1576
00:39:55,209 --> 00:39:57,319
 

1577
00:39:55,219 --> 00:40:03,199
 algebraic structures but he deviated

1578
00:39:57,309 --> 00:40:03,199
 

1579
00:39:57,319 --> 00:40:05,269
 that somewhat because mathematics

1580
00:40:03,189 --> 00:40:05,269
 

1581
00:40:03,199 --> 00:40:07,759
 doesn't have a notion of complexity and

1582
00:40:05,259 --> 00:40:07,759
 

1583
00:40:05,269 --> 00:40:10,219
 he thought that in in computer science

1584
00:40:07,749 --> 00:40:10,219
 

1585
00:40:07,759 --> 00:40:14,299
 you're dealing with with physical

1586
00:40:10,209 --> 00:40:14,299
 

1587
00:40:10,219 --> 00:40:16,849
 properties and so the structure itself

1588
00:40:14,289 --> 00:40:16,849
 

1589
00:40:14,299 --> 00:40:18,619
 has to encompass the complexity of the

1590
00:40:16,839 --> 00:40:18,619
 

1591
00:40:16,849 --> 00:40:20,089
 operations so that's why we're not

1592
00:40:18,609 --> 00:40:20,089
 

1593
00:40:18,619 --> 00:40:21,949
 talking about just an algebraic

1594
00:40:20,079 --> 00:40:21,949
 

1595
00:40:20,089 --> 00:40:24,019
 structure here okay

1596
00:40:21,939 --> 00:40:24,019
 

1597
00:40:21,949 --> 00:40:27,529
 and so they decided they needed a name

1598
00:40:24,009 --> 00:40:27,529
 

1599
00:40:24,019 --> 00:40:28,699
 for it Alex isn't sure I had a

1600
00:40:27,519 --> 00:40:28,699
 

1601
00:40:27,529 --> 00:40:31,360
 conversation with them a couple weeks

1602
00:40:28,689 --> 00:40:31,360
 

1603
00:40:28,699 --> 00:40:35,020
 ago whether or not the name

1604
00:40:31,350 --> 00:40:35,020
 

1605
00:40:31,360 --> 00:40:36,550
 was coined by himself or by James or by

1606
00:40:35,010 --> 00:40:36,550
 

1607
00:40:35,020 --> 00:40:38,740
 Dave Maass or he thinks that might have

1608
00:40:36,540 --> 00:40:38,740
 

1609
00:40:36,550 --> 00:40:40,570
 actually come about a little before this

1610
00:40:38,730 --> 00:40:40,570
 

1611
00:40:38,740 --> 00:40:42,870
 in the conversation he had with with Jim

1612
00:40:40,560 --> 00:40:42,870
 

1613
00:40:40,570 --> 00:40:45,520
 Messer and just got written down here

1614
00:40:42,860 --> 00:40:45,520
 

1615
00:40:42,870 --> 00:40:48,580
 but nevertheless this is where when we

1616
00:40:45,510 --> 00:40:48,580
 

1617
00:40:45,520 --> 00:40:53,310
 talk about C++ in concepts this is where

1618
00:40:48,570 --> 00:40:53,310
 

1619
00:40:48,580 --> 00:40:57,460
 that idea originated was in this paper

1620
00:40:53,300 --> 00:40:57,460
 

1621
00:40:53,310 --> 00:41:00,910
 the other thing that happened was this

1622
00:40:57,450 --> 00:41:00,910
 

1623
00:40:57,460 --> 00:41:03,460
 quote and this is the first place where

1624
00:41:00,900 --> 00:41:03,460
 

1625
00:41:00,910 --> 00:41:09,610
 we see the term regular type and a

1626
00:41:03,450 --> 00:41:09,610
 

1627
00:41:03,460 --> 00:41:11,830
 regular type defined okay so the idea of

1628
00:41:09,600 --> 00:41:11,830
 

1629
00:41:09,610 --> 00:41:14,440
 a regular type had already kind of

1630
00:41:11,820 --> 00:41:14,440
 

1631
00:41:11,830 --> 00:41:18,190
 existed in STL I always say whenever you

1632
00:41:14,430 --> 00:41:18,190
 

1633
00:41:14,440 --> 00:41:21,040
 see a capital T and STL what Alex meant

1634
00:41:18,180 --> 00:41:21,040
 

1635
00:41:18,190 --> 00:41:22,930
 there was a regular type but it hadn't

1636
00:41:21,030 --> 00:41:22,930
 

1637
00:41:21,040 --> 00:41:25,720
 really been formally defined what that

1638
00:41:22,920 --> 00:41:25,720
 

1639
00:41:22,930 --> 00:41:30,040
 meant and so this paper defined what a

1640
00:41:25,710 --> 00:41:30,040
 

1641
00:41:25,720 --> 00:41:32,920
 regular type is and this came out after

1642
00:41:30,030 --> 00:41:32,920
 

1643
00:41:30,040 --> 00:41:35,380
 the 98 standard right and yet this is

1644
00:41:32,910 --> 00:41:35,380
 

1645
00:41:32,920 --> 00:41:41,470
 still part of our regular lexicon now in

1646
00:41:35,370 --> 00:41:41,470
 

1647
00:41:35,380 --> 00:41:51,220
 C++ and now we can skip ahead a little

1648
00:41:41,460 --> 00:41:51,220
 

1649
00:41:41,470 --> 00:41:57,220
 bit to 2002 so what happened in 2002 so

1650
00:41:51,210 --> 00:41:57,220
 

1651
00:41:51,220 --> 00:42:01,210
 so Alex had been promoted he was a VP at

1652
00:41:57,210 --> 00:42:01,210
 

1653
00:41:57,220 --> 00:42:03,490
 Compaq and chief scientist at Compaq and

1654
00:42:01,200 --> 00:42:03,490
 

1655
00:42:01,210 --> 00:42:05,200
 when I talked to him at the time he said

1656
00:42:03,480 --> 00:42:05,200
 

1657
00:42:03,490 --> 00:42:06,940
 basically he was kind of in charge of

1658
00:42:05,190 --> 00:42:06,940
 

1659
00:42:05,200 --> 00:42:09,330
 mergers and acquisitions he wasn't

1660
00:42:06,930 --> 00:42:09,330
 

1661
00:42:06,940 --> 00:42:11,980
 really in charge of engineering anymore

1662
00:42:09,320 --> 00:42:11,980
 

1663
00:42:09,330 --> 00:42:14,350
 compact itself was being acquired by HP

1664
00:42:11,970 --> 00:42:14,350
 

1665
00:42:11,980 --> 00:42:20,050
 so Alex was about to loop back in his

1666
00:42:14,340 --> 00:42:20,050
 

1667
00:42:14,350 --> 00:42:23,110
 career to HP but this guy his name is

1668
00:42:20,040 --> 00:42:23,110
 

1669
00:42:20,050 --> 00:42:26,440
 Larry miss center he had worked with

1670
00:42:23,100 --> 00:42:26,440
 

1671
00:42:23,110 --> 00:42:29,800
 Alex at Bell Labs and had gone to work

1672
00:42:26,430 --> 00:42:29,800
 

1673
00:42:26,440 --> 00:42:32,260
 and Adobe's research group and at that

1674
00:42:29,790 --> 00:42:32,260
 

1675
00:42:29,800 --> 00:42:36,100
 time I was also working in Adobe's

1676
00:42:32,250 --> 00:42:36,100
 

1677
00:42:32,260 --> 00:42:38,560
 research group and so so I was friends

1678
00:42:36,090 --> 00:42:38,560
 

1679
00:42:36,100 --> 00:42:43,540
 with Larry as well still friends with

1680
00:42:38,550 --> 00:42:43,540
 

1681
00:42:38,560 --> 00:42:44,690
 Larry and Larry invited Alex to come to

1682
00:42:43,530 --> 00:42:44,690
 

1683
00:42:43,540 --> 00:42:49,040
 Adobe and

1684
00:42:44,680 --> 00:42:49,040
 

1685
00:42:44,690 --> 00:42:53,780
 a talk right so Alex comes and he gives

1686
00:42:49,030 --> 00:42:53,780
 

1687
00:42:49,040 --> 00:42:56,599
 a talk loosely about STL and after the

1688
00:42:53,770 --> 00:42:56,599
 

1689
00:42:53,780 --> 00:42:59,150
 talk I strike up a conversation with

1690
00:42:56,589 --> 00:42:59,150
 

1691
00:42:56,599 --> 00:43:00,530
 them and we end up going up to my office

1692
00:42:59,140 --> 00:43:00,530
 

1693
00:42:59,150 --> 00:43:05,000
 so I can show him what I'm working on

1694
00:43:00,520 --> 00:43:05,000
 

1695
00:43:00,530 --> 00:43:07,160
 and we probably ended up talking for at

1696
00:43:04,990 --> 00:43:07,160
 

1697
00:43:05,000 --> 00:43:10,040
 least three hours maybe four hours just

1698
00:43:07,150 --> 00:43:10,040
 

1699
00:43:07,160 --> 00:43:12,500
 chatting away and at the end of the talk

1700
00:43:10,030 --> 00:43:12,500
 

1701
00:43:10,040 --> 00:43:14,660
 Alex says you know I really wish that I

1702
00:43:12,490 --> 00:43:14,660
 

1703
00:43:12,500 --> 00:43:17,750
 could do this again that I could just be

1704
00:43:14,650 --> 00:43:17,750
 

1705
00:43:14,660 --> 00:43:19,579
 an engineer again and I said why don't

1706
00:43:17,740 --> 00:43:19,579
 

1707
00:43:17,750 --> 00:43:22,579
 you okay

1708
00:43:19,569 --> 00:43:22,579
 

1709
00:43:19,579 --> 00:43:26,329
 well about two weeks went by and Alex my

1710
00:43:22,569 --> 00:43:26,329
 

1711
00:43:22,579 --> 00:43:29,300
 phone rang I pick it up it was Alex and

1712
00:43:26,319 --> 00:43:29,300
 

1713
00:43:26,329 --> 00:43:31,339
 he said so I thought about what you said

1714
00:43:29,290 --> 00:43:31,339
 

1715
00:43:29,300 --> 00:43:32,599
 and I decided I want to go back and be

1716
00:43:31,329 --> 00:43:32,599
 

1717
00:43:31,339 --> 00:43:34,550
 an engineer

1718
00:43:32,589 --> 00:43:34,550
 

1719
00:43:32,599 --> 00:43:36,170
 are there any positions open it Adobe

1720
00:43:34,540 --> 00:43:36,170
 

1721
00:43:34,550 --> 00:43:41,060
 you okay

1722
00:43:36,160 --> 00:43:41,060
 

1723
00:43:36,170 --> 00:43:45,920
 so I did manage to get him hired into a

1724
00:43:41,050 --> 00:43:45,920
 

1725
00:43:41,060 --> 00:43:48,349
 group he got fired from that group he

1726
00:43:45,910 --> 00:43:48,349
 

1727
00:43:45,920 --> 00:43:50,450
 got rehired and I was told that a

1728
00:43:48,339 --> 00:43:50,450
 

1729
00:43:48,349 --> 00:43:56,270
 condition of his rehire was that I be

1730
00:43:50,440 --> 00:43:56,270
 

1731
00:43:50,450 --> 00:44:00,829
 his boss so that's how Adobe software

1732
00:43:56,260 --> 00:44:00,829
 

1733
00:43:56,270 --> 00:44:05,119
 technology lab came about and a very

1734
00:44:00,819 --> 00:44:05,119
 

1735
00:44:00,829 --> 00:44:07,490
 short summary and we we ran the software

1736
00:44:05,109 --> 00:44:07,490
 

1737
00:44:05,119 --> 00:44:10,599
 technology lab for just about eight

1738
00:44:07,480 --> 00:44:10,599
 

1739
00:44:07,490 --> 00:44:12,980
 years right and so I was Alex's boss

1740
00:44:10,589 --> 00:44:12,980
 

1741
00:44:10,599 --> 00:44:16,220
 longer than anybody in his entire career

1742
00:44:12,970 --> 00:44:16,220
 

1743
00:44:12,980 --> 00:44:19,970
 which is is quite tha quite the

1744
00:44:16,210 --> 00:44:19,970
 

1745
00:44:16,220 --> 00:44:27,650
 accomplishment I think yeah the acronym

1746
00:44:19,960 --> 00:44:27,650
 

1747
00:44:19,970 --> 00:44:31,490
 is very deliberate so when Alex did his

1748
00:44:27,640 --> 00:44:31,490
 

1749
00:44:27,650 --> 00:44:33,460
 work on STL that was done in Hewlett

1750
00:44:31,480 --> 00:44:33,460
 

1751
00:44:31,490 --> 00:44:37,119
 Packard's a software technology lab

1752
00:44:33,450 --> 00:44:37,119
 

1753
00:44:33,460 --> 00:44:40,190
 which is why it's actually called STL

1754
00:44:37,109 --> 00:44:40,190
 

1755
00:44:37,119 --> 00:44:42,200
 and people have also said you know it's

1756
00:44:40,180 --> 00:44:42,200
 

1757
00:44:40,190 --> 00:44:46,970
 STL stands for standard template library

1758
00:44:42,190 --> 00:44:46,970
 

1759
00:44:42,200 --> 00:44:49,130
 sure people have also said it stands for

1760
00:44:46,960 --> 00:44:49,130
 

1761
00:44:46,970 --> 00:44:53,930
 stepping off and Lee bit of a stretch

1762
00:44:49,120 --> 00:44:53,930
 

1763
00:44:49,130 --> 00:44:56,309
 but okay so yes so this was very much

1764
00:44:53,920 --> 00:44:56,309
 

1765
00:44:53,930 --> 00:44:59,680
 much an

1766
00:44:56,299 --> 00:44:59,680
 

1767
00:44:56,309 --> 00:45:05,200
 the HP software technology lab or STL

1768
00:44:59,670 --> 00:45:05,200
 

1769
00:44:59,680 --> 00:45:07,900
 came from so well alex is working in the

1770
00:45:05,190 --> 00:45:07,900
 

1771
00:45:05,200 --> 00:45:10,869
 software technology lab he's teaching a

1772
00:45:07,890 --> 00:45:10,869
 

1773
00:45:07,900 --> 00:45:14,710
 set of courses to the Adobe employees

1774
00:45:10,859 --> 00:45:14,710
 

1775
00:45:10,869 --> 00:45:18,190
 and one day he is bemoaning to this guy

1776
00:45:14,700 --> 00:45:18,190
 

1777
00:45:14,710 --> 00:45:21,549
 his name's Greg Gilley he was my boss at

1778
00:45:18,180 --> 00:45:21,549
 

1779
00:45:18,190 --> 00:45:24,910
 the time so alex is Bo moaning to Greg

1780
00:45:21,539 --> 00:45:24,910
 

1781
00:45:21,549 --> 00:45:27,700
 that that he's done all of this work on

1782
00:45:24,900 --> 00:45:27,700
 

1783
00:45:24,910 --> 00:45:30,609
 generic programming and nobody

1784
00:45:27,690 --> 00:45:30,609
 

1785
00:45:27,700 --> 00:45:35,020
 understands it right

1786
00:45:30,599 --> 00:45:35,020
 

1787
00:45:30,609 --> 00:45:37,539
 nobody gets him type of thing and Greg

1788
00:45:35,010 --> 00:45:37,539
 

1789
00:45:35,020 --> 00:45:40,089
 makes the comment of course not you

1790
00:45:37,529 --> 00:45:40,089
 

1791
00:45:37,539 --> 00:45:45,960
 never wrote it down okay

1792
00:45:40,079 --> 00:45:45,960
 

1793
00:45:40,089 --> 00:45:45,960
 so that says Alex off to write a book

1794
00:45:47,000 --> 00:45:47,000
 

1795
00:45:47,010 --> 00:45:55,059
 the first big draft of this book

1796
00:45:50,660 --> 00:45:55,059
 

1797
00:45:50,670 --> 00:45:57,160
 possible to see down here notes on the

1798
00:45:55,049 --> 00:45:57,160
 

1799
00:45:55,059 --> 00:46:01,180
 foundation of programming you can

1800
00:45:57,150 --> 00:46:01,180
 

1801
00:45:57,160 --> 00:46:03,789
 download this from Alex's website this

1802
00:46:01,170 --> 00:46:03,789
 

1803
00:46:01,180 --> 00:46:05,079
 was a collaboration between Alex and

1804
00:46:03,779 --> 00:46:05,079
 

1805
00:46:03,789 --> 00:46:07,510
 somebody else on my team

1806
00:46:05,069 --> 00:46:07,510
 

1807
00:46:05,079 --> 00:46:13,720
 Matt Marcus that's a picture of Matt and

1808
00:46:07,500 --> 00:46:13,720
 

1809
00:46:07,510 --> 00:46:16,539
 Matt son Kai we also refer to this book

1810
00:46:13,710 --> 00:46:16,539
 

1811
00:46:13,720 --> 00:46:20,680
 as Pam which was stood for programming

1812
00:46:16,529 --> 00:46:20,680
 

1813
00:46:16,539 --> 00:46:22,180
 his mathematics and so so we got to the

1814
00:46:20,670 --> 00:46:22,180
 

1815
00:46:20,680 --> 00:46:27,099
 point where the book was maybe

1816
00:46:22,170 --> 00:46:27,099
 

1817
00:46:22,180 --> 00:46:29,559
 two-thirds complete and Alex and Matt

1818
00:46:27,089 --> 00:46:29,559
 

1819
00:46:27,099 --> 00:46:30,460
 had a strong disagreement about

1820
00:46:29,549 --> 00:46:30,460
 

1821
00:46:29,559 --> 00:46:32,589
 direction

1822
00:46:30,450 --> 00:46:32,589
 

1823
00:46:30,460 --> 00:46:38,650
 and that turned into a bit of a blow up

1824
00:46:32,579 --> 00:46:38,650
 

1825
00:46:32,589 --> 00:46:42,569
 and the book was scrapped quite

1826
00:46:38,640 --> 00:46:42,569
 

1827
00:46:38,650 --> 00:46:46,119
 unfortunate but that led to Alex

1828
00:46:42,559 --> 00:46:46,119
 

1829
00:46:42,569 --> 00:46:48,309
 switching his collaboration to somebody

1830
00:46:46,109 --> 00:46:48,309
 

1831
00:46:46,119 --> 00:46:51,869
 else on my team somebody named Paul

1832
00:46:48,299 --> 00:46:51,869
 

1833
00:46:48,309 --> 00:46:54,940
 mcjones and that led to this book

1834
00:46:51,859 --> 00:46:54,940
 

1835
00:46:51,869 --> 00:46:59,160
 elements of programming with Alex and

1836
00:46:54,930 --> 00:46:59,160
 

1837
00:46:54,940 --> 00:46:59,160
 Paul there was a picture hall

1838
00:46:59,539 --> 00:46:59,539
 

1839
00:46:59,549 --> 00:47:07,599
 how many people know Paul for anything

1840
00:47:02,039 --> 00:47:07,599
 

1841
00:47:02,049 --> 00:47:09,180
 other than this book okay so nobody one

1842
00:47:07,589 --> 00:47:09,180
 

1843
00:47:07,599 --> 00:47:12,540
 person up here

1844
00:47:09,170 --> 00:47:12,540
 

1845
00:47:09,180 --> 00:47:14,220
 so Paul's a great great computer

1846
00:47:12,530 --> 00:47:14,220
 

1847
00:47:12,540 --> 00:47:18,540
 scientist in his own right

1848
00:47:14,210 --> 00:47:18,540
 

1849
00:47:14,220 --> 00:47:22,470
 he worked at IBM with John Backus he

1850
00:47:18,530 --> 00:47:22,470
 

1851
00:47:18,540 --> 00:47:24,330
 worked with John Backus on system R

1852
00:47:22,460 --> 00:47:24,330
 

1853
00:47:22,470 --> 00:47:30,120
 which was one of the first relational

1854
00:47:24,320 --> 00:47:30,120
 

1855
00:47:24,330 --> 00:47:31,770
 databases he worked on modulo 3 which

1856
00:47:30,110 --> 00:47:31,770
 

1857
00:47:30,120 --> 00:47:36,630
 was a language to be a successor to

1858
00:47:31,760 --> 00:47:36,630
 

1859
00:47:31,770 --> 00:47:40,350
 modulo 2 so he's he's a brilliant

1860
00:47:36,620 --> 00:47:40,350
 

1861
00:47:36,630 --> 00:47:44,400
 individual in his own right and he and

1862
00:47:40,340 --> 00:47:44,400
 

1863
00:47:40,350 --> 00:47:47,490
 Alex set out to write this book how many

1864
00:47:44,390 --> 00:47:47,490
 

1865
00:47:44,400 --> 00:47:50,280
 people have seen this book many of you

1866
00:47:47,480 --> 00:47:50,280
 

1867
00:47:47,490 --> 00:47:53,190
 if you don't like after this talk go on

1868
00:47:50,270 --> 00:47:53,190
 

1869
00:47:50,280 --> 00:47:55,770
 Amazon buy a copy of this book work your

1870
00:47:53,180 --> 00:47:55,770
 

1871
00:47:53,190 --> 00:47:57,930
 way through this book emphasis on work

1872
00:47:55,760 --> 00:47:57,930
 

1873
00:47:55,770 --> 00:48:00,810
 this is not a light reading book it's

1874
00:47:57,920 --> 00:48:00,810
 

1875
00:47:57,930 --> 00:48:03,540
 only about 200 pages long but it is a

1876
00:48:00,800 --> 00:48:03,540
 

1877
00:48:00,810 --> 00:48:05,850
 math text right it is a math text about

1878
00:48:03,530 --> 00:48:05,850
 

1879
00:48:03,540 --> 00:48:07,680
 programming and so it's going to be a

1880
00:48:05,840 --> 00:48:07,680
 

1881
00:48:05,850 --> 00:48:11,390
 struggle there's lots of theorems and

1882
00:48:07,670 --> 00:48:11,390
 

1883
00:48:07,680 --> 00:48:15,120
 lots of exercises to prove the theorems

1884
00:48:11,380 --> 00:48:15,120
 

1885
00:48:11,390 --> 00:48:17,790
 it's a it's a beautiful book this book

1886
00:48:15,110 --> 00:48:17,790
 

1887
00:48:15,120 --> 00:48:20,640
 is very much the encapsulation of what

1888
00:48:17,780 --> 00:48:20,640
 

1889
00:48:17,790 --> 00:48:24,150
 is generic programming it's also notable

1890
00:48:20,630 --> 00:48:24,150
 

1891
00:48:20,640 --> 00:48:25,920
 for one particular reason

1892
00:48:24,140 --> 00:48:25,920
 

1893
00:48:24,150 --> 00:48:29,970
 the term generic programming never

1894
00:48:25,910 --> 00:48:29,970
 

1895
00:48:25,920 --> 00:48:35,040
 appears anywhere in this book anybody

1896
00:48:29,960 --> 00:48:35,040
 

1897
00:48:29,970 --> 00:48:37,680
 have a guess as to why so so alex was a

1898
00:48:35,030 --> 00:48:37,680
 

1899
00:48:35,040 --> 00:48:39,540
 bit discouraged at the time when he sat

1900
00:48:37,670 --> 00:48:39,540
 

1901
00:48:37,680 --> 00:48:41,550
 down to write this book he thought that

1902
00:48:39,530 --> 00:48:41,550
 

1903
00:48:39,540 --> 00:48:43,140
 the term generic programming had come to

1904
00:48:41,540 --> 00:48:43,140
 

1905
00:48:41,550 --> 00:48:46,050
 mean something other than what he

1906
00:48:43,130 --> 00:48:46,050
 

1907
00:48:43,140 --> 00:48:48,330
 intended it to mean right that somehow

1908
00:48:46,040 --> 00:48:48,330
 

1909
00:48:46,050 --> 00:48:52,410
 generic programming had become

1910
00:48:48,320 --> 00:48:52,410
 

1911
00:48:48,330 --> 00:48:59,160
 associated with type and category theory

1912
00:48:52,400 --> 00:48:59,160
 

1913
00:48:52,410 --> 00:49:00,810
 and and with a meta programming right

1914
00:48:59,150 --> 00:49:00,810
 

1915
00:48:59,160 --> 00:49:03,510
 because the STL used meta programming

1916
00:49:00,800 --> 00:49:03,510
 

1917
00:49:00,810 --> 00:49:05,280
 but the STL wasn't about meta

1918
00:49:03,500 --> 00:49:05,280
 

1919
00:49:03,510 --> 00:49:07,320
 programming it just happened to use some

1920
00:49:05,270 --> 00:49:07,320
 

1921
00:49:05,280 --> 00:49:10,050
 meta programming as a means to the to an

1922
00:49:07,310 --> 00:49:10,050
 

1923
00:49:07,320 --> 00:49:11,610
 end right and so alex thought the

1924
00:49:10,040 --> 00:49:11,610
 

1925
00:49:10,050 --> 00:49:12,510
 generic programming had come to mean

1926
00:49:11,600 --> 00:49:12,510
 

1927
00:49:11,610 --> 00:49:15,900
 something else

1928
00:49:12,500 --> 00:49:15,900
 

1929
00:49:12,510 --> 00:49:19,650
 and and he didn't like what it had come

1930
00:49:15,890 --> 00:49:19,650
 

1931
00:49:15,900 --> 00:49:20,880
 to mean and so so this book was him

1932
00:49:19,640 --> 00:49:20,880
 

1933
00:49:19,650 --> 00:49:22,500
 distancing himself

1934
00:49:20,870 --> 00:49:22,500
 

1935
00:49:20,880 --> 00:49:31,050
 a little bit and trying to go back and

1936
00:49:22,490 --> 00:49:31,050
 

1937
00:49:22,500 --> 00:49:34,980
 say no this is what I meant so this is

1938
00:49:31,040 --> 00:49:34,980
 

1939
00:49:31,050 --> 00:49:39,440
 one of the algorithms from the book this

1940
00:49:34,970 --> 00:49:39,440
 

1941
00:49:34,980 --> 00:49:42,270
 is one of the partition algorithms

1942
00:49:39,430 --> 00:49:42,270
 

1943
00:49:39,440 --> 00:49:44,430
 semi-stable partition it's developed

1944
00:49:42,260 --> 00:49:44,430
 

1945
00:49:42,270 --> 00:49:46,860
 within the book and if you go back and

1946
00:49:44,420 --> 00:49:46,860
 

1947
00:49:44,430 --> 00:49:48,570
 you compare this algorithm to the

1948
00:49:46,850 --> 00:49:48,570
 

1949
00:49:46,860 --> 00:49:50,400
 original partition algorithm in the old

1950
00:49:48,560 --> 00:49:50,400
 

1951
00:49:48,570 --> 00:49:55,040
 ada book you can kind of see how far

1952
00:49:50,390 --> 00:49:55,040
 

1953
00:49:50,400 --> 00:49:57,750
 along things have come and for one thing

1954
00:49:55,030 --> 00:49:57,750
 

1955
00:49:55,040 --> 00:50:00,120
 this algorithm you see how it's built on

1956
00:49:57,740 --> 00:50:00,120
 

1957
00:49:57,750 --> 00:50:03,780
 top of other algorithms we have find and

1958
00:50:00,110 --> 00:50:03,780
 

1959
00:50:00,120 --> 00:50:08,870
 find if not in here putting the pieces

1960
00:50:03,770 --> 00:50:08,870
 

1961
00:50:03,780 --> 00:50:13,910
 together the other thing of a note is

1962
00:50:08,860 --> 00:50:13,910
 

1963
00:50:08,870 --> 00:50:19,680
 this line right here requires right

1964
00:50:13,900 --> 00:50:19,680
 

1965
00:50:13,910 --> 00:50:27,870
 right that didn't exist in C++ right not

1966
00:50:19,670 --> 00:50:27,870
 

1967
00:50:19,680 --> 00:50:30,260
 yet that line so here's an appendix from

1968
00:50:27,860 --> 00:50:30,260
 

1969
00:50:27,870 --> 00:50:30,260
 the book

1970
00:50:31,520 --> 00:50:31,520
 

1971
00:50:31,530 --> 00:50:41,580
 I guess this gives me a stricter index

1972
00:50:35,510 --> 00:50:41,580
 

1973
00:50:35,520 --> 00:50:43,920
 of 1 so brn and I wrote wrote this

1974
00:50:41,570 --> 00:50:43,920
 

1975
00:50:41,580 --> 00:50:48,120
 appendix for the book it's 7 pages in

1976
00:50:43,910 --> 00:50:48,120
 

1977
00:50:43,920 --> 00:50:51,510
 the book it describes the language used

1978
00:50:48,110 --> 00:50:51,510
 

1979
00:50:48,120 --> 00:50:53,310
 within the book and it describes it the

1980
00:50:51,500 --> 00:50:53,310
 

1981
00:50:51,510 --> 00:50:56,850
 opening paragraph here says this is a

1982
00:50:53,300 --> 00:50:56,850
 

1983
00:50:53,310 --> 00:50:59,100
 subset of C++ used in the book well

1984
00:50:56,840 --> 00:50:59,100
 

1985
00:50:56,850 --> 00:51:00,930
 that's actually a lie it's not a subset

1986
00:50:59,090 --> 00:51:00,930
 

1987
00:50:59,100 --> 00:51:03,150
 of C++ it's a bit of a different

1988
00:51:00,920 --> 00:51:03,150
 

1989
00:51:00,930 --> 00:51:05,900
 language in its own right ok

1990
00:51:03,140 --> 00:51:05,900
 

1991
00:51:03,150 --> 00:51:08,610
 it includes things like like requires

1992
00:51:05,890 --> 00:51:08,610
 

1993
00:51:05,900 --> 00:51:10,560
 types within this language or at the

1994
00:51:08,600 --> 00:51:10,560
 

1995
00:51:08,610 --> 00:51:12,000
 same level as objects so in theory

1996
00:51:10,550 --> 00:51:12,000
 

1997
00:51:10,560 --> 00:51:15,540
 within this language you could write

1998
00:51:11,990 --> 00:51:15,540
 

1999
00:51:12,000 --> 00:51:17,160
 code to manipulate types in the same way

2000
00:51:15,530 --> 00:51:17,160
 

2001
00:51:15,540 --> 00:51:19,080
 that you would write code to manipulate

2002
00:51:17,150 --> 00:51:19,080
 

2003
00:51:17,160 --> 00:51:21,180
 objects so it would be completely

2004
00:51:19,070 --> 00:51:21,180
 

2005
00:51:19,080 --> 00:51:22,920
 legitimate in this language to iterate

2006
00:51:21,170 --> 00:51:22,920
 

2007
00:51:21,180 --> 00:51:26,630
 over all the members of a struct for

2008
00:51:22,910 --> 00:51:26,630
 

2009
00:51:22,920 --> 00:51:26,630
 example ok

2010
00:51:27,770 --> 00:51:27,770
 

2011
00:51:27,780 --> 00:51:31,950
 I happen to think it's a it's a fairly

2012
00:51:29,600 --> 00:51:31,950
 

2013
00:51:29,610 --> 00:51:40,380
 beautiful little piece of work then we

2014
00:51:31,940 --> 00:51:40,380
 

2015
00:51:31,950 --> 00:51:43,560
 put together so down here is where you

2016
00:51:40,370 --> 00:51:43,560
 

2017
00:51:40,380 --> 00:51:52,140
 see the grammar for constraints using

2018
00:51:43,550 --> 00:51:52,140
 

2019
00:51:43,560 --> 00:51:57,090
 required clauses right now concepts

2020
00:51:52,130 --> 00:51:57,090
 

2021
00:51:52,140 --> 00:52:00,750
 within the book are not described within

2022
00:51:57,080 --> 00:52:00,750
 

2023
00:51:57,090 --> 00:52:03,810
 code they're described as mathematics so

2024
00:52:00,740 --> 00:52:03,810
 

2025
00:52:00,750 --> 00:52:06,180
 in elements of programming this is the

2026
00:52:03,800 --> 00:52:06,180
 

2027
00:52:03,810 --> 00:52:10,080
 description of a concept okay

2028
00:52:06,170 --> 00:52:10,080
 

2029
00:52:06,180 --> 00:52:12,180
 so so we have a mathematic notation to

2030
00:52:10,070 --> 00:52:12,180
 

2031
00:52:10,080 --> 00:52:13,500
 describe concepts much in the same way

2032
00:52:12,170 --> 00:52:13,500
 

2033
00:52:12,180 --> 00:52:20,610
 that you would describe an algebraic

2034
00:52:13,490 --> 00:52:20,610
 

2035
00:52:13,500 --> 00:52:27,630
 structure in mathematics and that brings

2036
00:52:20,600 --> 00:52:27,630
 

2037
00:52:20,610 --> 00:52:29,610
 us up to 2006 and this paper concept

2038
00:52:27,620 --> 00:52:29,610
 

2039
00:52:27,630 --> 00:52:32,310
 linguistic support for generic

2040
00:52:29,600 --> 00:52:32,310
 

2041
00:52:29,610 --> 00:52:35,340
 programming okay so now there's a

2042
00:52:32,300 --> 00:52:35,340
 

2043
00:52:32,310 --> 00:52:37,770
 growing effort to put concepts into C++

2044
00:52:35,330 --> 00:52:37,770
 

2045
00:52:35,340 --> 00:52:40,410
 and there were actually two independent

2046
00:52:37,760 --> 00:52:40,410
 

2047
00:52:37,770 --> 00:52:42,780
 efforts going on to do this there was

2048
00:52:40,400 --> 00:52:42,780
 

2049
00:52:40,410 --> 00:52:46,200
 the Texas A&M effort led by Baroness

2050
00:52:42,770 --> 00:52:46,200
 

2051
00:52:42,780 --> 00:52:48,060
 Tristram and his team yeah Jana was a

2052
00:52:46,190 --> 00:52:48,060
 

2053
00:52:46,200 --> 00:52:52,860
 professor at Texas A&M for people who

2054
00:52:48,050 --> 00:52:52,860
 

2055
00:52:48,060 --> 00:52:55,100
 don't know and Andrew Lum stain who was

2056
00:52:52,850 --> 00:52:55,100
 

2057
00:52:52,860 --> 00:52:59,670
 a professor at Indiana University and

2058
00:52:55,090 --> 00:52:59,670
 

2059
00:52:55,100 --> 00:53:01,650
 his team they had done lots of work in

2060
00:52:59,660 --> 00:53:01,650
 

2061
00:52:59,670 --> 00:53:03,960
 things like the blues graph library and

2062
00:53:01,640 --> 00:53:03,960
 

2063
00:53:01,650 --> 00:53:06,930
 lots of interesting work engineering

2064
00:53:03,950 --> 00:53:06,930
 

2065
00:53:03,960 --> 00:53:10,590
 programming and so these are some of the

2066
00:53:06,920 --> 00:53:10,590
 

2067
00:53:06,930 --> 00:53:13,430
 people here this is Doug gregor Doug

2068
00:53:10,580 --> 00:53:13,430
 

2069
00:53:10,590 --> 00:53:17,230
 Gregor wrote an implementation of

2070
00:53:13,420 --> 00:53:17,230
 

2071
00:53:13,430 --> 00:53:18,800
 concepts in this time frame for GCC and

2072
00:53:17,220 --> 00:53:18,800
 

2073
00:53:17,230 --> 00:53:22,650
[Music]

2074
00:53:18,790 --> 00:53:22,650
 

2075
00:53:18,800 --> 00:53:27,600
 later left to work on Swift this is

2076
00:53:22,640 --> 00:53:27,600
 

2077
00:53:22,650 --> 00:53:30,930
 yucca RV yahko was a professor at this

2078
00:53:27,590 --> 00:53:30,930
 

2079
00:53:27,600 --> 00:53:34,380
 time at Texas A&M and yonkos the person

2080
00:53:30,920 --> 00:53:34,380
 

2081
00:53:30,930 --> 00:53:36,540
 who is responsible for lambdas in C++

2082
00:53:34,370 --> 00:53:36,540
 

2083
00:53:34,380 --> 00:53:40,920
 C++ 11 and he wrote the lambda library

2084
00:53:36,530 --> 00:53:40,920
 

2085
00:53:36,540 --> 00:53:42,870
 for boost this is Jeremy seek

2086
00:53:40,910 --> 00:53:42,870
 

2087
00:53:40,920 --> 00:53:47,640
 done much of the work on the boost graph

2088
00:53:42,860 --> 00:53:47,640
 

2089
00:53:42,870 --> 00:53:50,850
 library out of Indiana this is Gabby

2090
00:53:47,630 --> 00:53:50,850
 

2091
00:53:47,640 --> 00:53:53,910
 Gabrielle Reece Gabby is now responsible

2092
00:53:50,840 --> 00:53:53,910
 

2093
00:53:50,850 --> 00:53:58,920
 for doing the module the module work in

2094
00:53:53,900 --> 00:53:58,920
 

2095
00:53:53,910 --> 00:54:03,750
 C++ and Gabby worked with Garnett at

2096
00:53:58,910 --> 00:54:03,750
 

2097
00:53:58,920 --> 00:54:05,310
 Texas A&M and this is Andrew Lum stain I

2098
00:54:03,740 --> 00:54:05,310
 

2099
00:54:03,750 --> 00:54:06,690
 like this picture of him this is him in

2100
00:54:05,300 --> 00:54:06,690
 

2101
00:54:05,310 --> 00:54:11,070
 a guitar workshop

2102
00:54:06,680 --> 00:54:11,070
 

2103
00:54:06,690 --> 00:54:14,490
 he likes building guitars but he was the

2104
00:54:11,060 --> 00:54:14,490
 

2105
00:54:11,070 --> 00:54:16,680
 lead of the team at Indiana University

2106
00:54:14,480 --> 00:54:16,680
 

2107
00:54:14,490 --> 00:54:18,300
 and we already saw a picture of Vienna

2108
00:54:16,670 --> 00:54:18,300
 

2109
00:54:16,680 --> 00:54:20,790
 and so Bjorn is one of the other Koch

2110
00:54:18,290 --> 00:54:20,790
 

2111
00:54:18,300 --> 00:54:22,830
 papers on this so this paper was these

2112
00:54:20,780 --> 00:54:22,830
 

2113
00:54:20,790 --> 00:54:24,510
 two teams trying to come together they

2114
00:54:22,820 --> 00:54:24,510
 

2115
00:54:22,830 --> 00:54:27,270
 had two competing proposals and the

2116
00:54:24,500 --> 00:54:27,270
 

2117
00:54:24,510 --> 00:54:28,560
 standard committee had said has said we

2118
00:54:27,260 --> 00:54:28,560
 

2119
00:54:27,270 --> 00:54:30,510
 don't know what to do with this you guys

2120
00:54:28,550 --> 00:54:30,510
 

2121
00:54:28,560 --> 00:54:33,000
 have two different different views of

2122
00:54:30,500 --> 00:54:33,000
 

2123
00:54:30,510 --> 00:54:34,980
 the same system we don't know how to

2124
00:54:32,990 --> 00:54:34,980
 

2125
00:54:33,000 --> 00:54:36,630
 move forward you guys are the expert get

2126
00:54:34,970 --> 00:54:36,630
 

2127
00:54:34,980 --> 00:54:38,760
 in one room come up with a unified

2128
00:54:36,620 --> 00:54:38,760
 

2129
00:54:36,630 --> 00:54:41,520
 proposal so this was the unified

2130
00:54:38,750 --> 00:54:41,520
 

2131
00:54:38,760 --> 00:54:44,120
 proposal a huge amount of work and very

2132
00:54:41,510 --> 00:54:44,120
 

2133
00:54:41,520 --> 00:54:48,120
 contentious between these two teams

2134
00:54:44,110 --> 00:54:48,120
 

2135
00:54:44,120 --> 00:54:49,860
 and 2011 came about and of course

2136
00:54:48,110 --> 00:54:49,860
 

2137
00:54:48,120 --> 00:54:52,440
 because these guys had come together and

2138
00:54:49,850 --> 00:54:52,440
 

2139
00:54:49,860 --> 00:54:53,430
 created this unified unified proposal it

2140
00:54:52,430 --> 00:54:53,430
 

2141
00:54:52,440 --> 00:54:55,530
 was very successful

2142
00:54:53,420 --> 00:54:55,530
 

2143
00:54:53,430 --> 00:55:02,640
 right I mean now we have concepts in C++

2144
00:54:55,520 --> 00:55:02,640
 

2145
00:54:55,530 --> 00:55:08,880
 11 no we don't I basically collapsed

2146
00:55:02,630 --> 00:55:08,880
 

2147
00:55:02,640 --> 00:55:12,030
 under its under its own weight right so

2148
00:55:08,870 --> 00:55:12,030
 

2149
00:55:08,880 --> 00:55:13,590
 that brought us to 2012 right there's a

2150
00:55:12,020 --> 00:55:13,590
 

2151
00:55:12,030 --> 00:55:15,600
 bit of disappointment we did not get

2152
00:55:13,580 --> 00:55:15,600
 

2153
00:55:13,590 --> 00:55:21,360
 concepts into the language this seemed

2154
00:55:15,590 --> 00:55:21,360
 

2155
00:55:15,600 --> 00:55:24,420
 to be a very important thing so at this

2156
00:55:21,350 --> 00:55:24,420
 

2157
00:55:21,360 --> 00:55:26,910
 point alex has moved on from Adobe

2158
00:55:24,410 --> 00:55:26,910
 

2159
00:55:24,420 --> 00:55:29,340
 software technology lab unfortunately is

2160
00:55:26,900 --> 00:55:29,340
 

2161
00:55:26,910 --> 00:55:30,930
 no more I had already looped around I

2162
00:55:29,330 --> 00:55:30,930
 

2163
00:55:29,340 --> 00:55:32,400
 had left left

2164
00:55:30,920 --> 00:55:32,400
 

2165
00:55:30,930 --> 00:55:34,050
 Adobe with the destruction of the

2166
00:55:32,390 --> 00:55:34,050
 

2167
00:55:32,400 --> 00:55:36,600
 software technology lab worked at Google

2168
00:55:34,040 --> 00:55:36,600
 

2169
00:55:34,050 --> 00:55:38,730
 on Chrome OS for a year and I had found

2170
00:55:36,590 --> 00:55:38,730
 

2171
00:55:36,600 --> 00:55:43,200
 myself back at Adobe a little more than

2172
00:55:38,720 --> 00:55:43,200
 

2173
00:55:38,730 --> 00:55:46,740
 a year later and Alex landed at a nine

2174
00:55:43,190 --> 00:55:46,740
 

2175
00:55:43,200 --> 00:55:50,670
 which is a subsidiary of Amazon so he

2176
00:55:46,730 --> 00:55:50,670
 

2177
00:55:46,740 --> 00:55:53,250
 was working in a nine and Alex posted a

2178
00:55:50,660 --> 00:55:53,250
 

2179
00:55:50,670 --> 00:55:54,000
 workshop over at a nine which has become

2180
00:55:53,240 --> 00:55:54,000
 

2181
00:55:53,250 --> 00:55:57,480
 known

2182
00:55:53,990 --> 00:55:57,480
 

2183
00:55:54,000 --> 00:55:59,700
 as the Palo Alto workshop and this is

2184
00:55:57,470 --> 00:55:59,700
 

2185
00:55:57,480 --> 00:56:03,090
 the Palo Alto report that came out of

2186
00:55:59,690 --> 00:56:03,090
 

2187
00:55:59,700 --> 00:56:05,940
 that workshop so there's a large number

2188
00:56:03,080 --> 00:56:05,940
 

2189
00:56:03,090 --> 00:56:08,970
 of people most of them you names you

2190
00:56:05,930 --> 00:56:08,970
 

2191
00:56:05,940 --> 00:56:10,349
 might recognize but the one person who

2192
00:56:08,960 --> 00:56:10,349
 

2193
00:56:08,970 --> 00:56:13,890
 I'm going to call out here besides a

2194
00:56:10,339 --> 00:56:13,890
 

2195
00:56:10,349 --> 00:56:15,810
 peer in distress trope is is Andrew

2196
00:56:13,880 --> 00:56:15,810
 

2197
00:56:13,890 --> 00:56:17,490
 Sutton this is a picture of Andrew and

2198
00:56:15,800 --> 00:56:17,490
 

2199
00:56:15,810 --> 00:56:25,980
 so Andrew is now that kind of the key

2200
00:56:17,480 --> 00:56:25,980
 

2201
00:56:17,490 --> 00:56:29,609
 driver of concepts for C++ 20 what was

2202
00:56:25,970 --> 00:56:29,609
 

2203
00:56:25,980 --> 00:56:32,910
 important about this workshop is is Alex

2204
00:56:29,599 --> 00:56:32,910
 

2205
00:56:29,609 --> 00:56:36,930
 and myself and Paul said you guys are

2206
00:56:32,900 --> 00:56:36,930
 

2207
00:56:32,910 --> 00:56:39,510
 making this too complicated we wrote the

2208
00:56:36,920 --> 00:56:39,510
 

2209
00:56:36,930 --> 00:56:42,930
 book at least Alex and Paul wrote the

2210
00:56:39,500 --> 00:56:42,930
 

2211
00:56:39,510 --> 00:56:44,580
 book elements of programming and we kind

2212
00:56:42,920 --> 00:56:44,580
 

2213
00:56:42,930 --> 00:56:46,800
 of showed that with relatively simple

2214
00:56:44,570 --> 00:56:46,800
 

2215
00:56:44,580 --> 00:56:52,380
 language constructs with just

2216
00:56:46,790 --> 00:56:52,380
 

2217
00:56:46,800 --> 00:56:55,619
 constraints on on on functions you could

2218
00:56:52,370 --> 00:56:55,619
 

2219
00:56:52,380 --> 00:56:57,840
 get a huge amount of the benefit of all

2220
00:56:55,609 --> 00:56:57,840
 

2221
00:56:55,619 --> 00:57:01,349
 of this complexity that people are

2222
00:56:57,830 --> 00:57:01,349
 

2223
00:56:57,840 --> 00:57:04,560
 arguing about so so could we strip

2224
00:57:01,339 --> 00:57:04,560
 

2225
00:57:01,349 --> 00:57:07,020
 concepts down to that to what we did

2226
00:57:04,550 --> 00:57:07,020
 

2227
00:57:04,560 --> 00:57:08,900
 with elements of programming and that's

2228
00:57:07,010 --> 00:57:08,900
 

2229
00:57:07,020 --> 00:57:12,119
 what became known as concepts light

2230
00:57:08,890 --> 00:57:12,119
 

2231
00:57:08,900 --> 00:57:17,330
 right and that's what has led to the

2232
00:57:12,109 --> 00:57:17,330
 

2233
00:57:12,119 --> 00:57:17,330
 current C++ 20 proposal for concepts

2234
00:57:20,320 --> 00:57:20,320
 

2235
00:57:20,330 --> 00:57:29,600
 so we end up in 2015 and Alex writes

2236
00:57:24,580 --> 00:57:29,600
 

2237
00:57:24,590 --> 00:57:33,590
 this book with Daniel Rose there's a

2238
00:57:29,590 --> 00:57:33,590
 

2239
00:57:29,600 --> 00:57:36,110
 picture of Daniel okay so I am gonna

2240
00:57:33,580 --> 00:57:36,110
 

2241
00:57:33,590 --> 00:57:38,690
 call out something at this point if you

2242
00:57:36,100 --> 00:57:38,690
 

2243
00:57:36,110 --> 00:57:42,140
 notice alex gets a huge amount of credit

2244
00:57:38,680 --> 00:57:42,140
 

2245
00:57:38,690 --> 00:57:44,720
 he's certainly a common thread here but

2246
00:57:42,130 --> 00:57:44,720
 

2247
00:57:42,140 --> 00:57:46,310
 for engineers I want you to realize that

2248
00:57:44,710 --> 00:57:46,310
 

2249
00:57:44,720 --> 00:57:48,500
 there's not a single paper there's not a

2250
00:57:46,300 --> 00:57:48,500
 

2251
00:57:46,310 --> 00:57:50,900
 single piece of work in this entire

2252
00:57:48,490 --> 00:57:50,900
 

2253
00:57:48,500 --> 00:57:55,610
 presentation which is Alex Stepanov

2254
00:57:50,890 --> 00:57:55,610
 

2255
00:57:50,900 --> 00:58:01,100
 alone right computer science is a social

2256
00:57:55,600 --> 00:58:01,100
 

2257
00:57:55,610 --> 00:58:04,910
 aspect and I think requires conversation

2258
00:58:01,090 --> 00:58:04,910
 

2259
00:58:01,100 --> 00:58:07,660
 and differences of opinion and if Alex

2260
00:58:04,900 --> 00:58:07,660
 

2261
00:58:04,910 --> 00:58:09,860
 had done all of this work on his own I

2262
00:58:07,650 --> 00:58:09,860
 

2263
00:58:07,660 --> 00:58:11,360
 don't think we would have what we have

2264
00:58:09,850 --> 00:58:11,360
 

2265
00:58:09,860 --> 00:58:15,740
 today every one of these people

2266
00:58:11,350 --> 00:58:15,740
 

2267
00:58:11,360 --> 00:58:17,990
 contributed and shaped what became and

2268
00:58:15,730 --> 00:58:17,990
 

2269
00:58:15,740 --> 00:58:22,820
 what we know of now as generic

2270
00:58:17,980 --> 00:58:22,820
 

2271
00:58:17,990 --> 00:58:26,300
 programming okay and Daniel Rose here

2272
00:58:22,810 --> 00:58:26,300
 

2273
00:58:22,820 --> 00:58:30,320
 came along and said you know you did

2274
00:58:26,290 --> 00:58:30,320
 

2275
00:58:26,300 --> 00:58:32,750
 this work called Pam this previous book

2276
00:58:30,310 --> 00:58:32,750
 

2277
00:58:30,320 --> 00:58:35,390
 and I like that book and you never

2278
00:58:32,740 --> 00:58:35,390
 

2279
00:58:32,750 --> 00:58:38,180
 published that book and we should kind

2280
00:58:35,380 --> 00:58:38,180
 

2281
00:58:35,390 --> 00:58:39,890
 of pick that up and complete it so so

2282
00:58:38,170 --> 00:58:39,890
 

2283
00:58:38,180 --> 00:58:42,080
 there's a huge amount of credit given at

2284
00:58:39,880 --> 00:58:42,080
 

2285
00:58:39,890 --> 00:58:44,600
 the front end of this this book to Matt

2286
00:58:42,070 --> 00:58:44,600
 

2287
00:58:42,080 --> 00:58:50,500
 Marcus and the work that Alex had done

2288
00:58:44,590 --> 00:58:50,500
 

2289
00:58:44,600 --> 00:58:54,310
 done with Matt on the Pam book this book

2290
00:58:50,490 --> 00:58:54,310
 

2291
00:58:50,500 --> 00:58:57,080
 I'd also recommend getting and reading

2292
00:58:54,300 --> 00:58:57,080
 

2293
00:58:54,310 --> 00:58:58,430
 this is a much lighter read right at

2294
00:58:57,070 --> 00:58:58,430
 

2295
00:58:57,080 --> 00:59:01,370
 least I think it's a lighter read I

2296
00:58:58,420 --> 00:59:01,370
 

2297
00:58:58,430 --> 00:59:03,740
 probably read this twice in a week and

2298
00:59:01,360 --> 00:59:03,740
 

2299
00:59:01,370 --> 00:59:10,310
 I'm a pretty slow reader that's an

2300
00:59:03,730 --> 00:59:10,310
 

2301
00:59:03,740 --> 00:59:12,830
 exaggeration but but it is also a bit of

2302
00:59:10,300 --> 00:59:12,830
 

2303
00:59:10,310 --> 00:59:15,950
 a history book so it follows the

2304
00:59:12,820 --> 00:59:15,950
 

2305
00:59:12,830 --> 00:59:19,040
 evolution of algorithms from Pythagorean

2306
00:59:15,940 --> 00:59:19,040
 

2307
00:59:15,950 --> 00:59:21,020
 times and from Egyptian times and how

2308
00:59:19,030 --> 00:59:21,020
 

2309
00:59:19,040 --> 00:59:24,140
 algorithms evolve into generic

2310
00:59:21,010 --> 00:59:24,140
 

2311
00:59:21,020 --> 00:59:26,819
 algorithms and ties that all in with

2312
00:59:24,130 --> 00:59:26,819
 

2313
00:59:24,140 --> 00:59:30,390
 generic programming and

2314
00:59:26,809 --> 00:59:30,390
 

2315
00:59:26,819 --> 00:59:32,849
 and I think creates the setting that

2316
00:59:30,380 --> 00:59:32,849
 

2317
00:59:30,390 --> 00:59:34,890
 generic programming is mathematics and

2318
00:59:32,839 --> 00:59:34,890
 

2319
00:59:32,849 --> 00:59:36,929
 follows along in the tradition of

2320
00:59:34,880 --> 00:59:36,929
 

2321
00:59:34,890 --> 00:59:38,429
 mathematics and fits in with the

2322
00:59:36,919 --> 00:59:38,429
 

2323
00:59:36,929 --> 00:59:41,669
 evolution of these fundamental

2324
00:59:38,419 --> 00:59:41,669
 

2325
00:59:38,429 --> 00:59:43,380
 algorithms through time so so here you

2326
00:59:41,659 --> 00:59:43,380
 

2327
00:59:41,669 --> 00:59:45,689
 get to learn some wonderful algorithms

2328
00:59:43,370 --> 00:59:45,689
 

2329
00:59:43,380 --> 00:59:48,359
 and meet some great historic

2330
00:59:45,679 --> 00:59:48,359
 

2331
00:59:45,689 --> 00:59:52,589
 mathematicians and find out their

2332
00:59:48,349 --> 00:59:52,589
 

2333
00:59:48,359 --> 00:59:54,779
 history and what problems they were

2334
00:59:52,579 --> 00:59:54,779
 

2335
00:59:52,589 --> 00:59:57,869
 trying to solve you know real concrete

2336
00:59:54,769 --> 00:59:57,869
 

2337
00:59:54,779 --> 01:00:00,089
 problems of the time and how that led to

2338
00:59:57,859 --> 01:00:00,089
 

2339
00:59:57,869 --> 01:00:02,939
 generalizing existing algorithms and

2340
01:00:00,079 --> 01:00:02,939
 

2341
01:00:00,089 --> 01:00:05,219
 evolving them along the way so it really

2342
01:00:02,929 --> 01:00:05,219
 

2343
01:00:02,939 --> 01:00:08,549
 is is a beautiful book and a very nice

2344
01:00:05,209 --> 01:00:08,549
 

2345
01:00:05,219 --> 01:00:10,349
 read the other thing notable about this

2346
01:00:08,539 --> 01:00:10,349
 

2347
01:00:08,549 --> 01:00:12,390
 book is you say now we're using the term

2348
01:00:10,339 --> 01:00:12,390
 

2349
01:00:10,349 --> 01:00:14,759
 generic programming again and that's

2350
01:00:12,380 --> 01:00:14,759
 

2351
01:00:12,390 --> 01:00:17,519
 because Daniel Rose had an argument with

2352
01:00:14,749 --> 01:00:17,519
 

2353
01:00:14,759 --> 01:00:20,549
 Alex and said you know what you need to

2354
01:00:17,509 --> 01:00:20,549
 

2355
01:00:17,519 --> 01:00:24,749
 reclaim this this this term right this

2356
01:00:20,539 --> 01:00:24,749
 

2357
01:00:20,549 --> 01:00:27,599
 is yours so take ownership of it and so

2358
01:00:24,739 --> 01:00:27,599
 

2359
01:00:24,749 --> 01:00:34,949
 so I'm very thankful to Daniel for doing

2360
01:00:27,589 --> 01:00:34,949
 

2361
01:00:27,599 --> 01:00:36,259
 that so that brings us up to 2016 this

2362
01:00:34,939 --> 01:00:36,259
 

2363
01:00:34,949 --> 01:00:38,939
 is when Alex retired

2364
01:00:36,249 --> 01:00:38,939
 

2365
01:00:36,259 --> 01:00:42,359
 so this was a picture of Alex's

2366
01:00:38,929 --> 01:00:42,359
 

2367
01:00:38,939 --> 01:00:43,890
 retirement party he's loosened up a

2368
01:00:42,349 --> 01:00:43,890
 

2369
01:00:42,359 --> 01:00:48,119
 little bit occasionally I can get him to

2370
01:00:43,880 --> 01:00:48,119
 

2371
01:00:43,890 --> 01:00:49,919
 talk tech just a little bit he lives

2372
01:00:48,109 --> 01:00:49,919
 

2373
01:00:48,119 --> 01:00:52,919
 with his wife and one of his sons in

2374
01:00:49,909 --> 01:00:52,919
 

2375
01:00:49,919 --> 01:00:58,979
 Palo Alto and we go up and have lunch on

2376
01:00:52,909 --> 01:00:58,979
 

2377
01:00:52,919 --> 01:01:01,969
 a fairly regular basis and but he

2378
01:00:58,969 --> 01:01:01,969
 

2379
01:00:58,979 --> 01:01:04,199
 prefers to talk about history and and

2380
01:01:01,959 --> 01:01:04,199
 

2381
01:01:01,969 --> 01:01:07,439
 politics and anything other than

2382
01:01:04,189 --> 01:01:07,439
 

2383
01:01:04,199 --> 01:01:10,049
 programming these days so so that's why

2384
01:01:07,429 --> 01:01:10,049
 

2385
01:01:07,439 --> 01:01:12,929
 he's not here giving this talk it's a

2386
01:01:10,039 --> 01:01:12,929
 

2387
01:01:10,049 --> 01:01:17,849
 bit out of it so now we get to zoom into

2388
01:01:12,919 --> 01:01:17,849
 

2389
01:01:12,929 --> 01:01:20,669
 the future 2020 right and I think now we

2390
01:01:17,839 --> 01:01:20,669
 

2391
01:01:17,849 --> 01:01:25,049
 actually have a shot this is the working

2392
01:01:20,659 --> 01:01:25,049
 

2393
01:01:20,669 --> 01:01:26,999
 draft standard and down here in the

2394
01:01:25,039 --> 01:01:26,999
 

2395
01:01:25,049 --> 01:01:29,939
 middle what do we got

2396
01:01:26,989 --> 01:01:29,939
 

2397
01:01:26,999 --> 01:01:32,609
 we've got constrained templates right

2398
01:01:29,929 --> 01:01:32,609
 

2399
01:01:29,939 --> 01:01:36,179
 they look actually quite similar to what

2400
01:01:32,599 --> 01:01:36,179
 

2401
01:01:32,609 --> 01:01:38,670
 we have in elements of programming so

2402
01:01:36,169 --> 01:01:38,670
 

2403
01:01:36,179 --> 01:01:41,519
 this was a big part of concepts light

2404
01:01:38,660 --> 01:01:41,519
 

2405
01:01:38,670 --> 01:01:44,460
 and and I'm pretty pleased with the

2406
01:01:41,509 --> 01:01:44,460
 

2407
01:01:41,519 --> 01:01:47,640
 direction this is going and so my

2408
01:01:44,450 --> 01:01:47,640
 

2409
01:01:44,460 --> 01:01:50,460
 biggest fear with concepts is there are

2410
01:01:47,630 --> 01:01:50,460
 

2411
01:01:47,640 --> 01:01:55,109
 still various factions who want more who

2412
01:01:50,450 --> 01:01:55,109
 

2413
01:01:50,460 --> 01:01:57,029
 want pieces of what we had in the

2414
01:01:55,099 --> 01:01:57,029
 

2415
01:01:55,109 --> 01:02:00,690
 Indiana proposal and pieces of what we

2416
01:01:57,019 --> 01:02:00,690
 

2417
01:01:57,029 --> 01:02:03,289
 had in the Texas A&M proposal and I'm

2418
01:02:00,680 --> 01:02:03,289
 

2419
01:02:00,690 --> 01:02:05,970
 kind of hoping we don't I want to see us

2420
01:02:03,279 --> 01:02:05,970
 

2421
01:02:03,289 --> 01:02:08,490
 take this baby step and move it forward

2422
01:02:05,960 --> 01:02:08,490
 

2423
01:02:05,970 --> 01:02:11,010
 and learn from this step and keep it as

2424
01:02:08,480 --> 01:02:11,010
 

2425
01:02:08,490 --> 01:02:17,609
 light as possible and get it out the

2426
01:02:11,000 --> 01:02:17,609
 

2427
01:02:11,010 --> 01:02:24,569
 door and get experience okay so that

2428
01:02:17,599 --> 01:02:24,569
 

2429
01:02:17,609 --> 01:02:27,720
 brings us up to today I want to close on

2430
01:02:24,559 --> 01:02:27,720
 

2431
01:02:24,569 --> 01:02:31,019
 a bit of a quote here so this is from an

2432
01:02:27,710 --> 01:02:31,019
 

2433
01:02:27,720 --> 01:02:32,849
 interview with Alex generic programming

2434
01:02:31,009 --> 01:02:32,849
 

2435
01:02:31,019 --> 01:02:36,150
 is about abstracting and classifying

2436
01:02:32,839 --> 01:02:36,150
 

2437
01:02:32,849 --> 01:02:39,089
 algorithms and data structures it gets

2438
01:02:36,140 --> 01:02:39,089
 

2439
01:02:36,150 --> 01:02:40,890
 its inspiration from canoes so I would

2440
01:02:39,079 --> 01:02:40,890
 

2441
01:02:39,089 --> 01:02:42,750
 rank is number two greatest computer

2442
01:02:40,880 --> 01:02:42,750
 

2443
01:02:40,890 --> 01:02:44,730
 scientist or number one depending on

2444
01:02:42,740 --> 01:02:44,730
 

2445
01:02:42,750 --> 01:02:49,279
 what day you ask me right up there with

2446
01:02:44,720 --> 01:02:49,279
 

2447
01:02:44,730 --> 01:02:52,740
 Ken Thompson and not from type theory

2448
01:02:49,269 --> 01:02:52,740
 

2449
01:02:49,279 --> 01:02:56,609
 okay meaning it's Euler it's not

2450
01:02:52,730 --> 01:02:56,609
 

2451
01:02:52,740 --> 01:02:58,980
 barbecue right its goal is the

2452
01:02:56,599 --> 01:02:58,980
 

2453
01:02:56,609 --> 01:03:01,289
 incremental construction of systematic

2454
01:02:58,970 --> 01:03:01,289
 

2455
01:02:58,980 --> 01:03:03,200
 catalogs of useful efficient and

2456
01:03:01,279 --> 01:03:03,200
 

2457
01:03:01,289 --> 01:03:07,559
 abstract algorithms and data structure

2458
01:03:03,190 --> 01:03:07,559
 

2459
01:03:03,200 --> 01:03:09,420
 that's the goal and when Alex was having

2460
01:03:07,549 --> 01:03:09,420
 

2461
01:03:07,559 --> 01:03:11,130
 the conversation with Greg Gilley where

2462
01:03:09,410 --> 01:03:11,130
 

2463
01:03:09,420 --> 01:03:14,609
 he said nobody gets what I'm trying to

2464
01:03:11,120 --> 01:03:14,609
 

2465
01:03:11,130 --> 01:03:17,670
 do I think this is the piece that still

2466
01:03:14,599 --> 01:03:17,670
 

2467
01:03:14,609 --> 01:03:23,759
 gets missed even after all the books and

2468
01:03:17,660 --> 01:03:23,759
 

2469
01:03:17,670 --> 01:03:26,220
 all the publications when I go and talk

2470
01:03:23,749 --> 01:03:26,220
 

2471
01:03:23,759 --> 01:03:29,250
 people will tell me okay well I've got

2472
01:03:26,210 --> 01:03:29,250
 

2473
01:03:26,220 --> 01:03:31,589
 this algorithm and but I can't use one

2474
01:03:29,240 --> 01:03:31,589
 

2475
01:03:29,250 --> 01:03:33,150
 of the standard algorithms right now I

2476
01:03:31,579 --> 01:03:33,150
 

2477
01:03:31,589 --> 01:03:35,549
 will say that's okay the standard the

2478
01:03:33,140 --> 01:03:35,549
 

2479
01:03:33,150 --> 01:03:37,920
 standard template library is not the

2480
01:03:35,539 --> 01:03:37,920
 

2481
01:03:35,549 --> 01:03:39,779
 beginning and ending of a catalog of all

2482
01:03:37,910 --> 01:03:39,779
 

2483
01:03:37,920 --> 01:03:42,000
 algorithms and all data structures on

2484
01:03:39,769 --> 01:03:42,000
 

2485
01:03:39,779 --> 01:03:45,269
 the planet right right

2486
01:03:41,990 --> 01:03:45,269
 

2487
01:03:42,000 --> 01:03:47,960
 it's just scraping the surface there's a

2488
01:03:45,259 --> 01:03:47,960
 

2489
01:03:45,269 --> 01:03:50,390
 huge amount of work to be done

2490
01:03:47,950 --> 01:03:50,390
 

2491
01:03:47,960 --> 01:03:53,300
 right right and we kind of treat the STL

2492
01:03:50,380 --> 01:03:53,300
 

2493
01:03:50,390 --> 01:03:55,940
 it's a beautiful piece of work as if

2494
01:03:53,290 --> 01:03:55,940
 

2495
01:03:53,300 --> 01:03:58,160
 it's both the beginning and the end it's

2496
01:03:55,930 --> 01:03:58,160
 

2497
01:03:55,940 --> 01:04:00,500
 not the end people it's an example of

2498
01:03:58,150 --> 01:04:00,500
 

2499
01:03:58,160 --> 01:04:03,500
 where to go it's an example of how you

2500
01:04:00,490 --> 01:04:03,500
 

2501
01:04:00,500 --> 01:04:05,690
 should be writing your code right and as

2502
01:04:03,490 --> 01:04:05,690
 

2503
01:04:03,500 --> 01:04:07,820
 an industry I'd like to get us to the

2504
01:04:05,680 --> 01:04:07,820
 

2505
01:04:05,690 --> 01:04:09,410
 point where we had a place where a week

2506
01:04:07,810 --> 01:04:09,410
 

2507
01:04:07,820 --> 01:04:12,530
 ago this was one of the inspirations

2508
01:04:09,400 --> 01:04:12,530
 

2509
01:04:09,410 --> 01:04:15,380
 that came to boost is that there should

2510
01:04:12,520 --> 01:04:15,380
 

2511
01:04:12,530 --> 01:04:18,320
 be a place where you can go to find high

2512
01:04:15,370 --> 01:04:18,320
 

2513
01:04:15,380 --> 01:04:20,960
 quality algorithms and data structures

2514
01:04:18,310 --> 01:04:20,960
 

2515
01:04:18,320 --> 01:04:22,520
 and to contribute to them right and they

2516
01:04:20,950 --> 01:04:22,520
 

2517
01:04:20,960 --> 01:04:24,920
 should be written with the same kind of

2518
01:04:22,510 --> 01:04:24,920
 

2519
01:04:22,520 --> 01:04:26,360
 precision that the STL is written right

2520
01:04:24,910 --> 01:04:26,360
 

2521
01:04:24,920 --> 01:04:28,640
 right you should kind of have the proof

2522
01:04:26,350 --> 01:04:28,640
 

2523
01:04:26,360 --> 01:04:32,120
 to go along with that code and these

2524
01:04:28,630 --> 01:04:32,120
 

2525
01:04:28,640 --> 01:04:33,530
 things should become trusted things so

2526
01:04:32,110 --> 01:04:33,530
 

2527
01:04:32,120 --> 01:04:35,230
 that's the piece I think that gets

2528
01:04:33,520 --> 01:04:35,230
 

2529
01:04:33,530 --> 01:04:38,150
 missed

2530
01:04:35,220 --> 01:04:38,150
 

2531
01:04:35,230 --> 01:04:40,370
 and so Alix closed it with such an

2532
01:04:38,140 --> 01:04:40,370
 

2533
01:04:38,150 --> 01:04:41,870
 undertaking is still a dream right right

2534
01:04:40,360 --> 01:04:41,870
 

2535
01:04:40,370 --> 01:04:45,350
 and I think it is I think we've made a

2536
01:04:41,860 --> 01:04:45,350
 

2537
01:04:41,870 --> 01:04:50,180
 lot of progress but I think we still

2538
01:04:45,340 --> 01:04:50,180
 

2539
01:04:45,350 --> 01:04:51,950
 have a long way to go yeah so that's my

2540
01:04:50,170 --> 01:04:51,950
 

2541
01:04:50,180 --> 01:04:54,040
 closing so that's my history last 30

2542
01:04:51,940 --> 01:04:54,040
 

2543
01:04:51,950 --> 01:04:54,040
 years

2544
01:04:57,390 --> 01:04:57,390
 

2545
01:04:57,400 --> 01:05:02,700
[Applause]

2546
01:04:59,470 --> 01:05:02,700
 

2547
01:04:59,480 --> 01:05:06,170
 yeah people have questions I think we

2548
01:05:02,690 --> 01:05:06,170
 

2549
01:05:02,700 --> 01:05:06,170
 started early we still have time

2550
01:05:06,700 --> 01:05:06,700
 

2551
01:05:06,710 --> 01:05:13,220
 question over here so I'm interested in

2552
01:05:10,700 --> 01:05:13,220
 

2553
01:05:10,710 --> 01:05:15,360
 knowing what the core of the

2554
01:05:13,210 --> 01:05:15,360
 

2555
01:05:13,220 --> 01:05:17,430
 disagreements in the concepts library is

2556
01:05:15,350 --> 01:05:17,430
 

2557
01:05:15,360 --> 01:05:21,740
 about what those missing pieces are

2558
01:05:17,420 --> 01:05:21,740
 

2559
01:05:17,430 --> 01:05:23,730
 what's the kind of fundamental idea or

2560
01:05:21,730 --> 01:05:23,730
 

2561
01:05:21,740 --> 01:05:26,280
 thing that they're really trying to

2562
01:05:23,720 --> 01:05:26,280
 

2563
01:05:23,730 --> 01:05:28,110
 reach for that may not be really useful

2564
01:05:26,270 --> 01:05:28,110
 

2565
01:05:26,280 --> 01:05:30,300
 but it's mathematically it might be more

2566
01:05:28,100 --> 01:05:30,300
 

2567
01:05:28,110 --> 01:05:32,880
 pure or what is it well so the

2568
01:05:30,290 --> 01:05:32,880
 

2569
01:05:30,300 --> 01:05:35,460
 fundamental disagreement if I can try to

2570
01:05:32,870 --> 01:05:35,460
 

2571
01:05:32,880 --> 01:05:39,870
 distill it between the Indiana and Texas

2572
01:05:35,450 --> 01:05:39,870
 

2573
01:05:35,460 --> 01:05:41,220
 A&M teams were around whether or not the

2574
01:05:39,860 --> 01:05:41,220
 

2575
01:05:39,870 --> 01:05:45,630
 foundational mechanism for how you

2576
01:05:41,210 --> 01:05:45,630
 

2577
01:05:41,220 --> 01:05:48,120
 describe a concept was by example or

2578
01:05:45,620 --> 01:05:48,120
 

2579
01:05:45,630 --> 01:05:51,330
 through a new language construct by

2580
01:05:48,110 --> 01:05:51,330
 

2581
01:05:48,120 --> 01:05:59,490
 specification okay so whether or not you

2582
01:05:51,320 --> 01:05:59,490
 

2583
01:05:51,330 --> 01:06:01,290
 could just write the a piece of code

2584
01:05:59,480 --> 01:06:01,290
 

2585
01:05:59,490 --> 01:06:03,480
 that said this expression should be

2586
01:06:01,280 --> 01:06:03,480
 

2587
01:06:01,290 --> 01:06:05,490
 valid or whether or not you had to

2588
01:06:03,470 --> 01:06:05,490
 

2589
01:06:03,480 --> 01:06:09,240
 define basically a function signature

2590
01:06:05,480 --> 01:06:09,240
 

2591
01:06:05,490 --> 01:06:11,220
 that said it must match this right right

2592
01:06:09,230 --> 01:06:11,220
 

2593
01:06:09,240 --> 01:06:15,630
 so that's where I think the fundamental

2594
01:06:11,210 --> 01:06:15,630
 

2595
01:06:11,220 --> 01:06:18,360
 disagreement is but then there's a huge

2596
01:06:15,620 --> 01:06:18,360
 

2597
01:06:15,630 --> 01:06:24,630
 number of other features that come into

2598
01:06:18,350 --> 01:06:24,630
 

2599
01:06:18,360 --> 01:06:27,060
 play how do you declare whether or not a

2600
01:06:24,620 --> 01:06:27,060
 

2601
01:06:24,630 --> 01:06:30,330
 type model is a particular concept and

2602
01:06:27,050 --> 01:06:30,330
 

2603
01:06:27,060 --> 01:06:32,120
 since a modeling a concept is means it

2604
01:06:30,320 --> 01:06:32,120
 

2605
01:06:30,330 --> 01:06:38,790
 means a set of semantics not act

2606
01:06:32,110 --> 01:06:38,790
 

2607
01:06:32,120 --> 01:06:40,890
 actually syntactic attributes if you

2608
01:06:38,780 --> 01:06:40,890
 

2609
01:06:38,790 --> 01:06:44,010
 have something that is not a syntactic

2610
01:06:40,880 --> 01:06:44,010
 

2611
01:06:40,890 --> 01:06:47,190
 match can you adapt it can you put in a

2612
01:06:44,000 --> 01:06:47,190
 

2613
01:06:44,010 --> 01:06:51,120
 model statement that says this is how

2614
01:06:47,180 --> 01:06:51,120
 

2615
01:06:47,190 --> 01:06:52,740
 this type models this concept right this

2616
01:06:51,110 --> 01:06:52,740
 

2617
01:06:51,120 --> 01:06:54,660
 is the set of transformations that you

2618
01:06:52,730 --> 01:06:54,660
 

2619
01:06:52,740 --> 01:06:56,130
 would have to go through right so

2620
01:06:54,650 --> 01:06:56,130
 

2621
01:06:54,660 --> 01:06:57,750
 there's there's a huge amount of

2622
01:06:56,120 --> 01:06:57,750
 

2623
01:06:56,130 --> 01:07:01,110
 complexity that comes up when you start

2624
01:06:57,740 --> 01:07:01,110
 

2625
01:06:57,750 --> 01:07:02,940
 doing that if you actually want to see

2626
01:07:01,100 --> 01:07:02,940
 

2627
01:07:01,110 --> 01:07:04,230
 the closest I mean you could go back and

2628
01:07:02,930 --> 01:07:04,230
 

2629
01:07:02,940 --> 01:07:06,750
 read the papers but if you want to see

2630
01:07:04,220 --> 01:07:06,750
 

2631
01:07:04,230 --> 01:07:08,280
 the closest working system to the

2632
01:07:06,740 --> 01:07:08,280
 

2633
01:07:06,750 --> 01:07:10,290
 Indiana model at least

2634
01:07:08,270 --> 01:07:10,290
 

2635
01:07:08,280 --> 01:07:13,260
 go look at swift and Swift protocols

2636
01:07:10,280 --> 01:07:13,260
 

2637
01:07:10,290 --> 01:07:15,810
 right that's Doug Gregor's work who who

2638
01:07:13,250 --> 01:07:15,810
 

2639
01:07:13,260 --> 01:07:18,570
 can left the C++ community after this

2640
01:07:15,800 --> 01:07:18,570
 

2641
01:07:15,810 --> 01:07:20,700
 whole blow up and and went to work on

2642
01:07:18,560 --> 01:07:20,700
 

2643
01:07:18,570 --> 01:07:23,369
 Swift and continues to work on Swift to

2644
01:07:20,690 --> 01:07:23,369
 

2645
01:07:20,700 --> 01:07:25,410
 this day and he took a lot of what he

2646
01:07:23,359 --> 01:07:25,410
 

2647
01:07:23,369 --> 01:07:26,599
 did for concepts and brought that into

2648
01:07:25,400 --> 01:07:26,599
 

2649
01:07:25,410 --> 01:07:31,920
 the Swift language

2650
01:07:26,589 --> 01:07:31,920
 

2651
01:07:26,599 --> 01:07:34,230
 so think about generic programming it

2652
01:07:31,910 --> 01:07:34,230
 

2653
01:07:31,920 --> 01:07:37,950
 always highlights algorithms and data

2654
01:07:34,220 --> 01:07:37,950
 

2655
01:07:34,230 --> 01:07:40,020
 structures yep and I think it's it's

2656
01:07:37,940 --> 01:07:40,020
 

2657
01:07:37,950 --> 01:07:42,270
 easy to go online and find C++

2658
01:07:40,010 --> 01:07:42,270
 

2659
01:07:40,020 --> 01:07:44,070
 programmers talking about that one

2660
01:07:42,260 --> 01:07:44,070
 

2661
01:07:42,270 --> 01:07:46,320
 really important abstraction that goes

2662
01:07:44,060 --> 01:07:46,320
 

2663
01:07:44,070 --> 01:07:48,090
 between them that that glue and it

2664
01:07:46,310 --> 01:07:48,090
 

2665
01:07:46,320 --> 01:07:51,060
 wasn't mentioned in your talk at all

2666
01:07:48,080 --> 01:07:51,060
 

2667
01:07:48,090 --> 01:07:54,210
 when I see iterators he's your aid is

2668
01:07:51,050 --> 01:07:54,210
 

2669
01:07:51,060 --> 01:07:57,510
 something that maybe was the one sort of

2670
01:07:54,200 --> 01:07:57,510
 

2671
01:07:54,210 --> 01:08:00,900
 central part that hasn't really the lot

2672
01:07:57,500 --> 01:08:00,900
 

2673
01:07:57,510 --> 01:08:03,630
 of programmers don't get yeah so the

2674
01:08:00,890 --> 01:08:03,630
 

2675
01:08:00,900 --> 01:08:07,050
 question here is we didn't talk about

2676
01:08:03,620 --> 01:08:07,050
 

2677
01:08:03,630 --> 01:08:08,130
 iterators in this this talk we pointed

2678
01:08:07,040 --> 01:08:08,130
 

2679
01:08:07,050 --> 01:08:09,900
 out they were originally called

2680
01:08:08,120 --> 01:08:09,900
 

2681
01:08:08,130 --> 01:08:12,630
 coordinates Alex actually doesn't like

2682
01:08:09,890 --> 01:08:12,630
 

2683
01:08:09,900 --> 01:08:13,770
 the term iterators but that was

2684
01:08:12,620 --> 01:08:13,770
 

2685
01:08:12,630 --> 01:08:17,819
 something that the Standards Committee

2686
01:08:13,760 --> 01:08:17,819
 

2687
01:08:13,770 --> 01:08:20,339
 had said we don't have coordinates into

2688
01:08:17,809 --> 01:08:20,339
 

2689
01:08:17,819 --> 01:08:22,380
 data structures in languages nobody

2690
01:08:20,329 --> 01:08:22,380
 

2691
01:08:20,339 --> 01:08:24,210
 knows what that is we have iterators

2692
01:08:22,370 --> 01:08:24,210
 

2693
01:08:22,380 --> 01:08:27,600
 there's kind of a standard standard

2694
01:08:24,200 --> 01:08:27,600
 

2695
01:08:24,210 --> 01:08:29,400
 terminology yeah I think iterators still

2696
01:08:27,590 --> 01:08:29,400
 

2697
01:08:27,600 --> 01:08:31,529
 are things that people don't don't quite

2698
01:08:29,390 --> 01:08:31,529
 

2699
01:08:29,400 --> 01:08:34,770
 get surprisingly because iterators are

2700
01:08:31,519 --> 01:08:34,770
 

2701
01:08:31,529 --> 01:08:39,750
 very much modeled after pointers within

2702
01:08:34,760 --> 01:08:39,750
 

2703
01:08:34,770 --> 01:08:41,549
 within the C language and they boil down

2704
01:08:39,740 --> 01:08:41,549
 

2705
01:08:39,750 --> 01:08:43,790
 you know some people will try to erase

2706
01:08:41,539 --> 01:08:43,790
 

2707
01:08:41,549 --> 01:08:49,560
 them right right Andre Alex and rescue

2708
01:08:43,780 --> 01:08:49,560
 

2709
01:08:43,790 --> 01:08:51,089
 when went on a bend for a while to say

2710
01:08:49,550 --> 01:08:51,089
 

2711
01:08:49,560 --> 01:08:53,460
 you know we should just deal with ranges

2712
01:08:51,079 --> 01:08:53,460
 

2713
01:08:51,089 --> 01:08:55,259
 and we should get rid of iterators but

2714
01:08:53,450 --> 01:08:55,259
 

2715
01:08:53,460 --> 01:08:56,880
 this goes back to the basic concepts of

2716
01:08:55,249 --> 01:08:56,880
 

2717
01:08:55,259 --> 01:09:02,339
 generic program I mean which is that

2718
01:08:56,870 --> 01:09:02,339
 

2719
01:08:56,880 --> 01:09:04,710
 that iterators are the statement that if

2720
01:09:02,329 --> 01:09:04,710
 

2721
01:09:02,339 --> 01:09:07,109
 I have in elements there are n plus 1

2722
01:09:04,700 --> 01:09:07,109
 

2723
01:09:04,710 --> 01:09:10,170
 positions right an iterator is a

2724
01:09:07,099 --> 01:09:10,170
 

2725
01:09:07,109 --> 01:09:13,460
 position in the sequence right right and

2726
01:09:10,160 --> 01:09:13,460
 

2727
01:09:10,170 --> 01:09:16,469
 you can't get rid of them right this was

2728
01:09:13,450 --> 01:09:16,469
 

2729
01:09:13,460 --> 01:09:20,069
 Eric and knee blur and I worked on the

2730
01:09:16,459 --> 01:09:20,069
 

2731
01:09:16,469 --> 01:09:22,799
 on early stages of the ranges library

2732
01:09:20,059 --> 01:09:22,799
 

2733
01:09:20,069 --> 01:09:24,600
 and and I had to convince Eric

2734
01:09:22,789 --> 01:09:24,600
 

2735
01:09:22,799 --> 01:09:26,580
 he gives me credit for this that you

2736
01:09:24,590 --> 01:09:26,580
 

2737
01:09:24,600 --> 01:09:28,319
 can't get rid of iterators you

2738
01:09:26,570 --> 01:09:28,319
 

2739
01:09:26,580 --> 01:09:30,600
 absolutely can't and if you look at my

2740
01:09:28,309 --> 01:09:30,600
 

2741
01:09:28,319 --> 01:09:32,489
 gather function there where it's two

2742
01:09:30,590 --> 01:09:32,489
 

2743
01:09:30,600 --> 01:09:34,650
 stable partitions and each stable

2744
01:09:32,479 --> 01:09:34,650
 

2745
01:09:32,489 --> 01:09:36,509
 partition returns a position and the

2746
01:09:34,640 --> 01:09:36,509
 

2747
01:09:34,650 --> 01:09:40,259
 result of calling two stable partitions

2748
01:09:36,499 --> 01:09:40,259
 

2749
01:09:36,509 --> 01:09:42,299
 is those two positions form a range okay

2750
01:09:40,249 --> 01:09:42,299
 

2751
01:09:40,259 --> 01:09:46,319
 if stable partition didn't return a

2752
01:09:42,289 --> 01:09:46,319
 

2753
01:09:42,299 --> 01:09:52,380
 position right right if it returned a

2754
01:09:46,309 --> 01:09:52,380
 

2755
01:09:46,319 --> 01:09:55,530
 range how do you do that you need some

2756
01:09:52,370 --> 01:09:55,530
 

2757
01:09:52,380 --> 01:10:00,060
 way to combine two ranges that represent

2758
01:09:55,520 --> 01:10:00,060
 

2759
01:09:55,530 --> 01:10:02,730
 positions into a new range right right

2760
01:10:00,050 --> 01:10:02,730
 

2761
01:10:00,060 --> 01:10:04,860
 so you just cannot get rid of them you

2762
01:10:02,720 --> 01:10:04,860
 

2763
01:10:02,730 --> 01:10:10,800
 absolutely can't and yes I think that

2764
01:10:04,850 --> 01:10:10,800
 

2765
01:10:04,860 --> 01:10:13,590
 people still struggle with that and you

2766
01:10:10,790 --> 01:10:13,590
 

2767
01:10:10,800 --> 01:10:16,640
 know I think more people look me to look

2768
01:10:13,580 --> 01:10:16,640
 

2769
01:10:13,590 --> 01:10:18,960
 at kind of my slides of using algorithms

2770
01:10:16,630 --> 01:10:18,960
 

2771
01:10:16,640 --> 01:10:22,830
 so I suppose this works being gone for

2772
01:10:18,950 --> 01:10:22,830
 

2773
01:10:18,960 --> 01:10:26,219
 such a long time now and I haven't read

2774
01:10:22,820 --> 01:10:26,219
 

2775
01:10:22,830 --> 01:10:29,040
 any of these papers which I suppose

2776
01:10:26,209 --> 01:10:29,040
 

2777
01:10:26,219 --> 01:10:30,660
 gives some examples but so my

2778
01:10:29,030 --> 01:10:30,660
 

2779
01:10:29,040 --> 01:10:32,400
 understanding is probably reflection

2780
01:10:30,650 --> 01:10:32,400
 

2781
01:10:30,660 --> 01:10:35,040
 will probably become one of the first

2782
01:10:32,390 --> 01:10:35,040
 

2783
01:10:32,400 --> 01:10:37,739
 fallen effects of concepts probably the

2784
01:10:35,030 --> 01:10:37,739
 

2785
01:10:35,040 --> 01:10:39,890
 most meaningful for me and perhaps my

2786
01:10:37,729 --> 01:10:39,890
 

2787
01:10:37,739 --> 01:10:43,110
 day-to-day job but other than that

2788
01:10:39,880 --> 01:10:43,110
 

2789
01:10:39,890 --> 01:10:46,469
 concepts for the average application

2790
01:10:43,100 --> 01:10:46,469
 

2791
01:10:43,110 --> 01:10:50,640
 engineer using C++ what does that mean

2792
01:10:46,459 --> 01:10:50,640
 

2793
01:10:46,469 --> 01:10:51,960
 for us yeah so I mean this is an

2794
01:10:50,630 --> 01:10:51,960
 

2795
01:10:50,640 --> 01:10:53,910
 interesting thing so I think in general

2796
01:10:51,950 --> 01:10:53,910
 

2797
01:10:51,960 --> 01:10:56,699
 concepts is going to just mean better

2798
01:10:53,900 --> 01:10:56,699
 

2799
01:10:53,910 --> 01:11:00,750
 error messages for most of the

2800
01:10:56,689 --> 01:11:00,750
 

2801
01:10:56,699 --> 01:11:02,130
 programmers for those who are library

2802
01:11:00,740 --> 01:11:02,130
 

2803
01:11:00,750 --> 01:11:06,060
 writers who are trying to figure out

2804
01:11:02,120 --> 01:11:06,060
 

2805
01:11:02,130 --> 01:11:09,840
 what what what the algebraic structure

2806
01:11:06,050 --> 01:11:09,840
 

2807
01:11:06,060 --> 01:11:12,360
 is of what they're doing concepts will

2808
01:11:09,830 --> 01:11:12,360
 

2809
01:11:09,840 --> 01:11:15,110
 be important if you look at the history

2810
01:11:12,350 --> 01:11:15,110
 

2811
01:11:12,360 --> 01:11:17,190
 of mathematics right I mean we have

2812
01:11:15,100 --> 01:11:17,190
 

2813
01:11:15,110 --> 01:11:19,920
 algebraic structures have names like

2814
01:11:17,180 --> 01:11:19,920
 

2815
01:11:17,190 --> 01:11:22,020
 rings and mono it's in groups and semi

2816
01:11:19,910 --> 01:11:22,020
 

2817
01:11:19,920 --> 01:11:24,630
 groups right those are the names of

2818
01:11:22,010 --> 01:11:24,630
 

2819
01:11:22,020 --> 01:11:27,989
 algebraic structures right as a

2820
01:11:24,620 --> 01:11:27,989
 

2821
01:11:24,630 --> 01:11:29,410
 mathematician mathematicians don't go

2822
01:11:27,979 --> 01:11:29,410
 

2823
01:11:27,989 --> 01:11:32,910
 hey I know I'm going to

2824
01:11:29,400 --> 01:11:32,910
 

2825
01:11:29,410 --> 01:11:37,360
 a new algebraic structure today okay

2826
01:11:32,900 --> 01:11:37,360
 

2827
01:11:32,910 --> 01:11:40,440
 that doesn't happen that's part of the

2828
01:11:37,350 --> 01:11:40,440
 

2829
01:11:37,360 --> 01:11:44,620
 realization with with concepts light

2830
01:11:40,430 --> 01:11:44,620
 

2831
01:11:40,440 --> 01:11:49,170
 which is is we don't necessarily need a

2832
01:11:44,610 --> 01:11:49,170
 

2833
01:11:44,620 --> 01:11:51,520
 way within the language to to define

2834
01:11:49,160 --> 01:11:51,520
 

2835
01:11:49,170 --> 01:11:54,340
 concepts what we need is a way is to

2836
01:11:51,510 --> 01:11:54,340
 

2837
01:11:51,520 --> 01:11:56,410
 constrain functions to say that they

2838
01:11:54,330 --> 01:11:56,410
 

2839
01:11:54,340 --> 01:12:00,850
 only operate when it types satisfies a

2840
01:11:56,400 --> 01:12:00,850
 

2841
01:11:56,410 --> 01:12:03,160
 concept okay we do need some way then to

2842
01:12:00,840 --> 01:12:03,160
 

2843
01:12:00,850 --> 01:12:05,920
 specify the concept into that and so we

2844
01:12:03,150 --> 01:12:05,920
 

2845
01:12:03,160 --> 01:12:08,080
 need some very lightweight mechanism but

2846
01:12:05,910 --> 01:12:08,080
 

2847
01:12:05,920 --> 01:12:09,970
 a concept as we said before is a

2848
01:12:08,070 --> 01:12:09,970
 

2849
01:12:08,080 --> 01:12:11,680
 relationship for anybody who attended my

2850
01:12:09,960 --> 01:12:11,680
 

2851
01:12:09,970 --> 01:12:13,390
 talk last night one of the fundamental

2852
01:12:11,670 --> 01:12:13,390
 

2853
01:12:11,680 --> 01:12:15,010
 things that I said is for a new

2854
01:12:13,380 --> 01:12:15,010
 

2855
01:12:13,390 --> 01:12:16,450
 relationship there's a corresponding

2856
01:12:15,000 --> 01:12:16,450
 

2857
01:12:15,010 --> 01:12:18,940
 predicate that goes along with that

2858
01:12:16,440 --> 01:12:18,940
 

2859
01:12:16,450 --> 01:12:23,400
 relationship and we know how to describe

2860
01:12:18,930 --> 01:12:23,400
 

2861
01:12:18,940 --> 01:12:26,500
 predicates in code and so so I can

2862
01:12:23,390 --> 01:12:26,500
 

2863
01:12:23,400 --> 01:12:30,460
 convert my concepts into a predicate to

2864
01:12:26,490 --> 01:12:30,460
 

2865
01:12:26,500 --> 01:12:34,060
 say does this type satisfy this set of

2866
01:12:30,450 --> 01:12:34,060
 

2867
01:12:30,460 --> 01:12:35,740
 relationships or not and so I already

2868
01:12:34,050 --> 01:12:35,740
 

2869
01:12:34,060 --> 01:12:37,150
 know how to do that that's just a

2870
01:12:35,730 --> 01:12:37,150
 

2871
01:12:35,740 --> 01:12:40,180
 function that returns true or false

2872
01:12:37,140 --> 01:12:40,180
 

2873
01:12:37,150 --> 01:12:41,170
 right that's what a predicate is and so

2874
01:12:40,170 --> 01:12:41,170
 

2875
01:12:40,180 --> 01:12:43,930
 if I have that

2876
01:12:41,160 --> 01:12:43,930
 

2877
01:12:41,170 --> 01:12:47,620
 and now I've got constraints I've got

2878
01:12:43,920 --> 01:12:47,620
 

2879
01:12:43,930 --> 01:12:51,370
 most of what I need right right and so

2880
01:12:47,610 --> 01:12:51,370
 

2881
01:12:47,620 --> 01:12:53,460
 so I actually think that that it's been

2882
01:12:51,360 --> 01:12:53,460
 

2883
01:12:51,370 --> 01:12:57,160
 this huge effort to get concepts

2884
01:12:53,450 --> 01:12:57,160
 

2885
01:12:53,460 --> 01:13:00,220
 surfaced up into the language but as far

2886
01:12:57,150 --> 01:13:00,220
 

2887
01:12:57,160 --> 01:13:03,850
 as a language feature goes hopefully

2888
01:13:00,210 --> 01:13:03,850
 

2889
01:13:00,220 --> 01:13:05,860
 they're relatively minor right right

2890
01:13:03,840 --> 01:13:05,860
 

2891
01:13:03,850 --> 01:13:10,690
 we're dealing with them kind of already

2892
01:13:05,850 --> 01:13:10,690
 

2893
01:13:05,860 --> 01:13:12,280
 just informally yeah I had a question

2894
01:13:10,680 --> 01:13:12,280
 

2895
01:13:10,690 --> 01:13:15,460
 about what you said

2896
01:13:12,270 --> 01:13:15,460
 

2897
01:13:12,280 --> 01:13:18,070
 for concept in C bluehost gwenny where

2898
01:13:15,450 --> 01:13:18,070
 

2899
01:13:15,460 --> 01:13:21,400
 you were saying that some people would

2900
01:13:18,060 --> 01:13:21,400
 

2901
01:13:18,070 --> 01:13:24,220
 like to go further mm-hmm where you were

2902
01:13:21,390 --> 01:13:24,220
 

2903
01:13:21,400 --> 01:13:26,980
 forcing definition checking in some in

2904
01:13:24,210 --> 01:13:26,980
 

2905
01:13:24,220 --> 01:13:28,720
 concepts or something else oh I'm not

2906
01:13:26,970 --> 01:13:28,720
 

2907
01:13:26,980 --> 01:13:30,550
 gonna get into you know all the things

2908
01:13:28,710 --> 01:13:30,550
 

2909
01:13:28,720 --> 01:13:33,760
 that I've heard basically anything

2910
01:13:30,540 --> 01:13:33,760
 

2911
01:13:30,550 --> 01:13:35,350
 that's in the unified proposal or any of

2912
01:13:33,750 --> 01:13:35,350
 

2913
01:13:33,760 --> 01:13:38,260
 the two proposals that led to the

2914
01:13:35,340 --> 01:13:38,260
 

2915
01:13:35,350 --> 01:13:39,489
 unified proposal has been pitched in

2916
01:13:38,250 --> 01:13:39,489
 

2917
01:13:38,260 --> 01:13:42,070
 some form

2918
01:13:39,479 --> 01:13:42,070
 

2919
01:13:39,489 --> 01:13:49,480
 back to the committee usually leading to

2920
01:13:42,060 --> 01:13:49,480
 

2921
01:13:42,070 --> 01:13:52,390
 an immediate argument so so yes there's

2922
01:13:49,470 --> 01:13:52,390
 

2923
01:13:49,480 --> 01:13:59,290
 there's a huge amount of pressure to get

2924
01:13:52,380 --> 01:13:59,290
 

2925
01:13:52,390 --> 01:14:02,650
 more and personally I'm something who I

2926
01:13:59,280 --> 01:14:02,650
 

2927
01:13:59,290 --> 01:14:05,730
 want simpler and less right I want I

2928
01:14:02,640 --> 01:14:05,730
 

2929
01:14:02,650 --> 01:14:09,640
 want more consistent and unified first I

2930
01:14:05,720 --> 01:14:09,640
 

2931
01:14:05,730 --> 01:14:13,660
 want experience first and so I'm like no

2932
01:14:09,630 --> 01:14:13,660
 

2933
01:14:09,640 --> 01:14:19,150
 we should have taken this baby step you

2934
01:14:13,650 --> 01:14:19,150
 

2935
01:14:13,660 --> 01:14:21,489
 know in in 2005 right right right

2936
01:14:19,140 --> 01:14:21,489
 

2937
01:14:19,150 --> 01:14:23,140
 somewhere in there we should have we

2938
01:14:21,479 --> 01:14:23,140
 

2939
01:14:21,489 --> 01:14:25,840
 should have had a version of C++ that

2940
01:14:23,130 --> 01:14:25,840
 

2941
01:14:23,140 --> 01:14:26,800
 had just the basic notion of concepts

2942
01:14:25,830 --> 01:14:26,800
 

2943
01:14:25,840 --> 01:14:30,730
 and we should have started gaining

2944
01:14:26,790 --> 01:14:30,730
 

2945
01:14:26,800 --> 01:14:34,330
 experience and so we're starting way

2946
01:14:30,720 --> 01:14:34,330
 

2947
01:14:30,730 --> 01:14:37,060
 late but I want to see it small in a

2948
01:14:34,320 --> 01:14:37,060
 

2949
01:14:34,330 --> 01:14:39,820
 baby step one of the things I think you

2950
01:14:37,050 --> 01:14:39,820
 

2951
01:14:37,060 --> 01:14:42,610
 said was important Alex was the time

2952
01:14:39,810 --> 01:14:42,610
 

2953
01:14:39,820 --> 01:14:45,580
 complexity properties of what he was

2954
01:14:42,600 --> 01:14:45,580
 

2955
01:14:42,610 --> 01:14:47,290
 doing we have that buted things I like

2956
01:14:45,570 --> 01:14:47,290
 

2957
01:14:45,580 --> 01:14:49,300
 to know the stl when I first saw it was

2958
01:14:47,280 --> 01:14:49,300
 

2959
01:14:47,290 --> 01:14:50,920
 that you could reason about the

2960
01:14:49,290 --> 01:14:50,920
 

2961
01:14:49,300 --> 01:14:53,770
 complexity of how you were putting

2962
01:14:50,910 --> 01:14:53,770
 

2963
01:14:50,920 --> 01:14:55,989
 things together yes but I've never seen

2964
01:14:53,760 --> 01:14:55,989
 

2965
01:14:53,770 --> 01:14:58,360
 anything in any of the concert stuff

2966
01:14:55,979 --> 01:14:58,360
 

2967
01:14:55,989 --> 01:15:00,100
 that addresses that aspect is that like

2968
01:14:58,350 --> 01:15:00,100
 

2969
01:14:58,360 --> 01:15:02,560
 one thing that is still completely

2970
01:15:00,090 --> 01:15:02,560
 

2971
01:15:00,100 --> 01:15:06,730
 missing well it's it's not completely

2972
01:15:02,550 --> 01:15:06,730
 

2973
01:15:02,560 --> 01:15:11,380
 missing we tend to do it through through

2974
01:15:06,720 --> 01:15:11,380
 

2975
01:15:06,730 --> 01:15:14,830
 kind of syntactic conformance so you

2976
01:15:11,370 --> 01:15:14,830
 

2977
01:15:11,380 --> 01:15:16,660
 know an example incrementing an iterator

2978
01:15:14,820 --> 01:15:16,660
 

2979
01:15:14,830 --> 01:15:18,670
 plus plus on an iterator should be

2980
01:15:16,650 --> 01:15:18,670
 

2981
01:15:16,660 --> 01:15:21,520
 constant time if it's not constant time

2982
01:15:18,660 --> 01:15:21,520
 

2983
01:15:18,670 --> 01:15:25,239
 don't Inc don't implement plus plus but

2984
01:15:21,510 --> 01:15:25,239
 

2985
01:15:21,520 --> 01:15:28,390
 there's no I'm sorry don't don't

2986
01:15:25,229 --> 01:15:28,390
 

2987
01:15:25,239 --> 01:15:31,210
 implement shouldn't have just said

2988
01:15:28,380 --> 01:15:31,210
 

2989
01:15:28,390 --> 01:15:34,000
 increment addition right advancing an

2990
01:15:31,200 --> 01:15:34,000
 

2991
01:15:31,210 --> 01:15:36,100
 iterator so if you have operator Plus on

2992
01:15:33,990 --> 01:15:36,100
 

2993
01:15:34,000 --> 01:15:37,420
 it it should be constant time there's no

2994
01:15:36,090 --> 01:15:37,420
 

2995
01:15:36,100 --> 01:15:40,600
 reason why I couldn't implement an

2996
01:15:37,410 --> 01:15:40,600
 

2997
01:15:37,420 --> 01:15:44,350
 operator plus on a linked list that was

2998
01:15:40,590 --> 01:15:44,350
 

2999
01:15:40,600 --> 01:15:46,600
 order n okay but we just say don't okay

3000
01:15:44,340 --> 01:15:46,600
 

3001
01:15:44,350 --> 01:15:48,820
 we say say implicit in the operation

3002
01:15:46,590 --> 01:15:48,820
 

3003
01:15:46,600 --> 01:15:49,439
 plus is that it should it should be

3004
01:15:48,810 --> 01:15:49,439
 

3005
01:15:48,820 --> 01:15:52,409
 constant

3006
01:15:49,429 --> 01:15:52,409
 

3007
01:15:49,439 --> 01:15:54,389
 and and if you don't care one way or the

3008
01:15:52,399 --> 01:15:54,389
 

3009
01:15:52,409 --> 01:15:58,979
 other then we have a function called use

3010
01:15:54,379 --> 01:15:58,979
 

3011
01:15:54,389 --> 01:16:00,959
 you know called advance okay so so in

3012
01:15:58,969 --> 01:16:00,959
 

3013
01:15:58,979 --> 01:16:03,809
 that sense we're associating the

3014
01:16:00,949 --> 01:16:03,809
 

3015
01:16:00,959 --> 01:16:05,880
 semantics with the syntactic form we're

3016
01:16:03,799 --> 01:16:05,880
 

3017
01:16:03,809 --> 01:16:08,130
 associating the semantics of complexity

3018
01:16:05,870 --> 01:16:08,130
 

3019
01:16:05,880 --> 01:16:10,709
 with the name of the operation with the

3020
01:16:08,120 --> 01:16:10,709
 

3021
01:16:08,130 --> 01:16:12,989
 name of the function and so that's the

3022
01:16:10,699 --> 01:16:12,989
 

3023
01:16:10,709 --> 01:16:15,679
 approach that concepts within the

3024
01:16:12,979 --> 01:16:15,679
 

3025
01:16:12,989 --> 01:16:17,909
 language is going it's not that that

3026
01:16:15,669 --> 01:16:17,909
 

3027
01:16:15,679 --> 01:16:20,449
 complexity is not important is that we

3028
01:16:17,899 --> 01:16:20,449
 

3029
01:16:17,909 --> 01:16:23,249
 just associate it with the names

3030
01:16:20,439 --> 01:16:23,249
 

3031
01:16:20,449 --> 01:16:25,829
 conformance with the names thank you

3032
01:16:23,239 --> 01:16:25,829
 

3033
01:16:23,249 --> 01:16:29,760
 Shawn that was great

3034
01:16:25,819 --> 01:16:29,760
 

3035
01:16:25,829 --> 01:16:32,070
 the I think for a lot of people myself

3036
01:16:29,750 --> 01:16:32,070
 

3037
01:16:29,760 --> 01:16:36,689
 certainly included it had a lot of nice

3038
01:16:32,060 --> 01:16:36,689
 

3039
01:16:32,070 --> 01:16:38,820
 things to add to the reading list other

3040
01:16:36,679 --> 01:16:38,820
 

3041
01:16:36,689 --> 01:16:41,400
 than adding to the reading list is there

3042
01:16:38,810 --> 01:16:41,400
 

3043
01:16:38,820 --> 01:16:43,289
 anything that you want to say as like

3044
01:16:41,390 --> 01:16:43,289
 

3045
01:16:41,400 --> 01:16:45,630
 what is the homework that you wish

3046
01:16:43,279 --> 01:16:45,630
 

3047
01:16:43,289 --> 01:16:47,939
 everyone took away from this what is the

3048
01:16:45,620 --> 01:16:47,939
 

3049
01:16:45,630 --> 01:16:49,619
 homework I you know I think my homework

3050
01:16:47,929 --> 01:16:49,619
 

3051
01:16:47,939 --> 01:16:51,840
 is always the same thing which is keep

3052
01:16:49,609 --> 01:16:51,840
 

3053
01:16:49,619 --> 01:16:59,579
 striving to write better code write keep

3054
01:16:51,830 --> 01:16:59,579
 

3055
01:16:51,840 --> 01:17:02,519
 people keep learning you know I think

3056
01:16:59,569 --> 01:17:02,519
 

3057
01:16:59,579 --> 01:17:05,280
 STL was out there for a very long time

3058
01:17:02,509 --> 01:17:05,280
 

3059
01:17:02,519 --> 01:17:07,889
 and most people only knew the only thing

3060
01:17:05,270 --> 01:17:07,889
 

3061
01:17:05,280 --> 01:17:12,269
 they knew about STL was they had vector

3062
01:17:07,879 --> 01:17:12,269
 

3063
01:17:07,889 --> 01:17:14,699
 list and map right right and and that is

3064
01:17:12,259 --> 01:17:14,699
 

3065
01:17:12,269 --> 01:17:17,729
 not the point of STL the algorithms are

3066
01:17:14,689 --> 01:17:17,729
 

3067
01:17:14,699 --> 01:17:19,829
 the point of STL right go and look in in

3068
01:17:17,719 --> 01:17:19,829
 

3069
01:17:17,729 --> 01:17:22,579
 algorithms that's the point right

3070
01:17:19,819 --> 01:17:22,579
 

3071
01:17:19,829 --> 01:17:24,630
 rotate stable partitions stable sort

3072
01:17:22,569 --> 01:17:24,630
 

3073
01:17:22,579 --> 01:17:26,249
 those are the important things to

3074
01:17:24,620 --> 01:17:26,249
 

3075
01:17:24,630 --> 01:17:29,070
 understand and to understand how to use

3076
01:17:26,239 --> 01:17:29,070
 

3077
01:17:26,249 --> 01:17:31,889
 them and I'm kind of hoping that

3078
01:17:29,060 --> 01:17:31,889
 

3079
01:17:29,070 --> 01:17:34,979
 awareness is is rising up in the

3080
01:17:31,879 --> 01:17:34,979
 

3081
01:17:31,889 --> 01:17:37,619
 community and you know and so the

3082
01:17:34,969 --> 01:17:37,619
 

3083
01:17:34,979 --> 01:17:41,150
 takeaway homework is to say say learn

3084
01:17:37,609 --> 01:17:41,150
 

3085
01:17:37,619 --> 01:17:45,329
 STL not just at a superficial level but

3086
01:17:41,140 --> 01:17:45,329
 

3087
01:17:41,150 --> 01:17:48,449
 as as an example right right and start

3088
01:17:45,319 --> 01:17:48,449
 

3089
01:17:45,329 --> 01:17:50,880
 to look at how do I write my code like

3090
01:17:48,439 --> 01:17:50,880
 

3091
01:17:48,449 --> 01:17:55,590
 that how do I bring that level of

3092
01:17:50,870 --> 01:17:55,590
 

3093
01:17:50,880 --> 01:17:58,079
 precision and performance and predict

3094
01:17:55,580 --> 01:17:58,079
 

3095
01:17:55,590 --> 01:18:02,469
 you know predictability to the code that

3096
01:17:58,069 --> 01:18:02,469
 

3097
01:17:58,079 --> 01:18:05,110
 I'm writing how how do I do that

3098
01:18:02,459 --> 01:18:05,110
 

3099
01:18:02,469 --> 01:18:09,460
 if you know that to me is still the

3100
01:18:05,100 --> 01:18:09,460
 

3101
01:18:05,110 --> 01:18:12,310
 model I think hopeless follows on

3102
01:18:09,450 --> 01:18:12,310
 

3103
01:18:09,460 --> 01:18:14,260
 relatively well I work in a team where

3104
01:18:12,300 --> 01:18:14,260
 

3105
01:18:12,310 --> 01:18:17,250
 not many other people would write

3106
01:18:14,250 --> 01:18:17,250
 

3107
01:18:14,260 --> 01:18:19,860
 generic algorithms uh-huh and I'd see

3108
01:18:17,240 --> 01:18:19,860
 

3109
01:18:17,250 --> 01:18:23,140
 what I'm familiar with with concepts

3110
01:18:19,850 --> 01:18:23,140
 

3111
01:18:19,860 --> 01:18:25,540
 looks like it will make it a lot generic

3112
01:18:23,130 --> 01:18:25,540
 

3113
01:18:23,140 --> 01:18:28,300
 programming a lot more approachable do

3114
01:18:25,530 --> 01:18:28,300
 

3115
01:18:25,540 --> 01:18:32,170
 you have at the moment perhaps a easy

3116
01:18:28,290 --> 01:18:32,170
 

3117
01:18:28,300 --> 01:18:34,420
 introduction or another talk that you're

3118
01:18:32,160 --> 01:18:34,420
 

3119
01:18:32,170 --> 01:18:36,670
 familiar with that would help introduce

3120
01:18:34,410 --> 01:18:36,670
 

3121
01:18:34,420 --> 01:18:39,040
 what we're getting in C++ 20 with

3122
01:18:36,660 --> 01:18:39,040
 

3123
01:18:36,670 --> 01:18:41,980
 concepts that might assist me in

3124
01:18:39,030 --> 01:18:41,980
 

3125
01:18:39,040 --> 01:18:43,660
 introducing concepts to my team you know

3126
01:18:41,970 --> 01:18:43,660
 

3127
01:18:41,980 --> 01:18:47,440
 I probably wouldn't go straight to

3128
01:18:43,650 --> 01:18:47,440
 

3129
01:18:43,660 --> 01:18:50,980
 concepts I would probably introduce look

3130
01:18:47,430 --> 01:18:50,980
 

3131
01:18:47,440 --> 01:18:53,890
 at some of Eric enablers talks on on the

3132
01:18:50,970 --> 01:18:53,890
 

3133
01:18:50,980 --> 01:18:56,800
 range library because the range library

3134
01:18:53,880 --> 01:18:56,800
 

3135
01:18:53,890 --> 01:18:59,380
 is probably the first significant

3136
01:18:56,790 --> 01:18:59,380
 

3137
01:18:56,800 --> 01:19:02,890
 library that's written in terms of

3138
01:18:59,370 --> 01:19:02,890
 

3139
01:18:59,380 --> 01:19:06,420
 concepts and so that would be where I

3140
01:19:02,880 --> 01:19:06,420
 

3141
01:19:02,890 --> 01:19:08,969
 would start kind of come out at sideways

3142
01:19:06,410 --> 01:19:08,969
 

3143
01:19:06,420 --> 01:19:11,770
 and say look you you know you have

3144
01:19:08,959 --> 01:19:11,770
 

3145
01:19:08,969 --> 01:19:15,400
 another algorithm library here that's a

3146
01:19:11,760 --> 01:19:15,400
 

3147
01:19:11,770 --> 01:19:18,850
 bit more approachable and and that

3148
01:19:15,390 --> 01:19:18,850
 

3149
01:19:15,400 --> 01:19:20,739
 leverages concepts and puts all these

3150
01:19:18,840 --> 01:19:20,739
 

3151
01:19:18,850 --> 01:19:24,580
 ideas together so that would be where I

3152
01:19:20,729 --> 01:19:24,580
 

3153
01:19:20,739 --> 01:19:29,650
 would probably start I would think if

3154
01:19:24,570 --> 01:19:29,650
 

3155
01:19:24,580 --> 01:19:33,989
 you just want to get a current

3156
01:19:29,640 --> 01:19:33,989
 

3157
01:19:29,650 --> 01:19:38,469
 state-of-the-art in C++ concepts and

3158
01:19:33,979 --> 01:19:38,469
 

3159
01:19:33,989 --> 01:19:40,620
 Andrew Sutton's CPP Khan talk was pretty

3160
01:19:38,459 --> 01:19:40,620
 

3161
01:19:38,469 --> 01:19:40,620
 good

3162
01:19:44,450 --> 01:19:44,450
 

3163
01:19:44,460 --> 01:19:50,580
 yeah and that was our last question

3164
01:19:46,380 --> 01:19:50,580
 

3165
01:19:46,390 --> 01:19:50,580
 right thank you very much Sean